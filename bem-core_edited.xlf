<?xml version="1.0" encoding="UTF-8" ?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" version="1.2"> <file original="common.docs/i-bem-js/i-bem-js-params.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533"> <body> <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="data-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="data-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu2" resname="----id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Передача параметров экземпляру блока</source><target state="translated" xml:lang="en">Passing parameters to a block instance</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu3" resname="---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Синтаксис передачи параметров</source><target state="translated" xml:lang="en">Syntax for passing parameters</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Параметры блока хранятся в атрибуте <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> HTML-элемента и передаются блоку в момент инициализации. Параметры позволяют влиять на поведение конкретного экземпляра блока, привязанного к данному HTML-элементу.</source><target state="translated" xml:lang="en">Block parameters are stored in the <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> attribute of an HTML element, and are passed to the block at the time of initialization. Use parameters to control the behavior of a specific block instance that is bound to a given HTML element.</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Значение атрибута <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> должно содержать валидный JSON описвающий хэш вида:</source><target state="translated" xml:lang="en">The value of the <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> attribute must contain valid JSON describing a hash in the format:</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">ключ — <bpt id="1">&lt;code&gt;</bpt>{String}<ept id="1">&lt;/code&gt;</ept>, имя блока;</source><target state="translated" xml:lang="en">key — <bpt id="1">&lt;code&gt;</bpt>{String}<ept id="1">&lt;/code&gt;</ept>, name of the block.</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">значение — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>, параметры данного блока. Если данному экземпляру блока не требуются<ph id="2">&lt;br /&gt;</ph>параметры, указывается пустой хэш <bpt id="3">&lt;code&gt;</bpt>{}<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">value — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>, parameters of the block. If this instance of the block does not need<ph id="2">&lt;br /&gt;</ph>parameters, specify an empty hash <bpt id="3">&lt;code&gt;</bpt>{}<ept id="3">&lt;/code&gt;</ept>.</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu8" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph><ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph><ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если к HTML-элементу <bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md#html-mixes"&gt;</bpt>привязано несколько JS-блоков<ept id="1">&lt;/a&gt;</ept>, в значении атрибута <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> должны содержаться параметры для каждого из них:</source><target state="translated" xml:lang="en">If an HTML element has <bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md#html-mixes"&gt;</bpt>multiple JS blocks bound to it<ept id="1">&lt;/a&gt;</ept>, the value of the <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> attribute must contain the parameters for each of them:</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu10" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block another-block i-bem" data-bem='{ "my-block": {}, "another-block": {} }'&gt;</ph><ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block another-block i-bem" data-bem='{ "my-block": {}, "another-block": {} }'&gt;</ph><ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Параметры элемента<ept id="1">&lt;/strong&gt;</ept> передаются через атрибута <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> DOM-узла элемента. Например, передать параметры элементу <bpt id="3">&lt;code&gt;</bpt>my-elem<ept id="3">&lt;/code&gt;</ept> блока <bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept> можно так:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Element parameters<ept id="1">&lt;/strong&gt;</ept> are passed via the <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> attribute of the element's DOM node. For example, you can pass parameters to the <bpt id="3">&lt;code&gt;</bpt>my-elem<ept id="3">&lt;/code&gt;</ept> element in the <bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept> block like this:</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu12" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="my-block__my-elem" data-bem='{ "my-block__my-elem": {} }'&gt;</ph><ph id="swf_auto_html_tag-2">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="my-block__my-elem" data-bem='{ "my-block__my-elem": {} }'&gt;</ph><ph id="swf_auto_html_tag-2">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu13" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Указание имени блока в параметрах позволяет:</source><target state="translated" xml:lang="en">Specifying the block name in the parameters provides the following advantages:</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu14" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">ускорить инициализацию блоков – не нужно парсить значение атрибута <bpt id="1">&lt;code&gt;</bpt>class<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Blocks are initialized faster, since the value of the <bpt id="1">&lt;code&gt;</bpt>class<ept id="1">&lt;/code&gt;</ept> attribute doesn't have to be parsed.</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu15" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">размещать несколько блоков на одном HTML-элементе без необходимости множить его атрибуты.</source><target state="translated" xml:lang="en">Multiple blocks can be put on the same HTML element without having to multiply its attributes.</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu16" resname="------id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Доступ к параметрам из экземпляра блока</source><target state="translated" xml:lang="en">Accessing parameters from a block instance</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Доступ к параметрам из экземпляра блока можно получить через поле <bpt id="1">&lt;code&gt;</bpt>this.params<ept id="1">&lt;/code&gt;</ept>. Его значение – хэш параметров из атрибута <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> DOM-элемента блока (<bpt id="3">&lt;code&gt;</bpt>this.domElem<ept id="3">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en">You can access parameters from a block instance via the <bpt id="1">&lt;code&gt;</bpt>this.params<ept id="1">&lt;/code&gt;</ept> field. Its value is a hash of parameters from the <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> attribute of the block's DOM element (<bpt id="3">&lt;code&gt;</bpt>this.domElem<ept id="3">&lt;/code&gt;</ept>).</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, получить доступ к параметрам блока <bpt id="1">&lt;code&gt;</bpt>my-block<ept id="1">&lt;/code&gt;</ept> можно так:</source><target state="translated" xml:lang="en">For example, you can access parameters of the <bpt id="1">&lt;code&gt;</bpt>my-block<ept id="1">&lt;/code&gt;</ept> block like this:</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu19" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": { "foo" : "bar" } }'&gt;</ph><ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": { "foo" : "bar" } }'&gt;</ph><ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu20" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                console.log(this.params); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                console.log(this.params); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для получения параметров элемента служит метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>elemParams<ept id="1">&lt;/code&gt;</ept>. Он принимает аргументом строку с именем элемента или его jQuery-объект. Возвращает хэш параметров элемента.</source><target state="translated" xml:lang="en">To get element parameters, use the <bpt id="1">&lt;code&gt;</bpt>elemParams<ept id="1">&lt;/code&gt;</ept> method of the block instance. It accepts a string argument with the element name or its jQuery object. It returns a hash of element parameters.</target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu22" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="my-block__my-elem" data-bem='{ "my-block__my-elem": { "foo" : "bar" } }'&gt;</ph><ph id="swf_auto_html_tag-2">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="my-block__my-elem" data-bem='{ "my-block__my-elem": { "foo" : "bar" } }'&gt;</ph><ph id="swf_auto_html_tag-2">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -855927280-0?></trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                    console.log(this.elemParams('my-elem')); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                    console.log(this.elemParams('my-elem')); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -855927280-0?><alt-trans origin="autoFuzzy" ts="19" match-quality="87" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                console.log(this.params); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                console.log(this.params); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-dom.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="dom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu2" resname="--dom--id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Работа с DOM-деревом</source><target state="translated" xml:lang="en">Working with the DOM tree</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="domElem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="domElem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu4" resname="dom----id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">DOM-узел экземпляра блока</source><target state="translated" xml:lang="en">DOM node of a block instance</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В контексте экземпляра блока с DOM-представлением зарезервировано поле <bpt id="1">&lt;code&gt;</bpt>this.domElem<ept id="1">&lt;/code&gt;</ept>, содержащее jQuery-объект со ссылками на все DOM-узлы, с которыми связан данный экземпляр.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>this.domElem<ept id="1">&lt;/code&gt;</ept> field is reserved in the context of a block instance with DOM representation. This field contains a jQuery object with references to all the DOM nodes that this instance is connected to.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="elem-api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="elem-api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu7" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Элементы</source><target state="translated" xml:lang="en">Elements</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">БЭМ-элементы блоков представлены в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> как DOM-узлы, вложенные в DOM-узел экземпляра блока.</source><target state="translated" xml:lang="en">BEM elements of blocks are represented in <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> as DOM nodes nested in the DOM node of a block instance.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для обращения к DOM-узлам элементов и работы с их модификаторами, следует использовать API экземпляра блока:</source><target state="translated" xml:lang="en">To access elements' DOM nodes and work with their modifiers, use the block instance API:</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu10" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Кэширующий доступ: <bpt id="1">&lt;code&gt;</bpt>elem(elems, [modName], [modVal])<ept id="1">&lt;/code&gt;</ept>. Элемент,<ph id="2">&lt;br /&gt;</ph>полученный таким образом, не требуется сохранять в переменную.</source><target state="translated" xml:lang="en">Cached access: <bpt id="1">&lt;code&gt;</bpt>elem(elems, [modName], [modVal])<ept id="1">&lt;/code&gt;</ept>. An element<ph id="2">&lt;br /&gt;</ph>obtained this way does not need to be stored in a variable.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu11" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        this.elem('inner').text('Текст ссылки');
        /* ... */
        this.elem('inner').text('Другой текст');
    }
);<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        this.elem('inner').text('Link text');
        /* ... */
        this.elem('inner').text('Another text');
    }
);<ept id="1">&lt;/code&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Некэширующий доступ: <bpt id="1">&lt;code&gt;</bpt>findElem(elems, [modName], [modVal])<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Uncached access: <bpt id="1">&lt;code&gt;</bpt>findElem(elems, [modName], [modVal])<ept id="1">&lt;/code&gt;</ept>.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu13" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        var inner = this.findElem('inner');
        inner.text('Текст ссылки');
        /* ... */
        inner.text('Другой текст');
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        var inner = this.findElem('inner');
        inner.text('Link text');
        /* ... */
        inner.text('Another text');
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid -26268910-1?><alt-trans origin="autoFuzzy" ts="33" match-quality="72" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        this.elem('inner').text('Текст ссылки');
        /* ... */
        this.elem('inner').text('Другой текст');
    }
);<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        this.elem('inner').text('Link text');
        /* ... */
        this.elem('inner').text('Another text');
    }
);<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При <bpt id="1">&lt;a href="#dynamic"&gt;</bpt>динамическом добавлении и удалении элементов блока<ept id="1">&lt;/a&gt;</ept> может<ph id="2">&lt;br /&gt;</ph>потребоваться очистить кэш элементов. Для этого служит метод <bpt id="3">&lt;code&gt;</bpt>dropElemCache('elements')<ept id="3">&lt;/code&gt;</ept>. Он принимает строку – разделенный пробелами список имен элементов, кэш которых нужно сбросить.</source><target state="translated" xml:lang="en">When <bpt id="1">&lt;a href="#dynamic"&gt;</bpt>block elements are added and removed dynamically<ept id="1">&lt;/a&gt;</ept>, the cache of elements<ph id="2">&lt;br /&gt;</ph>may need to be cleared. Use the <bpt id="3">&lt;code&gt;</bpt>dropElemCache('elements')<ept id="3">&lt;/code&gt;</ept> method for this purpose. It accepts a string with a space-separated list of names of elements to drop the cache for.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu15" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('attach', {
    clear: function() {
        BEMDOM.destruct(this.elem('control'));
        BEMDOM.destruct(this.elem('file'));
        return this.dropElemCache('control file');
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('attach', {
    clear: function() {
        BEMDOM.destruct(this.elem('control'));
        BEMDOM.destruct(this.elem('file'));
        return this.dropElemCache('control file');
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api-find"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="api-find"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu17" resname="----dom--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Поиск экземпляров блоков в DOM-дереве</source><target state="translated" xml:lang="en">Searching for block instances in the DOM tree</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Обращение к другому блоку в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> выполняется из текущего блока,<ph id="2">&lt;br /&gt;</ph>размещенного на определенном узле DOM-дерева. Поиск других блоков в<ph id="3">&lt;br /&gt;</ph>DOM-дереве может вестись по трем направлениям (осям) относительно<ph id="4">&lt;br /&gt;</ph>DOM-узла текущего блока:</source><target state="translated" xml:lang="en">Accessing a different block in <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> is performed from the current block<ph id="2">&lt;br /&gt;</ph>located on a particular node of the DOM tree. The search for other blocks in<ph id="3">&lt;br /&gt;</ph>the DOM tree can be made in three directions (axes) relative to<ph id="4">&lt;br /&gt;</ph>the current block's DOM node:</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Внутри блока<ept id="1">&lt;/strong&gt;</ept> — на DOM-узлах, вложенных в DOM-узел текущего блока. Вспомогательные методы: <bpt id="2">&lt;code&gt;</bpt>findBlocksInside([elem], block)<ept id="2">&lt;/code&gt;</ept> и <bpt id="3">&lt;code&gt;</bpt>findBlockInside([elem], block)<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Inside the block<ept id="1">&lt;/strong&gt;</ept> — On DOM nodes nested in the DOM node of the current block. Helper methods: <bpt id="2">&lt;code&gt;</bpt>findBlocksInside([elem], block)<ept id="2">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>findBlockInside([elem], block)<ept id="3">&lt;/code&gt;</ept>.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Снаружи блока<ept id="1">&lt;/strong&gt;</ept> — на DOM-узлах, потомком которых является DOM-узел<ph id="2">&lt;br /&gt;</ph>текущего блока. Вспомогательные методы: <bpt id="3">&lt;code&gt;</bpt>findBlocksOutside([elem], block)<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>findBlockOutside([elem], block)<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Outside the block<ept id="1">&lt;/strong&gt;</ept> — On DOM nodes that the current block's DOM node<ph id="2">&lt;br /&gt;</ph>is a descendent of. Helper methods: <bpt id="3">&lt;code&gt;</bpt>findBlocksOutside([elem], block)<ept id="3">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>findBlockOutside([elem], block)<ept id="4">&lt;/code&gt;</ept>.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>На себе<ept id="1">&lt;/strong&gt;</ept> — на том же DOM-узле, на котором размещен текущий блок. Это актуально в случае <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#html-mixes"&gt;</bpt>размещения нескольких JS-блоков на одном DOM-узле<ept id="2">&lt;/a&gt;</ept> (микс). Вспомогательные методы: <bpt id="3">&lt;code&gt;</bpt>findBlocksOn([elem], block)<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>findBlockOn([elem], block)<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>On itself<ept id="1">&lt;/strong&gt;</ept> — On the same DOM node where the current block is located. This is relevant when<bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#html-mixes"&gt;</bpt>multiple JS blocks are located on a single DOM node<ept id="2">&lt;/a&gt;</ept> (a mix). Helper methods: <bpt id="3">&lt;code&gt;</bpt>findBlocksOn([elem], block)<ept id="3">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>findBlockOn([elem], block)<ept id="4">&lt;/code&gt;</ept>.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Сигнатура вспомогательных методов идентична:</source><target state="needs-review-translation" xml:lang="en">The signature of the helper methods is identical:</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu23" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>[elem]<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|jQuery}<ept id="2">&lt;/code&gt;</ept> – имя или DOM-узел элемента блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>[elem]<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|jQuery}<ept id="2">&lt;/code&gt;</ept> — The name or DOM node of the block element.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu24" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>block<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|Object}<ept id="2">&lt;/code&gt;</ept> – имя или описание искомого блока. Описанием служит хеш вида <bpt id="3">&lt;code&gt;</bpt>{ block : 'name', modName : 'foo', modVal : 'bar' }<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>block<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|Object}<ept id="2">&lt;/code&gt;</ept> – Name or description of the block being searched for. A description is a hash in the format <bpt id="3">&lt;code&gt;</bpt>{ block : 'name', modName : 'foo', modVal : 'bar' }<ept id="3">&lt;/code&gt;</ept>.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu25" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Вспомогательные методы для поиска парные. Различаются возвращаемым значением:</source><target state="needs-review-translation" xml:lang="en">The helper methods for searching are paired. They differ in the values they return:</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu26" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>findBlocks<ph id="swf_auto_html_tag-0">&lt;Direction&gt;</ph><ept id="1">&lt;/code&gt;</ept> – возвращает массив найденных блоков.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>findBlocks&lt;Direction&gt;<ept id="1">&lt;/code&gt;</ept> – Returns an array of found blocks.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu27" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>findBlock<ph id="swf_auto_html_tag-0">&lt;Direction&gt;</ph><ept id="1">&lt;/code&gt;</ept> – возвращает первый найденный блок.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>findBlock&lt;Direction&gt;<ept id="1">&lt;/code&gt;</ept> – Returns the first block found.</target><?sid -26268910-1?><alt-trans origin="autoFuzzy" ts="48" match-quality="71" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>findBlocks<ph id="swf_auto_html_tag-0">&lt;Direction&gt;</ph><ept id="1">&lt;/code&gt;</ept> – возвращает массив найденных блоков.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>findBlocks<ph id="swf_auto_html_tag-0">&lt;Direction&gt;</ph><ept id="1">&lt;/code&gt;</ept> – Returns an array of found blocks.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu28" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример<ept id="1">&lt;/strong&gt;</ept>: При переключении модификатора <bpt id="2">&lt;code&gt;</bpt>disabled<ept id="2">&lt;/code&gt;</ept> экземпляр блока<ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;code&gt;</bpt>attach<ept id="4">&lt;/code&gt;</ept> находит вложенный в него блок <bpt id="5">&lt;code&gt;</bpt>button<ept id="5">&lt;/code&gt;</ept> и переключает его<ph id="6">&lt;br /&gt;</ph>модификатор <bpt id="7">&lt;code&gt;</bpt>disabled<ept id="7">&lt;/code&gt;</ept> в то же значение, которое получил сам:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example<ept id="1">&lt;/strong&gt;</ept>: When the<bpt id="2">&lt;code&gt;</bpt>disabled<ept id="2">&lt;/code&gt;</ept> modifier is toggled, the instance of the <ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;code&gt;</bpt>attach<ept id="4">&lt;/code&gt;</ept> block finds the <bpt id="5">&lt;code&gt;</bpt>button<ept id="5">&lt;/code&gt;</ept> block nested inside it and toggles its<ph id="6">&lt;br /&gt;</ph> <bpt id="7">&lt;code&gt;</bpt>disabled<ept id="7">&lt;/code&gt;</ept> modifer to the same value that it received itself:</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu29" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('attach', ['i-bem__dom', 'button'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod: {
        'disabled': function(modName, modVal) {
            this.findBlockInside('button').setMod(modName, modVal);
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('attach', ['i-bem__dom', 'button'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod: {
        'disabled': function(modName, modVal) {
            this.findBlockInside('button').setMod(modName, modVal);
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Не используйте jQuery-селекторы для поиска блоков и элементов.<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>i-bem.js<ept id="3">&lt;/code&gt;</ept> предоставляет высокоуровневое API для доступа к DOM-узлам блоков и элементов. Прямое обращение к DOM-дереву делает код менее устойчивым к изменениям БЭМ-библиотек и может привести к возникновению сложно обнаруживаемых ошибок.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Don't use jQuery selectors to search for blocks and elements.<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>i-bem.js<ept id="3">&lt;/code&gt;</ept> provides a high-level API for accessing DOM nodes of blocks and elements. Accessing the DOM tree directly makes the code less robust to changes in the BEM libraries, and may cause errors that are difficult to detect.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dynamic"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="dynamic"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu32" resname="------dom--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Динамическое обновление блоков и элементов в DOM-дереве</source><target state="translated" xml:lang="en">Dynamic changes to blocks and elements in the DOM tree</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В современных интерфейсах зачастую необходимо создавать новые<ph id="1">&lt;br /&gt;</ph>фрагменты DOM-дерева и заменять старые в процессе работы (AJAX). В<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>i-bem.js<ept id="3">&lt;/code&gt;</ept> предусмотрены следующие функции для добавления и замены<ph id="4">&lt;br /&gt;</ph>фрагментов DOM-дерева.</source><target state="translated" xml:lang="en">In modern interfaces, it is often necessary to create new<ph id="1">&lt;br /&gt;</ph>fragments of the DOM tree and replace old ones as part of the workflow (using AJAX). The following functions<ph id="2">&lt;br /&gt;</ph>are provided in <bpt id="3">&lt;code&gt;</bpt>i-bem.js<ept id="3">&lt;/code&gt;</ept> for adding and replacing<ph id="4">&lt;br /&gt;</ph>fragments of the DOM tree.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu34" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Добавить DOM-фрагмент:</source><target state="translated" xml:lang="en">Add a DOM fragment:</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu36" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>append<ept id="1">&lt;/code&gt;</ept> — в конец указанного контекста;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>append<ept id="1">&lt;/code&gt;</ept> — to the end of the specified context.</target><?sid -26268910-1?><alt-trans origin="autoFuzzy" ts="58" match-quality="77" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>prepend<ept id="1">&lt;/code&gt;</ept> — в начало указанного контекста;</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>prepend<ept id="1">&lt;/code&gt;</ept> — to the beginning of the specified context.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu37" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>prepend<ept id="1">&lt;/code&gt;</ept> — в начало указанного контекста;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>prepend<ept id="1">&lt;/code&gt;</ept> — to the beginning of the specified context.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu38" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>before<ept id="1">&lt;/code&gt;</ept> — перед указанным контекстом;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>before<ept id="1">&lt;/code&gt;</ept> — before the specified context.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu39" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>after<ept id="1">&lt;/code&gt;</ept> — после указанного контекста;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>after<ept id="1">&lt;/code&gt;</ept> — after the specified context.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu41" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Заместить DOM-фрагмент:</source><target state="translated" xml:lang="en">Replace a DOM fragment:</target><?sid -26268910-1?><alt-trans origin="autoFuzzy" ts="56" match-quality="76" tool="Swordfish">
<source xml:lang="ru">Добавить DOM-фрагмент:</source>
<target state="translated" xml:lang="en">Add a DOM fragment:</target>
</alt-trans></trans-unit>
      <trans-unit id="tu43" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>update<ept id="1">&lt;/code&gt;</ept> — внутри указанного контекста;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>update<ept id="1">&lt;/code&gt;</ept> — inside the specified context.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu44" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu45" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>replace<ept id="1">&lt;/code&gt;</ept> — заменить указанный контекст новым DOM-фрагментом.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>replace<ept id="1">&lt;/code&gt;</ept> — replace the specified context with a new DOM fragment.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Все функции автоматически выполняют <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-ajax"&gt;</bpt>инициализацию блоков на обновленном фрагменте DOM-дерева<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">All the functions automatically <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-ajax"&gt;</bpt>initialize blocks on the updated fragment of the DOM tree<ept id="1">&lt;/a&gt;</ept>.</target><?sid -26268910-1?><alt-trans tool="TT" xml:space="default" origin="oebs" match-quality="17">
<source xml:lang="ru">Все функции автоматически выполняют <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-ajax"&gt;</bpt>инициализацию блоков на обновленном фрагменте DOM-дерева<ept id="1">&lt;/a&gt;</ept>.</source>
<target xml:lang="en">Все функции <mrk mtype="term" comment="автоматически">automatic</mrk> выполняют <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-ajax"&gt;</bpt>инициализацию блоков на обновленном фрагменте DOM-дерева<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu48" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/technology/bemhtml/current/intro/</source><target state="translated" xml:lang="en">https://en.bem.info/technology/bemhtml/current/intro/</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu49" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu50" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/technology/bemjson/current/bemjson/</source><target state="translated" xml:lang="en">https://en.bem.info/technology/bemjson/current/bemjson/</target><?sid -26268910-1?><alt-trans origin="autoFuzzy" ts="65" match-quality="76" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/technology/bemhtml/current/intro/</source>
<target state="translated" xml:lang="en">https://en.bem.info/technology/bemhtml/current/intro/</target>
</alt-trans></trans-unit>
      <trans-unit id="tu47" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы упростить создание БЭМ-сущностей на обновляемых фрагментах<ph id="1">&lt;br /&gt;</ph>DOM-дерева, можно использовать шаблонизатор<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;a href="https://ru.bem.info/technology/bemhtml/current/intro/" [#$tu48]&gt;</bpt>BEMHTML<ept id="3">&lt;/a&gt;</ept>, подключив<ph id="4">&lt;br /&gt;</ph>его в качестве <bpt id="5">&lt;a href="https://github.com/ymaps/modules" [#$tu49]&gt;</bpt>ym<ept id="5">&lt;/a&gt;</ept>-модуля. БЭМ-сущности описываются в формате<ph id="6">&lt;br /&gt;</ph><bpt id="7">&lt;a href="https://ru.bem.info/technology/bemjson/current/bemjson/" [#$tu50]&gt;</bpt>BEMJSON<ept id="7">&lt;/a&gt;</ept><ph id="8">&lt;br /&gt;</ph>непосредственно в коде блока. Функция <bpt id="9">&lt;code&gt;</bpt>BEMHTML.apply<ept id="9">&lt;/code&gt;</ept> генерирует<ph id="10">&lt;br /&gt;</ph>HTML-элементы по BEMJSON-декларации в соответствии с правилами<ph id="11">&lt;br /&gt;</ph>именования БЭМ.</source><target state="translated" xml:lang="en">To simplify the creation of BEM entities on updated fragments<ph id="1">&lt;br /&gt;</ph>of the DOM tree, you can use the<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;a href="https://ru.bem.info/technology/bemhtml/current/intro/" [#$tu48]&gt;</bpt>BEMHTML<ept id="3">&lt;/a&gt;</ept>template engine by enabling<ph id="4">&lt;br /&gt;</ph>it as a <bpt id="5">&lt;a href="https://github.com/ymaps/modules" [#$tu49]&gt;</bpt>ym<ept id="5">&lt;/a&gt;</ept> module. BEM entities are described in <ph id="6">&lt;br /&gt;</ph><bpt id="7">&lt;a href="https://ru.bem.info/technology/bemjson/current/bemjson/" [#$tu50]&gt;</bpt>BEMJSON<ept id="7">&lt;/a&gt;</ept><ph id="8">&lt;br /&gt;</ph> format directly in the block's code. The <bpt id="9">&lt;code&gt;</bpt>BEMHTML.apply<ept id="9">&lt;/code&gt;</ept> function generates <ph id="10">&lt;br /&gt;</ph>HTML elements for the BEMJSON declarations according to<ph id="11">&lt;br /&gt;</ph>BEM naming conventions.</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Метод <bpt id="2">&lt;code&gt;</bpt>_updateFileElem<ept id="2">&lt;/code&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>attach<ept id="3">&lt;/code&gt;</ept> удаляет элемент <bpt id="4">&lt;code&gt;</bpt>file<ept id="4">&lt;/code&gt;</ept>, если он существовал, и создает новый элемент с помощью функции <bpt id="5">&lt;code&gt;</bpt>BEMHTML.apply<ept id="5">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> The <bpt id="3">&lt;code&gt;</bpt>attach<ept id="3">&lt;/code&gt;</ept> block's <bpt id="2">&lt;code&gt;</bpt>_updateFileElem<ept id="2">&lt;/code&gt;</ept> method  deletes the <bpt id="4">&lt;code&gt;</bpt>file<ept id="4">&lt;/code&gt;</ept> element if it exists, and creates a new element using the <bpt id="5">&lt;code&gt;</bpt>BEMHTML.apply<ept id="5">&lt;/code&gt;</ept> function:</target><?sid -26268910-1?></trans-unit>
      <trans-unit id="tu52" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define(
    'attach',
    ['BEMHTML', 'strings__escape', 'i-bem__dom'],
    function(provide, BEMHTML, escape, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    _updateFileElem : function() {
        var fileName = extractFileNameFromPath(this.getVal());
        this.elem('file').length &amp;&amp; BEMDOM.destruct(this.elem('file'));
        BEMDOM.append(
            this.domElem,
            BEMHTML.apply({
                block : 'attach',
                elem : 'file',
                content : [
                    {
                        elem : 'icon',
                        mods : { file : extractExtensionFromFileName(fileName) }
                    },
                    { elem : 'text', content : escape.html(fileName) },
                    { elem : 'clear' }
                ]
            }));
        return this.dropElemCache('file');
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define(
    'attach',
    ['BEMHTML', 'strings__escape', 'i-bem__dom'],
    function(provide, BEMHTML, escape, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    _updateFileElem : function() {
        var fileName = extractFileNameFromPath(this.getVal());
        this.elem('file').length &amp;&amp; BEMDOM.destruct(this.elem('file'));
        BEMDOM.append(
            this.domElem,
            BEMHTML.apply({
                block : 'attach',
                elem : 'file',
                content : [
                    {
                        elem : 'icon',
                        mods : { file : extractExtensionFromFileName(fileName) }
                    },
                    { elem : 'text', content : escape.html(fileName) },
                    { elem : 'clear' }
                ]
            }));
        return this.dropElemCache('file');
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -26268910-1?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-decl.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Декларация блока</source><target state="translated" xml:lang="en">Block declaration</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">JS-реализация блока описывает поведение определенного класса элементов веб-интерфейса. В конкретных интерфейсах каждый блок может быть представлен несколькими экземплярами.<ph id="1">&lt;br /&gt;</ph>Экземпляр блока реализует функциональность своего класса и имеет собственное, независимое состояние.</source><target state="translated" xml:lang="en">A block's JS implementation defines the behavior of a specific class of web interface elements. In the actual interfaces, each block can be represented by multiple instances.<ph id="1">&lt;br /&gt;</ph>A block instance implements the functionality of its class and has its own independent state.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В терминах парадигмы <bpt id="1">&lt;strong&gt;</bpt>объектно-ориентированного программирования<ept id="1">&lt;/strong&gt;</ept>:</source><target state="translated" xml:lang="en">In <bpt id="1">&lt;strong&gt;</bpt>object-oriented programming<ept id="1">&lt;/strong&gt;</ept> terms:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">блок — класс;</source><target state="translated" xml:lang="en">a block is a class,</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">экземпляр блока — экземпляр класса.</source><target state="translated" xml:lang="en">and a block instance is a class instance.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В соответствии с ООП, вся функциональность блока реализуется модульно в методах класса <bpt id="1">&lt;em&gt;</bpt>(=блока)<ept id="1">&lt;/em&gt;</ept>.</source><target state="translated" xml:lang="en">In accordance with OOP, all the functionality of a block is implemented modularly in the methods of the class <bpt id="1">&lt;em&gt;</bpt>(=block)<ept id="1">&lt;/em&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Методы блока подразделяются на:</source><target state="translated" xml:lang="en">The block methods are divided into:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">методы экземпляра блока;</source><target state="translated" xml:lang="en">block instance methods</target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="26" match-quality="70" tool="Swordfish">
<source xml:lang="ru">DOM-узел экземпляра блока</source>
<target state="translated" xml:lang="en">DOM node of a block instance</target>

<?id 1442496379756?></alt-trans></trans-unit>
      <trans-unit id="tu10" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">статические методы.</source><target state="translated" xml:lang="en">static methods</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Код блока в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> принято называть <bpt id="2">&lt;strong&gt;</bpt>декларацией<ept id="2">&lt;/strong&gt;</ept>, чтобы подчеркнуть принятый<ph id="3">&lt;br /&gt;</ph>в БЭМ декларативный стиль программирования.</source><target state="translated" xml:lang="en">The code of a block in <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> is called a <bpt id="2">&lt;strong&gt;</bpt>declaration<ept id="2">&lt;/strong&gt;</ept> to emphasize the declarative programming style<ph id="3">&lt;br /&gt;</ph>adopted in BEM.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Поведение блока программируется в декларативном стиле в виде утверждений: <bpt id="1">&lt;code&gt;</bpt>набор условий<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;code&gt;</bpt>реакция блока<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">A block's behavior is programmed in declarative style as statements: <bpt id="1">&lt;code&gt;</bpt>set of conditions<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;code&gt;</bpt>block reaction<ept id="2">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu13" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="decl-syntax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="decl-syntax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu14" resname="--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Синтаксис декларации</source><target state="translated" xml:lang="en">Declaration syntax</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu15" resname="--dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Блоки с DOM-представлением</source><target state="translated" xml:lang="en">Blocks with DOM representation</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu16" resname="-----id" restype="x-h5" xml:space="preserve" approved="yes"><source xml:lang="ru">Объявление нового блока без родителя</source><target state="translated" xml:lang="en">Declaring a new block without a parent</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu18" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы задекларировать новый JS-блок <bpt id="1">&lt;strong&gt;</bpt>с DOM-представлением<ept id="1">&lt;/strong&gt;</ept> (привязанный к HTML-элементу), нужно воспользоваться методом <bpt id="2">&lt;code&gt;</bpt>decl<ept id="2">&lt;/code&gt;</ept> <bpt id="3">&lt;a href="https://github.com/ymaps/modules" [#$tu18]&gt;</bpt>ym<ept id="3">&lt;/a&gt;</ept>-модуля <bpt id="4">&lt;code&gt;</bpt>i-bem__dom<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">To declare a new JS block <bpt id="1">&lt;strong&gt;</bpt>with a DOM representation<ept id="1">&lt;/strong&gt;</ept> (bound to an HTML element), use the <bpt id="2">&lt;code&gt;</bpt>decl<ept id="2">&lt;/code&gt;</ept> method of the <bpt id="3">&lt;a href="https://github.com/ymaps/modules" [#$tu18]&gt;</bpt>ym<ept id="3">&lt;/a&gt;</ept> module in <bpt id="4">&lt;code&gt;</bpt>i-bem__dom<ept id="4">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Метод <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> принимает аргументы:</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> method accepts the following arguments:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Описание блока <bpt id="1">&lt;code&gt;</bpt>{String}<ept id="1">&lt;/code&gt;</ept> или <bpt id="2">&lt;code&gt;</bpt>{Object}<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">A block description as <bpt id="1">&lt;code&gt;</bpt>{String}<ept id="1">&lt;/code&gt;</ept> or <bpt id="2">&lt;code&gt;</bpt>{Object}<ept id="2">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Методы экземпляра блока — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Methods of the block instance — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Статические методы — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Static methods — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu23" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Объявленные методы будут применяться во всех экземплярах блока независимо от их состояний (модификаторов).</source><target state="translated" xml:lang="en">The declared methods will be applied to all instances of the block, regardless of their states (modifiers).</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Декларация методов для блока <bpt id="2">&lt;code&gt;</bpt>button<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> Declaration of methods for the <bpt id="2">&lt;code&gt;</bpt>button<ept id="2">&lt;/code&gt;</ept> block.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu25" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('button', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    })
);

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('button', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* instance's methods */
    },
    {
        /* static methods */
    })
);

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Поле контекста <bpt id="1">&lt;code&gt;</bpt>ym<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>this.name<ept id="2">&lt;/code&gt;</ept>, передаваемое первым аргументом методу <bpt id="3">&lt;code&gt;</bpt>BEMDOM.decl<ept id="3">&lt;/code&gt;</ept>, содержит ссылку на имя блока, указанное первым аргументом <bpt id="4">&lt;code&gt;</bpt>modules.define<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">The <bpt id="2">&lt;code&gt;</bpt>this.name<ept id="2">&lt;/code&gt;</ept> field of the <bpt id="1">&lt;code&gt;</bpt>ym<ept id="1">&lt;/code&gt;</ept> context is passed to the <bpt id="3">&lt;code&gt;</bpt>BEMDOM.decl<ept id="3">&lt;/code&gt;</ept> method as the first argument. It contains a reference to the name of the block specified as the first argument of <bpt id="4">&lt;code&gt;</bpt>modules.define<ept id="4">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="bem-decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu28" resname="--dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Блоки без DOM-представления</source><target state="translated" xml:lang="en">Blocks without DOM representation</target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="85" match-quality="84" tool="Swordfish">
<source xml:lang="ru">Блоки с DOM-представлением</source>
<target state="translated" xml:lang="en">Blocks with DOM representation</target>
</alt-trans></trans-unit>
      <trans-unit id="tu30" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu29" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для декларации блоков без DOM-представления служит метод <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;a href="https://github.com/ymaps/modules" [#$tu30]&gt;</bpt>ym<ept id="2">&lt;/a&gt;</ept>-модуля <bpt id="3">&lt;code&gt;</bpt>i-bem<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">For declaring blocks without DOM representation, use the <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> method of the <bpt id="2">&lt;a href="https://github.com/ymaps/modules" [#$tu30]&gt;</bpt>ym<ept id="2">&lt;/a&gt;</ept> module in <bpt id="3">&lt;code&gt;</bpt>i-bem<ept id="3">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Метод принимает те же параметры, что и метод <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> модуля <bpt id="2">&lt;code&gt;</bpt>i-bem__dom<ept id="2">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en">The method accepts the same parameters as the <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> method of the <bpt id="2">&lt;code&gt;</bpt>i-bem__dom<ept id="2">&lt;/code&gt;</ept> module:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu32" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem'], function(provide, BEM) {

provide(BEM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    })
);

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem'], function(provide, BEM) {

provide(BEM.decl(this.name,
    {
        /*  instance's methods */
    },
    {
        /* static methods */
    })
);

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="95" match-quality="83" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('button', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    })
);

});<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('button', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* methods of the instance */
    },
    {
        /* static methods */
    })
);

});<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu34" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Оформлять инфраструктурный код в виде блока без DOM-представления удобно, если в нем планируется использовать API БЭМ-блоков (состояния, выражаемые модификаторами, БЭМ-события и<ph id="2">&lt;br /&gt;</ph>т. п.). Если использовать БЭМ-предметную область не планируется,<ph id="3">&lt;br /&gt;</ph>инфраструктурный код можно оформлять в виде <bpt id="4">&lt;a href="https://github.com/ymaps/modules" [#$tu34]&gt;</bpt>ym<ept id="4">&lt;/a&gt;</ept>-модуля.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> It is convenient to format infrastructure code as a block without DOM representation if you are planning to use BEM block APIs in it (states expressed as modifiers, BEM events,<ph id="2">&lt;br /&gt;</ph>and so on). If you are not planning to use the BEM subject domain,<ph id="3">&lt;br /&gt;</ph>you can format infrastructure code as a <bpt id="4">&lt;a href="https://github.com/ymaps/modules" [#$tu34]&gt;</bpt>ym<ept id="4">&lt;/a&gt;</ept> module.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu36" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('router', function(provide) {

provide({
    route : function() { /* ... */ }
});

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('router', function(provide) {

provide({
    route : function() { /* ... */ }
});

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu37" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="inher"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu38" resname="--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Наследование блока</source><target state="translated" xml:lang="en">Block inheritance</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu39" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Одна и та же функциональность может быть востребована в нескольких блоках проекта.<ph id="1">&lt;br /&gt;</ph>Например, разные блоки могут обращаться за данными к бэкенду, используя AJAX,<ph id="2">&lt;br /&gt;</ph>или совершать однотипные операции с DOM-деревом и т.д. Чтобы избежать ненужных повторов в коде, общую функциональность можно инкапсулировать в виде модулей, а затем добавлять к блокам.</source><target state="translated" xml:lang="en">Various blocks in a project often use identical functionality.<ph id="1">&lt;br /&gt;</ph>For example, several blocks might use AJAX to request data from the backend,<ph id="2">&lt;br /&gt;</ph>perform the same operations with the DOM tree, and so on. To avoid unnecessary repetitions in the code, the shared functionality can be encapsulated as modules, then added to blocks.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Наследование позволяет повторно использовать функциональность блока, расширяя ее новой логикой.<ph id="1">&lt;br /&gt;</ph>В <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> доступно несколько механизмов наследования. Выбор конкретного механизма зависит от специфики создаваемого блока.</source><target state="translated" xml:lang="en">Inheritance allows reusing block functionality by extending it with new logic.<ph id="1">&lt;br /&gt;</ph>Several inheritance mechanisms are available in <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept>. The choice of a particular mechanism depends on the needs of the block being created.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu41" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-simple"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="inher-simple"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu42" resname="--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Простое наследование</source><target state="translated" xml:lang="en">Simple inheritance</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В случае простого наследования создаваемый блок объявляется как наследник существующего. Для этого нужно:</source><target state="translated" xml:lang="en">With simple inheritance, the block being created is declared as a descendant of an existing one. To do this:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu44" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Указать базовый блок в зависимостях модульной системы.</source><target state="translated" xml:lang="en">Specify the base block in the module system's dependencies.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu45" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Передать ссылку на базовый блок в специальном поле <bpt id="1">&lt;code&gt;</bpt>baseBlock<ept id="1">&lt;/code&gt;</ept> декларации.</source><target state="translated" xml:lang="en">Pass a reference to the base block in the special <bpt id="1">&lt;code&gt;</bpt>baseBlock<ept id="1">&lt;/code&gt;</ept> field in the declaration.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, блок <bpt id="1">&lt;code&gt;</bpt>bblock<ept id="1">&lt;/code&gt;</ept> наследуется от блока <bpt id="2">&lt;code&gt;</bpt>ablock<ept id="2">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en">For example, the <bpt id="1">&lt;code&gt;</bpt>bblock<ept id="1">&lt;/code&gt;</ept> block inherits from the <bpt id="2">&lt;code&gt;</bpt>ablock<ept id="2">&lt;/code&gt;</ept> block:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu47" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {}));

});

modules.define('bblock', ['i-bem__dom', 'ablock'], function(provide, BEMDOM, ABlock) {

provide(BEMDOM.decl({ block : this.name, baseBlock : ABlock }));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {}));

});

modules.define('bblock', ['i-bem__dom', 'ablock'], function(provide, BEMDOM, ABlock) {

provide(BEMDOM.decl({ block : this.name, baseBlock : ABlock }));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такой механизм позволяет использовать методы базового блока внутри производного.<ph id="1">&lt;br /&gt;</ph>Для вызова одноименных методов базового блока служит <bpt id="2">&lt;a href="i-bem-js-context.ru.md#spec-fields"&gt;</bpt>вспомогательное свойство<ept id="2">&lt;/a&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>this.__base<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">This mechanism allows using the methods of the base block inside a derived block.<ph id="1">&lt;br /&gt;</ph>To call base block methods of the same name, use the <bpt id="2">&lt;a href="i-bem-js-context.ru.md#spec-fields"&gt;</bpt>helper property<ept id="2">&lt;/a&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>this.__base<ept id="3">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> В <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept> можно создавать цепочки наследования – блок наследуется от другого,<ph id="3">&lt;br /&gt;</ph>который, в свою очередь, наследуется от третьего и т.д.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> You can create inheritance chains in <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept>, meaning that a block inherits from another one<ph id="3">&lt;br /&gt;</ph>that, in turn, inherits from a third block, and so on.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu50" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-over"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="inher-over"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu51" resname="--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Доопределение блока</source><target state="translated" xml:lang="en">Redefining a block</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы создать вариант уже существующего блока с измененной или дополненной функциональностью, можно <bpt id="1">&lt;strong&gt;</bpt>доопределить<ept id="1">&lt;/strong&gt;</ept> базовый блок на <bpt id="2">&lt;em&gt;</bpt>уровне переопределения<ept id="2">&lt;/em&gt;</ept> проекта.</source><target state="needs-review-translation" xml:lang="en">To create a variation of an existing block that alters or supplements its functionality, you can <bpt id="1">&lt;strong&gt;</bpt>redefine<ept id="1">&lt;/strong&gt;</ept> a base block on the project <bpt id="2">&lt;em&gt;</bpt>redefinition level<ept id="2">&lt;/em&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu53" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для этого в проекте создается декларация нового блока с тем же именем, что и у базового. В результате блоку будет доступна вся функциональностью базового. Реализация одноименных методов и модификаторов, при этом, будет взята из новой декларации.</source><target state="translated" xml:lang="en">In the project, create a declaration of a new block with the same name as the base block. As a result, the block will have access to all the base block's functionality. However, the implementation of methods and modifiers with the same name will be taken from the new declaration.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu54" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({})); // Доопределяем базовый блок

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Declaring the base block

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({})); // Redefining the base block

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu55" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такая схема наследования часто используется при работе с библиотечными блоками.</source><target state="translated" xml:lang="en">This type of inheritance is often used when working with library blocks.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu56" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-over-modifier"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="inher-over-modifier"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu57" resname="----id" restype="x-h5" xml:space="preserve" approved="yes"><source xml:lang="ru">Добавление модификатора к блоку</source><target state="translated" xml:lang="en">Adding a modifier to a block</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В соответствии с БЭМ-методологией состояния блока должны описываться <bpt id="1">&lt;a href="i-bem-js-states.ru.md#modifiers"&gt;</bpt>модификаторами<ept id="1">&lt;/a&gt;</ept>.<ph id="2">&lt;br /&gt;</ph>Поэтому чтобы расширить функциональность блока часто нужно реализовать поддержку новых модификаторов.</source><target state="translated" xml:lang="en">According to the BEM methodology, a block's states must be defined by <bpt id="1">&lt;a href="i-bem-js-states.ru.md#modifiers"&gt;</bpt>modifers<ept id="1">&lt;/a&gt;</ept>.<ph id="2">&lt;br /&gt;</ph>So in order to extend a block's functionality, you often need to implement support for new modifiers.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для добавления модификатора необходимо передать методу <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> доопределяемого блока:</source><target state="translated" xml:lang="en">To add a modifier, pass the redefined block's <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> method:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu60" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">хэш с ключами <bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> и <bpt id="2">&lt;code&gt;</bpt>modVal<ept id="2">&lt;/code&gt;</ept>. Значением для <bpt id="3">&lt;code&gt;</bpt>modName<ept id="3">&lt;/code&gt;</ept> служит строка – имя модификатора. Значением <bpt id="4">&lt;code&gt;</bpt>modVal<ept id="4">&lt;/code&gt;</ept> – строка со значением модификатора.</source><target state="translated" xml:lang="en">A hash with the <bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> and <bpt id="2">&lt;code&gt;</bpt>modVal<ept id="2">&lt;/code&gt;</ept> keys. The <bpt id="3">&lt;code&gt;</bpt>modName<ept id="3">&lt;/code&gt;</ept> value is a string with the modifier name. The <bpt id="4">&lt;code&gt;</bpt>modVal<ept id="4">&lt;/code&gt;</ept> value is a string with the modifier value.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu61" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">хэш методов, которые будут доступны для блока с соответствующим модификатором. При наличии одноименных методов и модификаторов, будет использована их реализация из хэша.</source><target state="translated" xml:lang="en">A hash of methods that will be available for the block with the corresponding modifier. If there are methods and modifiers of the same name, their implementation from the hash is used.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu62" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({ modName : 'm1', modVal : 'v1' }, {})); // Доопределяем базовый блок с модификтором _m1_v1

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Declaring the base block

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({ modName : 'm1', modVal : 'v1' }, {})); // Redefining the base block with the modifier _m1_v1

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="124" match-quality="77" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({})); // Доопределяем базовый блок

});<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Declaring the base block

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({})); // Redefining the base block

});<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu63" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;a href="./i-bem-js-context.ru.md"&gt;</bpt>Cтатические методы<ept id="2">&lt;/a&gt;</ept> блока будут доступны всем его экземплярам <bpt id="3">&lt;em&gt;</bpt>вне зависимости от значений модификаторов<ept id="3">&lt;/em&gt;</ept>.<ph id="4">&lt;br /&gt;</ph>Модификаторы — это свойства экземпляра блока, а статические методы принадлежат классу<ph id="5">&lt;br /&gt;</ph>блока и не учитывают состояния модификаторов.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> The block's <bpt id="2">&lt;a href="./i-bem-js-context.ru.md"&gt;</bpt>static methods<ept id="2">&lt;/a&gt;</ept> will be available to all its instances, <bpt id="3">&lt;em&gt;</bpt>regardless of modifier values<ept id="3">&lt;/em&gt;</ept>.<ph id="4">&lt;br /&gt;</ph>Modifiers are properties of the block instance, but static methods belong to the <ph id="5">&lt;br /&gt;</ph>block's class and do not take the status of modifiers into account.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu64" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-mixins"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="inher-mixins"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu65" resname="--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Блоки-миксы</source><target state="translated" xml:lang="en">Mixed blocks</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu66" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> для добавления востребованной функциональности к блокам используется специальный<ph id="2">&lt;br /&gt;</ph>тип блоков – <bpt id="3">&lt;strong&gt;</bpt>блоки-миксы<ept id="3">&lt;/strong&gt;</ept>. Главная особенность блоков-миксов состоит в том, что они не участвуют в цепочке наследования. Это позволяет примешивать реализованную в них функциональность к другим блокам без риска нарушить их <bpt id="4">&lt;a href="i-bem-js-context.ru.md#spec-fields"&gt;</bpt>связи с родительскими блоками<ept id="4">&lt;/a&gt;</ept> (<bpt id="5">&lt;code&gt;</bpt>this.__base<ept id="5">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en">In <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept>, a special type of block is used for adding needed <ph id="2">&lt;br /&gt;</ph>functionality to blocks — <bpt id="3">&lt;strong&gt;</bpt>mixed blocks<ept id="3">&lt;/strong&gt;</ept>. The main feature of mixed blocks is that they do not participate in the inheritance chain. This means their functionality can be combined with other blocks, without risk of breaking their <bpt id="4">&lt;a href="i-bem-js-context.ru.md#spec-fields"&gt;</bpt>relationships with parent blocks<ept id="4">&lt;/a&gt;</ept> (<bpt id="5">&lt;code&gt;</bpt>this.__base<ept id="5">&lt;/code&gt;</ept>).</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu67" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-mixins-declwithmix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="inher-mixins-declwithmix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu68" resname="---id" restype="x-h5" xml:space="preserve" approved="yes"><source xml:lang="ru">Примешивание блока-микса</source><target state="translated" xml:lang="en">Adding mixed blocks</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu69" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы примешать к блоку один или несколько блоков-миксов, необходимо в декларации блока присвоить значение опциональному полю <bpt id="1">&lt;code&gt;</bpt>baseMix<ept id="1">&lt;/code&gt;</ept>. Значением служит массив строк – имен примешиваемых блоков-миксов:</source><target state="translated" xml:lang="en">To add one or more mixed blocks to a block, assign a value to the optional <bpt id="1">&lt;code&gt;</bpt>baseMix<ept id="1">&lt;/code&gt;</ept> field in the block declaration. The value is an array of strings — the names of mixed blocks to add in:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu70" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom', 'foo', 'bar'], function(provide, BEMDOM) {

provide(BEMDOM.decl({ block : this.name, baseMix : ['foo', 'bar']},
    { /* методы экземпляра */ },
    { /* статические методы */ }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="needs-review-translation" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom', 'foo', 'bar'], function(provide, BEMDOM) {

provide(BEMDOM.decl({ block : this.name, baseMix : ['foo', 'bar']},
    { /* instance's methods */ },
    { /* static methods */ }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu71" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-mixins-mixindecl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="inher-mixins-mixindecl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu72" resname="---id" restype="x-h5" xml:space="preserve" approved="yes"><source xml:lang="ru">Декларация блока-микса</source><target state="translated" xml:lang="en">Mixed block declaration</target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="72" match-quality="72" tool="Swordfish">
<source xml:lang="ru">Декларация блока</source>
<target state="translated" xml:lang="en">Block declaration</target>
</alt-trans></trans-unit>
      <trans-unit id="tu73" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В качестве блоков-миксов можно использовать только блоки, созданные с помощью <bpt id="1">&lt;code&gt;</bpt>declMix<ept id="1">&lt;/code&gt;</ept>.<ph id="2">&lt;br /&gt;</ph>Метод принимает декларацию блока в формате, аналогичном методу <bpt id="3">&lt;code&gt;</bpt>decl<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Only blocks created using <bpt id="1">&lt;code&gt;</bpt>declMix<ept id="1">&lt;/code&gt;</ept> can be used as mixed blocks.<ph id="2">&lt;br /&gt;</ph>The method accepts the block declaration in the same format as for the <bpt id="3">&lt;code&gt;</bpt>decl<ept id="3">&lt;/code&gt;</ept> method.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu74" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('mymix', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.declMix('mymix', // только строка с именем
    { /* методы экземпляра */ },
    { /* статические методы */ }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="needs-review-translation" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('mymix', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.declMix('mymix', //only a string with the name
    { /* instance's methods */ },
    { /* static methods */ }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu75" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Блок-микс нельзя инстанцировать и использовать как самостоятельный блок.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> You can't instantiate a mixed block and use it as an independent block.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu76" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="trigger-decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="trigger-decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu77" resname="--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Декларация триггеров</source><target state="translated" xml:lang="en">Trigger declaration</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu78" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>Триггеры<ept id="1">&lt;/a&gt;</ept>, выполняемые при установке модификаторов, описываются в декларации блока. Для этого в хэше методов экземпляра блока зарезервированы свойства:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>Triggers<ept id="1">&lt;/a&gt;</ept> that are executed when setting modifiers are described in the block declaration. The following properties are reserved for this purpose in the hash of the block instance's methods:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu79" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов блока<ept id="2">&lt;/strong&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called before setting <bpt id="2">&lt;strong&gt;</bpt>block modifiers<ept id="2">&lt;/strong&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu80" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов элементов<ept id="2">&lt;/strong&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called before setting <bpt id="2">&lt;strong&gt;</bpt>element modifiers<ept id="2">&lt;/strong&gt;</ept>.</target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="149" match-quality="79" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов блока<ept id="2">&lt;/strong&gt;</ept>;</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called before setting <bpt id="2">&lt;strong&gt;</bpt>block modifiers<ept id="2">&lt;/strong&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu81" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые после установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов блока<ept id="2">&lt;/strong&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>onSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called after setting <bpt id="2">&lt;strong&gt;</bpt>block modifiers<ept id="2">&lt;/strong&gt;</ept>.</target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="149" match-quality="86" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов блока<ept id="2">&lt;/strong&gt;</ept>;</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called before setting <bpt id="2">&lt;strong&gt;</bpt>block modifiers<ept id="2">&lt;/strong&gt;</ept>.</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="150" match-quality="70" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов элементов<ept id="2">&lt;/strong&gt;</ept>;</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called before setting <bpt id="2">&lt;strong&gt;</bpt>element modifiers<ept id="2">&lt;/strong&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu82" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onElemSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые после установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов элементов<ept id="2">&lt;/strong&gt;</ept> блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>onElemSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called after setting block <bpt id="2">&lt;strong&gt;</bpt>element modifiers<ept id="2">&lt;/strong&gt;</ept>.</target><?sid -491770708-2?><alt-trans origin="autoFuzzy" ts="150" match-quality="80" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов элементов<ept id="2">&lt;/strong&gt;</ept>;</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called before setting <bpt id="2">&lt;strong&gt;</bpt>element modifiers<ept id="2">&lt;/strong&gt;</ept>.</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="151" match-quality="77" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые после установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов блока<ept id="2">&lt;/strong&gt;</ept>;</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>onSetMod<ept id="1">&lt;/code&gt;</ept> — Triggers called after setting <bpt id="2">&lt;strong&gt;</bpt>block modifiers<ept id="2">&lt;/strong&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu83" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('block-name', function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
        beforeSetMod: { /* триггеры до установки модификаторов блока*/}
        beforeElemSetMod: { /* триггеры до установки модификаторов элементов*/}
        onSetMod: { /* триггеры после установки модификаторов блока */ }
        onElemSetMod: { /* триггеры после установки модификаторов элементов */ }
    },
    {
        /* статические методы */
    }
));

});<ept id="1">&lt;/code&gt;</ept></source><target state="needs-review-translation" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('block-name', function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* instance's methods */
        beforeSetMod: { /* triggers before setting block modifiers*/}
        beforeElemSetMod: { /* triggers before setting element modifiers*/}
        onSetMod: { /* triggers after setting block modifiers */ }
        onElemSetMod: { /* triggers after setting element modifiers */ }
    },
    {
        /* static methods */
    }
));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu84" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Значение свойств <bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> и <bpt id="2">&lt;code&gt;</bpt>onSetMod<ept id="2">&lt;/code&gt;</ept> — хэш, связывающий изменения модификаторов с триггерами. Триггер получает аргументами:</source><target state="translated" xml:lang="en">The value of the <bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> and <bpt id="2">&lt;code&gt;</bpt>onSetMod<ept id="2">&lt;/code&gt;</ept> properties is a hash associating changes to modifiers with triggers. A trigger receives the following arguments:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu85" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> – имя модификатора;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> – The modifier name.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu86" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> – выставляемое значение модификатора;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> – The value of the modifier being set.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu87" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>prevModVal<ept id="1">&lt;/code&gt;</ept> – предыдущее значение модификатора. Для <bpt id="2">&lt;code&gt;</bpt>beforeSetMod<ept id="2">&lt;/code&gt;</ept> это текущее значение модификатора, которое будет заменено на <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept>, если триггер не вернет <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>prevModVal<ept id="1">&lt;/code&gt;</ept> – The previous modifier value. For <bpt id="2">&lt;code&gt;</bpt>beforeSetMod<ept id="2">&lt;/code&gt;</ept>, this is the current value of the modifier, which will be changed to <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept> if the trigger doesn't return <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu88" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{
    'mod1': function(modName, modVal, prevModVal) { /* ... */ }, // установка mod1 в любое значение
    'mod2': {
        'val1': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val1
        'val2': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val2
        '': function(modName, modVal, prevModVal) { /* ... */ } // триггер на удаление модификатора mod2
    'mod3': {
        'true': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку простого модификатора mod3
        '': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на удаление простого модификатора mod3
    },
    '*': function(modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора в любое значение
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>{
    'mod1': function(modName, modVal, prevModVal) { /* ... */ }, // setting mod1 to any value
    'mod2': {
        'val1': function(modName, modVal, prevModVal) { /* ... */ }, // trigger to set mod2 to the value val1
        'val2': function(modName, modVal, prevModVal) { /* ... */ }, // trigger to set mod2 to the value val2
        '': function(modName, modVal, prevModVal) { /* ... */ } // trigger to delete the mod2 modifier
    'mod3': {
        'true': function(modName, modVal, prevModVal) { /* ... */ }, // trigger to set the simple modifier mod3
        '': function(modName, modVal, prevModVal) { /* ... */ }, // trigger to delete the simple modifier mod3
    },
    '*': function(modName, modVal, prevModVal) { /* ... */ } // trigger to set any modifier to any value
}<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu89" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для триггера на установку любого модификатора блока в любое значение<ph id="1">&lt;br /&gt;</ph>существует сокращенная форма записи:</source><target state="translated" xml:lang="en">The shorthand for a trigger to set any block modifier to any value is:<ph id="1">&lt;br /&gt;</ph></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu90" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod: function(modName, modVal, prevModVal) { /* ... */ }
onSetMod: function(modName, modVal, prevModVal) { /* ... */ }<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod: function(modName, modVal, prevModVal) { /* ... */ }
onSetMod: function(modName, modVal, prevModVal) { /* ... */ }<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu91" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Триггеры на установку <bpt id="1">&lt;strong&gt;</bpt>модификаторов элемента<ept id="1">&lt;/strong&gt;</ept> описываются в свойствах <bpt id="2">&lt;code&gt;</bpt>beforeElemSetMod<ept id="2">&lt;/code&gt;</ept> и <bpt id="3">&lt;code&gt;</bpt>onElemSetMod<ept id="3">&lt;/code&gt;</ept>. Хэш в значениях свойств имеет дополнительный уровень вложенности — <bpt id="4">&lt;strong&gt;</bpt>имя элемента<ept id="4">&lt;/strong&gt;</ept>.<ph id="5">&lt;br /&gt;</ph>В качестве аргументов триггеру передаются:</source><target state="translated" xml:lang="en">Triggers to set <bpt id="1">&lt;strong&gt;</bpt>element modifiers<ept id="1">&lt;/strong&gt;</ept> are described in the <bpt id="2">&lt;code&gt;</bpt>beforeElemSetMod<ept id="2">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>onElemSetMod<ept id="3">&lt;/code&gt;</ept> properties. The hash in the property values has an extra nesting level — the <bpt id="4">&lt;strong&gt;</bpt>element name<ept id="4">&lt;/strong&gt;</ept>.<ph id="5">&lt;br /&gt;</ph>The trigger is passed the following as arguments:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu92" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>elem<ept id="1">&lt;/code&gt;</ept> — имя элемента;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>elem<ept id="1">&lt;/code&gt;</ept> — The element name.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu93" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> – имя модификатора;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> – The modifier name.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu94" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> – выставляемое значение модификатора;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> – The value of the modifier being set.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu95" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>prevModVal<ept id="1">&lt;/code&gt;</ept> – предыдущее значение модификатора. Для <bpt id="2">&lt;code&gt;</bpt>beforeSetMod<ept id="2">&lt;/code&gt;</ept> это текущее значение модификатора, которое будет заменено на <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept>, если триггер не вернет <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>prevModVal<ept id="1">&lt;/code&gt;</ept> – The previous modifier value. For <bpt id="2">&lt;code&gt;</bpt>beforeSetMod<ept id="2">&lt;/code&gt;</ept>, this is the current value of the modifier, which will be changed to <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept> if the trigger doesn't return <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu96" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{
    'elem1': {
        'mod1': function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod1 элемента elem 1 в любое значение
        'mod2': {
            'val1': function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 элемента elem1 в значение val1
            'val2': function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку mod2 элемента elem1 в значение val2
            }
        },
    'elem2': function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора элемента elem2 в любое значение
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>{
    'elem1': {
        'mod1': function(elem, modName, modVal, prevModVal) { /* ... */ }, // trigger to set mod1 of elem 1 to any value
        'mod2': {
            'val1': function(elem, modName, modVal, prevModVal) { /* ... */ }, // trigger to set mod2 of elem1 to val1
            'val2': function(elem, modName, modVal, prevModVal) { /* ... */ } // trigger to set mod2 of elem1 to val2
            }
        },
    'elem2': function(elem, modName, modVal, prevModVal) { /* ... */ } // trigger to set any modifier of elem2 to any value
}<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu97" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Сокращенная запись для триггера на установку любого модификатора элемента <bpt id="1">&lt;code&gt;</bpt>elem1<ept id="1">&lt;/code&gt;</ept> в любое значение:</source><target state="translated" xml:lang="en">Shorthand for a trigger to set any modifier of the <bpt id="1">&lt;code&gt;</bpt>elem<ept id="1">&lt;/code&gt;</ept> element to any value:</target><?sid -491770708-2?></trans-unit>
      <trans-unit id="tu98" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod: { 'elem1': function(elem, modName, modVal, prevModVal) { /* ... */ } }
onElemSetMod: { 'elem1': function(elem, modName, modVal, prevModVal) { /* ... */ } }<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod: { 'elem1': function(elem, modName, modVal, prevModVal) { /* ... */ } }
onElemSetMod: { 'elem1': function(elem, modName, modVal, prevModVal) { /* ... */ } }<ept id="1">&lt;/code&gt;</ept></target><?sid -491770708-2?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" resname="i-bem.js---id" restype="x-h1" xml:space="preserve" approved="yes"><source xml:lang="ru">i-bem.js: руководство пользователя</source><target state="translated" xml:lang="en">i-bem.js: User's guide</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu2" resname="i-bem.js-javascript----id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">i-bem.js: JavaScript-фреймворк для БЭМ</source><target state="translated" xml:lang="en">i-bem.js: JavaScript framework for BEM</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu4" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/method/</source><target state="translated" xml:lang="en">https://en.bem.info/method/</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> — специализированный JavaScript-фреймворк для веб-разработки<ph id="2">&lt;br /&gt;</ph>в рамках <bpt id="3">&lt;a href="https://ru.bem.info/method/" [#$tu4]&gt;</bpt>БЭМ-методологии<ept id="3">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> is a specialized JavaScript framework for web development<ph id="2">&lt;br /&gt;</ph>using the <bpt id="3">&lt;a href="https://ru.bem.info/method/" [#$tu4]&gt;</bpt>BEM methodology<ept id="3">&lt;/a&gt;</ept>.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> позволяет:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> makes it possible to:</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">разрабатывать веб-интерфейс в терминах блоков, элементов, модификаторов;</source><target state="translated" xml:lang="en">Develop a web interface in terms of blocks, elements, and modifiers.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">описывать логику работы блока в декларативном стиле — как набор состояний;</source><target state="translated" xml:lang="en">Describe a block's logic in declarative style, as a set of states.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">легко интегрировать JavaScript-код с BEMHTML- или BH-шаблонами и CSS в стиле БЭМ;</source><target state="translated" xml:lang="en">Easily integrate JavaScript code with BEMHTML or BH templates and CSS in BEM style.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">гибко переопределять поведение библиотечных блоков.</source><target state="translated" xml:lang="en">Flexibly redefine the behavior of library blocks.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> не предназначен для замены фреймворка общего назначения, подобного jQuery.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> is not meant to replace the general-purpose framework, like jQuery.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Краткий обзор содержания документа<ept id="1">&lt;/strong&gt;</ept>:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>What this document covers<ept id="1">&lt;/strong&gt;</ept>:</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-common.ru.md"&gt;</bpt>Общие сведения<ept id="1">&lt;/a&gt;</ept> о фреймворке: связь с предметной областью БЭМ, краткое описание модульной структуры<ph id="2">&lt;br /&gt;</ph>фреймворка, шаблонного проекта и инструментов для сборки кода,<ph id="3">&lt;br /&gt;</ph>написанного с использованием <bpt id="4">&lt;code&gt;</bpt>i-bem.js<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-common.ru.md"&gt;</bpt>Overview<ept id="1">&lt;/a&gt;</ept> of the framework: its relationship to the BEM subject domain, and a summary of the framework's modular<ph id="2">&lt;br /&gt;</ph>structure, a template project, and assembly tools written<ph id="3">&lt;br /&gt;</ph>using <bpt id="4">&lt;code&gt;</bpt>i-bem.js<ept id="4">&lt;/code&gt;</ept>.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>Привязка JS-блоков к HTML<ept id="1">&lt;/a&gt;</ept> — разметка JS-блоков в<ph id="2">&lt;br /&gt;</ph>HTML-коде страницы, варианты соотношения HTML-элементов и JS-блоков.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>Binding JS blocks to HTML<ept id="1">&lt;/a&gt;</ept> — Markup for JS blocks in a page's<ph id="2">&lt;br /&gt;</ph>HTML code and the possible relationships of HTML elements to JS blocks.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu14" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>Декларация блока<ept id="1">&lt;/a&gt;</ept> — синтаксис описания JS-блоков.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>Block declaration<ept id="1">&lt;/a&gt;</ept> — Syntax for describing JS blocks.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu15" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>Передача параметров<ept id="1">&lt;/a&gt;</ept> — передача параметров экземпляру блока, получение доступа к параметрам блока из экземпляра.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>Passing parameters<ept id="1">&lt;/a&gt;</ept> — Passing parameters to a block instance and accessing block parameters from an instance.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu16" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-dom.ru.md"&gt;</bpt>Работа с DOM-деревом<ept id="1">&lt;/a&gt;</ept> — API для работы с DOM-узлами блоков:<ph id="2">&lt;br /&gt;</ph>элементы, динамическое изменение DOM-дерева (AJAX), поиск DOM-узлов.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-dom.ru.md"&gt;</bpt>Working with the DOM tree<ept id="1">&lt;/a&gt;</ept> — The API for working with DOM nodes of blocks:<ph id="2">&lt;br /&gt;</ph>elements, dynamic changes to the DOM tree (using AJAX), and searching DOM nodes.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu17" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>Состояния блока<ept id="1">&lt;/a&gt;</ept> — модификаторы, триггеры на смену состояний (установку модификаторов).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>Block states<ept id="1">&lt;/a&gt;</ept> — Modifiers and triggers for state changes (setting modifiers).</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-events.ru.md"&gt;</bpt>События<ept id="1">&lt;/a&gt;</ept> — событийная модель <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept>: DOM- и БЭМ-события, делегирование событий.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-events.ru.md"&gt;</bpt>Events<ept id="1">&lt;/a&gt;</ept> — The <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> event model: DOM and BEM events and event delegation.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>Инициализация<ept id="1">&lt;/a&gt;</ept> — инициализация и удаление экземпляров блоков, отложенная и автоматическая инициализация.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>Initialization<ept id="1">&lt;/a&gt;</ept> — Initializing and deleting block instances; deferred and automatic initialization.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Взаимодействие блоков<ept id="1">&lt;/a&gt;</ept> — обращение из блока к другим блокам, классам блоков.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Interaction of blocks<ept id="1">&lt;/a&gt;</ept> — Calls from a block to other blocks and classes of blocks.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-context.ru.md"&gt;</bpt>Контекст<ept id="1">&lt;/a&gt;</ept> — собственные и статические свойства блока. Статические свойства BEMDOM.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-context.ru.md"&gt;</bpt>Context<ept id="1">&lt;/a&gt;</ept> — Private and static properties of a block. BEMDOM static properties.</target><?sid 2034110759-3?></trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-extras.ru.md"&gt;</bpt>Что дальше?<ept id="1">&lt;/a&gt;</ept> — ссылки на документацию и дополнительные материалы.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="./i-bem-js-extras.ru.md"&gt;</bpt>What next?<ept id="1">&lt;/a&gt;</ept> — Links to documentation and supplemental materials.</target><?sid 2034110759-3?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-context.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="context"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="context"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu2" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Контекст</source><target state="translated" xml:lang="en">Context</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Методы экземпляра блока<ept id="1">&lt;/strong&gt;</ept> исполняются в контексте JS-объекта экземпляра блока. Ключевое слово <bpt id="2">&lt;code&gt;</bpt>this<ept id="2">&lt;/code&gt;</ept> в методах экземпляра блока ссылается на JS-объект <bpt id="3">&lt;strong&gt;</bpt>экземпляра блока<ept id="3">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>A block instance's methods<ept id="1">&lt;/strong&gt;</ept> are executed in the context of the block instance's JS object. The keyword <bpt id="2">&lt;code&gt;</bpt>this<ept id="2">&lt;/code&gt;</ept> in the block instance methods references the JS object of the <bpt id="3">&lt;strong&gt;</bpt>block instance<ept id="3">&lt;/strong&gt;</ept>.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Статические методы<ept id="1">&lt;/strong&gt;</ept> исполняются в контексте JS-объекта, соответствующего классу блока. Ключевое слово <bpt id="2">&lt;code&gt;</bpt>this<ept id="2">&lt;/code&gt;</ept> в статических методах блока ссылается на <bpt id="3">&lt;strong&gt;</bpt>класс блока<ept id="3">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Static methods<ept id="1">&lt;/strong&gt;</ept> are executed in the context of the JS object that corresponds to the block's class. The keyword <bpt id="2">&lt;code&gt;</bpt>this<ept id="2">&lt;/code&gt;</ept> in a block's static methods references the <bpt id="3">&lt;strong&gt;</bpt>block's class<ept id="3">&lt;/strong&gt;</ept>.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> При разработке блоков с использованием <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> внутренним методам блока, не предназначенным для использования извне, принято давать имена, начинающиеся с символа подчеркивания. Например, <bpt id="3">&lt;code&gt;</bpt>_onClick<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> When developing blocks using <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> in internal block methods that are not intended for use outside the block, it is customary to assign names that start with an underscore. For example, <bpt id="3">&lt;code&gt;</bpt>_onClick<ept id="3">&lt;/code&gt;</ept>.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu6" resname="---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Свойства экземпляра блока</source><target state="translated" xml:lang="en">Properties of a block instance</target><?sid 1938445573-4?><alt-trans origin="autoFuzzy" ts="79" match-quality="72" tool="Swordfish">
<source xml:lang="ru">методы экземпляра блока;</source>
<target state="translated" xml:lang="en">block instance methods</target>

<?id 1442562233174?></alt-trans></trans-unit>
      <trans-unit id="tu7" resname="-dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">С DOM-представлением</source><target state="translated" xml:lang="en">With DOM representation</target><?sid 1938445573-4?><alt-trans origin="autoFuzzy" ts="85" match-quality="73" tool="Swordfish">
<source xml:lang="ru">Блоки с DOM-представлением</source>
<target state="translated" xml:lang="en">Blocks with DOM representation</target>

<?id 1442562233295?></alt-trans></trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>params<ept id="1">&lt;/code&gt;</ept> – хэш параметров, переданных экземпляру блока при инициализации.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>params<ept id="1">&lt;/code&gt;</ept> is a hash of parameters passed to the block instance during initialization.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>domElem<ept id="1">&lt;/code&gt;</ept> – объект jQuery, содержащий ссылки на DOM-элементы, к которым <bpt id="2">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>привязан<ept id="2">&lt;/a&gt;</ept> блок.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>domElem<ept id="1">&lt;/code&gt;</ept> is a jQuery object containing references to DOM elements that the block is <bpt id="2">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>bound<ept id="2">&lt;/a&gt;</ept> to.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu10" resname="-dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Без DOM-представления</source><target state="translated" xml:lang="en">Without DOM representation</target><?sid 1938445573-4?><alt-trans origin="autoFuzzy" ts="98" match-quality="75" tool="Swordfish">
<source xml:lang="ru">Блоки без DOM-представления</source>
<target state="translated" xml:lang="en">Blocks without DOM representation</target>

<?id 1442562233796?></alt-trans><alt-trans origin="autoFuzzy" ts="197" match-quality="83" tool="Swordfish">
<source xml:lang="ru">С DOM-представлением</source>
<target state="translated" xml:lang="en">With DOM representation</target>
</alt-trans></trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>params<ept id="1">&lt;/code&gt;</ept> – хэш параметров, переданных экземпляру блока при инициализации.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>params<ept id="1">&lt;/code&gt;</ept> is a hash of parameters passed to the block instance during initialization.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="spec-fields"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="spec-fields"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu13" resname="--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Вспомогательные свойства</source><target state="translated" xml:lang="en">Helper properties</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Экземпляр блока предоставляет набор вспомогательных свойств:</source><target state="translated" xml:lang="en">A block instance provides a set of helper properties:</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu15" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>__self<ept id="1">&lt;/code&gt;</ept> – для доступа к статическим свойствам и методам блока из его экземпляра.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>__self<ept id="1">&lt;/code&gt;</ept> — For access to static properties and methods of the block and its instance.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Вызов статического метода <bpt id="2">&lt;code&gt;</bpt>staticMethod<ept id="2">&lt;/code&gt;</ept> в методе <bpt id="3">&lt;code&gt;</bpt>onEvent<ept id="3">&lt;/code&gt;</ept> экземпляра блока <bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> Calling <bpt id="2">&lt;code&gt;</bpt>staticMethod<ept id="2">&lt;/code&gt;</ept> in the <bpt id="3">&lt;code&gt;</bpt>onEvent<ept id="3">&lt;/code&gt;</ept> method of the <bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept> block instance.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu17" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onEvent : function() {
        this.__self.staticMethod(); // вызов статического метода
        this.doMore();
    }
}, {
    staticMethod : function() { /* ... */ }; // определение статического метода
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onEvent : function() {
        this.__self.staticMethod(); // calling a static method
        this.doMore();
    }
}, {
    staticMethod : function() { /* ... */ }; // defining a static method
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>__base<ept id="1">&lt;/code&gt;</ept> – для вызова реализации одноименного метода из базового класса, от которого наследуется данный (<bpt id="2">&lt;code&gt;</bpt>super call<ept id="2">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>__base<ept id="1">&lt;/code&gt;</ept> – For calling the implementation of the method with the same name from the base class that this one inherits from (<bpt id="2">&lt;code&gt;</bpt>super call<ept id="2">&lt;/code&gt;</ept>).</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> вызов базовой реализации метода <bpt id="2">&lt;code&gt;</bpt>_onClick<ept id="2">&lt;/code&gt;</ept> базового класса <bpt id="3">&lt;code&gt;</bpt>button<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> Calling the base implementation of the <bpt id="2">&lt;code&gt;</bpt>_onClick<ept id="2">&lt;/code&gt;</ept> method of the <bpt id="3">&lt;code&gt;</bpt>button<ept id="3">&lt;/code&gt;</ept> base class.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu20" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl({ block : 'my-button', baseBlock : 'button' }, {
    _onClick : function() {
        this.__base(); // вызываем базовый _onClick
        this.doMore();
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl({ block : 'my-button', baseBlock : 'button' }, {
    _onClick : function() {
        this.__base(); // calling the base _onClick
        this.doMore();
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Вспомогательные свойства предоставляются модулем <bpt id="1">&lt;a href="../../common.blocks/inherit/inherit.ru.md"&gt;</bpt>inherit<ept id="1">&lt;/a&gt;</ept>, реализующим механизм наследования в <bpt id="2">&lt;code&gt;</bpt>bem-core<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Helper properties are provided by the <bpt id="1">&lt;a href="../../common.blocks/inherit/inherit.ru.md"&gt;</bpt>inherit<ept id="1">&lt;/a&gt;</ept> module, which implements the inheritance mechanism in <bpt id="2">&lt;code&gt;</bpt>bem-core<ept id="2">&lt;/code&gt;</ept>.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu22" resname="---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Статические свойства блока</source><target state="translated" xml:lang="en">Static block properties</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu23" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="spec-fields-static"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="spec-fields-static"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu24" resname="--1-id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Вспомогательные свойства</source><target state="translated" xml:lang="en">Helper properties</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu25" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В декларации статических методов блока доступны вспомогательные свойства:</source><target state="translated" xml:lang="en">Helper properties are available in the declaration of a block's static methods:</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu26" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>__base<ept id="1">&lt;/code&gt;</ept> – для вызова реализации одноименного метода из базового класса, от которого наследуется данный (<bpt id="2">&lt;code&gt;</bpt>super call<ept id="2">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>__base<ept id="1">&lt;/code&gt;</ept> – For calling the implementation of the method with the same name from the base class that this one inherits from (<bpt id="2">&lt;code&gt;</bpt>super call<ept id="2">&lt;/code&gt;</ept>).</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu27" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl({ block : 'extra', baseBlock : 'my-block' }, 
    { /* ... */ },
    { 
        staticMethod: function() {
            this.__base();
            this.doMore();
        }
    }
);<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl({ block : 'extra', baseBlock : 'my-block' }, 
    { /* ... */ },
    { 
        staticMethod: function() {
            this.__base();
            this.doMore();
        }
    }
);<ept id="1">&lt;/code&gt;</ept></target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu28" resname="---bemdom-id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Статические свойства модуля BEMDOM</source><target state="translated" xml:lang="en">Static properties of the BEMDOM module</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu29" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>scope<ept id="1">&lt;/code&gt;</ept> – корневой элемент обрабатываемого DOM-дерева. Позволяет выполнять несколько разных версий <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> в одном рантайме. По умолчанию содержит ссылку на jQuery объект <bpt id="3">&lt;code&gt;</bpt>body<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>scope<ept id="1">&lt;/code&gt;</ept> — The root element of the DOM tree being processed. Allows executing several different versios of <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> in the same runtime. By default, contains a reference to the <bpt id="3">&lt;code&gt;</bpt>body<ept id="3">&lt;/code&gt;</ept> jQuery object.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu30" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>doc<ept id="1">&lt;/code&gt;</ept> – ссылка на jQuery объект <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>doc<ept id="1">&lt;/code&gt;</ept> — A reference to the <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept> jQuery object.</target><?sid 1938445573-4?></trans-unit>
      <trans-unit id="tu31" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>win<ept id="1">&lt;/code&gt;</ept> – ссылка на jQuery объект <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>win<ept id="1">&lt;/code&gt;</ept> — A reference to the <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept> jQuery object.</target><?sid 1938445573-4?><alt-trans origin="autoFuzzy" ts="220" match-quality="73" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>doc<ept id="1">&lt;/code&gt;</ept> – ссылка на jQuery объект <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>doc<ept id="1">&lt;/code&gt;</ept> — A reference to the <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept> jQuery object.</target>
</alt-trans></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-init.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="init"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu2" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Инициализация</source><target state="translated" xml:lang="en">Initialization</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Инициализация блока — это создание в памяти браузера JS-объекта,<ph id="1">&lt;br /&gt;</ph>соответствующего экземпляру блока. Инициализация экземпляров блоков выполняется<ph id="2">&lt;br /&gt;</ph>методом <bpt id="3">&lt;code&gt;</bpt>init()<ept id="3">&lt;/code&gt;</ept> модуля <bpt id="4">&lt;code&gt;</bpt>i-bem__dom<ept id="4">&lt;/code&gt;</ept> на заданном фрагменте DOM-дерева.</source><target state="translated" xml:lang="en">Block initialization creates a JS object corresponding to the block instance<ph id="1">&lt;br /&gt;</ph>in the browser memory. Initialization of block instances is performed by the<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>init()<ept id="3">&lt;/code&gt;</ept> method of the <bpt id="4">&lt;code&gt;</bpt>i-bem__dom<ept id="4">&lt;/code&gt;</ept> module on the specified fragment of the DOM tree.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Каждому экземпляру блока можно приписать три состояния:</source><target state="translated" xml:lang="en">Each instance of a block can be assigned three states:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">экземпляр блока не инициализирован (JS-объект не создан);</source><target state="translated" xml:lang="en">The block instance is not initialized (the JS object has not been created).</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">экземпляр блока инициализирован (JS-объект создан в памяти браузера);</source><target state="translated" xml:lang="en">The block instance is initialized (the JS object has been created in the browser memory).</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">экземпляр блока уничтожен (удалены все ссылки на JS-объект экземпляра<ph id="1">&lt;br /&gt;</ph>блока, и он может быть удален сборщиком мусора).</source><target state="translated" xml:lang="en">The block instance was destroyed (all references to the block instance<ph id="1">&lt;br /&gt;</ph>were deleted, and it may be removed by the garbage collector).</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> эти состояния экземпляра блока описываются с помощью служебного<ph id="2">&lt;br /&gt;</ph>модификатора <bpt id="3">&lt;code&gt;</bpt>js<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">In <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept>, these states of the block instance are described using the <ph id="2">&lt;br /&gt;</ph>auxiliary <bpt id="3">&lt;code&gt;</bpt>js<ept id="3">&lt;/code&gt;</ept> modifier.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">До инициализации экземпляр блока не имеет модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Before initialization, the block instance does not have a <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> modifier.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu10" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">В момент инициализации экземпляру блока устанавливается модификатор<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> в значении <bpt id="3">&lt;code&gt;</bpt>inited<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">At the time of the block instance initialization, the <ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> modifier is set to <bpt id="3">&lt;code&gt;</bpt>inited<ept id="3">&lt;/code&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu12" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem my-block_js_inited" data-bem="..."&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem my-block_js_inited" data-bem="..."&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Если в процессе работы удаляется фрагмент DOM-дерева (при помощи метода <bpt id="1">&lt;code&gt;</bpt>destruct<ept id="1">&lt;/code&gt;</ept> модуля <bpt id="2">&lt;code&gt;</bpt>i-bem__dom<ept id="2">&lt;/code&gt;</ept>), то вместе с ним удаляются экземпляры блоков, все HTML-элементы которых находятся в этом фрагменте. Перед удалением экземпляра блока модификатор <bpt id="3">&lt;code&gt;</bpt>js<ept id="3">&lt;/code&gt;</ept> удаляется, чтобы выполнились <bpt id="4">&lt;a href="#destruct"&gt;</bpt>деструкторы экземпляра<ept id="4">&lt;/a&gt;</ept> блока.</source><target state="translated" xml:lang="en">If a fragment of the DOM tree is deleted during workflow (using the <bpt id="1">&lt;code&gt;</bpt>destruct<ept id="1">&lt;/code&gt;</ept> method of the <bpt id="2">&lt;code&gt;</bpt>i-bem__dom<ept id="2">&lt;/code&gt;</ept> module), block instances are also deleted with it if their HTML elements are all located in this fragment. Before deleting a block instance, the <bpt id="3">&lt;code&gt;</bpt>js<ept id="3">&lt;/code&gt;</ept> modifier is deleted so that the block's <bpt id="4">&lt;a href="#destruct"&gt;</bpt>instance destructors<ept id="4">&lt;/a&gt;</ept> are executed.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Если экземпляр блока был <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#distrib-block"&gt;</bpt>привязан к нескольким HTML-элементам<ept id="2">&lt;/a&gt;</ept>, блок будет существовать, пока в HTML-дереве сохраняется хотя бы один элемент, с которым он связан.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> If a block instance was <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#distrib-block"&gt;</bpt>bound to multiple HTML elements<ept id="2">&lt;/a&gt;</ept>, the block will exist as long as at least one element it is connected to remains in the HTML tree.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu15" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если на HTML-элементе размещено несколько экземпляров других блоков, то<ph id="1">&lt;br /&gt;</ph>инициализация одного из них (появление модификатора <bpt id="2">&lt;code&gt;</bpt>js_inited<ept id="2">&lt;/code&gt;</ept>)<ph id="3">&lt;br /&gt;</ph>не влияет на инициализацию остальных.</source><target state="translated" xml:lang="en">If multiple instances of other blocks are located on an HTML element, the <ph id="1">&lt;br /&gt;</ph>initialization of one of them (the appearance of the <bpt id="2">&lt;code&gt;</bpt>js_inited<ept id="2">&lt;/code&gt;</ept> modifier)<ph id="3">&lt;br /&gt;</ph>doesn't affect the initialization of the rest of them.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> На HTML-элементе инициализирован только экземпляр блока <bpt id="2">&lt;code&gt;</bpt>my-block<ept id="2">&lt;/code&gt;</ept>.<ph id="3">&lt;br /&gt;</ph>Экземпляр блока <bpt id="4">&lt;code&gt;</bpt>lazy-block<ept id="4">&lt;/code&gt;</ept> не инициализирован:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example<ept id="1">&lt;/strong&gt;</ept>: Only the <bpt id="2">&lt;code&gt;</bpt>my-block<ept id="2">&lt;/code&gt;</ept> instance is initialized on the HTML element.<ph id="3">&lt;br /&gt;</ph>The <bpt id="4">&lt;code&gt;</bpt>lazy-block<ept id="4">&lt;/code&gt;</ept> instance is not initialized:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu17" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block my-block_js_inited lazy-block i-bem" data-bem='{ "my-block": {}, "lazy-block": {} }' &gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block my-block_js_inited lazy-block i-bem" data-bem='{ "my-block": {}, "lazy-block": {} }' &gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Наличие модификатора <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> позволяет писать разные CSS-стили для<ph id="3">&lt;br /&gt;</ph>блока в зависимости от того, инициализирован он или нет.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> The presence of the <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> modifier makes it possible to write various CSS styles for<ph id="3">&lt;br /&gt;</ph>a block that depend on whether it is initialized or not.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="constructor"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="constructor"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu20" resname="---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Конструктор экземпляра блока</source><target state="translated" xml:lang="en">Block instance constructor</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">На изменение значений модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> можно назначать <bpt id="2">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>триггеры<ept id="2">&lt;/a&gt;</ept> так же, как и для любых других модификаторов блока.</source><target state="translated" xml:lang="en"><bpt id="2">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>Triggers<ept id="2">&lt;/a&gt;</ept> can be assigned for changing the values of the <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> modifier, the same way as for other block modifiers.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Триггер на установку модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> в значение <bpt id="2">&lt;code&gt;</bpt>inited<ept id="2">&lt;/code&gt;</ept> выполняется<ph id="3">&lt;br /&gt;</ph>при создании блока. Этот триггер можно считать <bpt id="4">&lt;strong&gt;</bpt>конструктором экземпляра блока<ept id="4">&lt;/strong&gt;</ept>:</source><target state="translated" xml:lang="en">The trigger to set the <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> modifier to the <bpt id="2">&lt;code&gt;</bpt>inited<ept id="2">&lt;/code&gt;</ept> value is executed<ph id="3">&lt;br /&gt;</ph>during block creation. This trigger can be considered a <bpt id="4">&lt;strong&gt;</bpt>block instance constructor<ept id="4">&lt;/strong&gt;</ept>:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        'inited': function() { /* ... */ } // конструктор экземпляра блока
    }
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        'inited': function() { /* ... */ } // block instance constructor
    }
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="destruct"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="destruct"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu25" resname="---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Деструктор экземпляра блока</source><target state="translated" xml:lang="en">Block instance destructor</target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="79" match-quality="70" tool="Swordfish">
<source xml:lang="ru">методы экземпляра блока;</source>
<target state="translated" xml:lang="en">block instance methods</target>

<?id 1442562241522?></alt-trans><alt-trans origin="autoFuzzy" ts="196" match-quality="70" tool="Swordfish">
<source xml:lang="ru">Свойства экземпляра блока</source>
<target state="translated" xml:lang="en">Properties of a block instance</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="241" match-quality="89" tool="Swordfish">
<source xml:lang="ru">Конструктор экземпляра блока</source>
<target state="translated" xml:lang="en">Block instance constructor</target>
</alt-trans></trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Моментом удаления блока является момент уничтожения всех ссылок на<ph id="1">&lt;br /&gt;</ph>JS-объект блока, после чего он может быть удален из памяти браузера<ph id="2">&lt;br /&gt;</ph>сборщиком мусора.</source><target state="translated" xml:lang="en">The moment of block deletion is the moment when all references to<ph id="1">&lt;br /&gt;</ph>the block's JS object are destroyed. After this, the garbage collector can delete it from<ph id="2">&lt;br /&gt;</ph>browser memory.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Триггер на удаление модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> (установку в пустое значение<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>''<ept id="3">&lt;/code&gt;</ept>) выполняется перед удалением блока. Такой триггер можно считать<ph id="4">&lt;br /&gt;</ph><bpt id="5">&lt;strong&gt;</bpt>деструктором экземпляра блока<ept id="5">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en">The trigger to delete the <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> modifier (set it to an empty value<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>''<ept id="3">&lt;/code&gt;</ept>) is executed before deleting the block. This trigger can be considered a<ph id="4">&lt;br /&gt;</ph><bpt id="5">&lt;strong&gt;</bpt>block instance destructor<ept id="5">&lt;/strong&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu28" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        '': function() { /* ... */ } // деструктор экземпляра блока
    }
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        '': function() { /* ... */ } // block instance destructor
    }
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="244" match-quality="87" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        'inited': function() { /* ... */ } // конструктор экземпляра блока
    }
}<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        'inited': function() { /* ... */ } // block instance constructor
    }
}<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu29" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-wave"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="init-wave"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu30" resname="--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Волны инициализации</source><target state="translated" xml:lang="en">Waves of initialization</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Инициализация экземпляров блоков, присутствующих на странице, не<ph id="1">&lt;br /&gt;</ph>обязательно происходит одновременно. Блоки могут динамически добавляться в ходе<ph id="2">&lt;br /&gt;</ph>работы, инициализироваться по запросу или событию.<ph id="3">&lt;br /&gt;</ph>Инициализация очередной группы блоков называется <bpt id="4">&lt;strong&gt;</bpt>волной инициализации<ept id="4">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en">The instances of blocks that are present on a page do not have<ph id="1">&lt;br /&gt;</ph>to be initialized simultaneously. The blocks can be added dyamically <ph id="2">&lt;br /&gt;</ph>and initialized on request or on an event.<ph id="3">&lt;br /&gt;</ph>Initialization of a consecutive group of blocks is called a <bpt id="4">&lt;strong&gt;</bpt>wave of initialization<ept id="4">&lt;/strong&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu32" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Новая волна инициализации создается в следующих случаях:</source><target state="translated" xml:lang="en">A new wave of initialization is created in the following cases:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu33" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#init-auto"&gt;</bpt>Автоматическая инициализация блоков по событию <bpt id="2">&lt;code&gt;</bpt>domReady<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#init-auto"&gt;</bpt>Automatic initialization of blocks when the <bpt id="2">&lt;code&gt;</bpt>domReady<ept id="2">&lt;/code&gt;</ept> event occurs<ept id="1">&lt;/a&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu34" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#init-live"&gt;</bpt>Инициализация блока по событию<ept id="1">&lt;/a&gt;</ept> (ленивая инициализация);</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#init-live"&gt;</bpt>Initialization of a block when an event occurs<ept id="1">&lt;/a&gt;</ept> (lazy initialization).</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu35" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#init-ajax"&gt;</bpt>Явный вызов инициализации блоков на указанном фрагменте DOM-дерева<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#init-ajax"&gt;</bpt>Directly calling block initialization on a specified fragment of the DOM tree<ept id="1">&lt;/a&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu36" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-auto"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="init-auto"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu37" resname="--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Автоматическая инициализация</source><target state="translated" xml:lang="en">Automatic initialization</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu38" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Фреймворк <bpt id="1">&lt;em&gt;</bpt>i-bem.js<ept id="1">&lt;/em&gt;</ept> позволяет автоматически инициализировать блоки с DOM-представлением в момент наступления DOM-события <bpt id="2">&lt;code&gt;</bpt>domReady<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;em&gt;</bpt>i-bem.js<ept id="1">&lt;/em&gt;</ept> framework allows automatically initializing blocks with DOM representation when the <bpt id="2">&lt;code&gt;</bpt>domReady<ept id="2">&lt;/code&gt;</ept> event occurs.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu40" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source><target state="translated" xml:lang="en">https://en.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu39" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При автоматической инициализации в памяти браузера будут созданы JS-объекты для всех DOM-узлов, содержащих <bpt id="1">&lt;code&gt;</bpt>i-bem<ept id="1">&lt;/code&gt;</ept> в атрибуте <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept>. Инициализация выполняется функцией <bpt id="3">&lt;code&gt;</bpt>init<ept id="3">&lt;/code&gt;</ept> модуля <bpt id="4">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu40]&gt;</bpt>i-bem__dom<ept id="4">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">For automatic initialization, JS objects will be created in browser memory for all the DOM nodes containing <bpt id="1">&lt;code&gt;</bpt>i-bem<ept id="1">&lt;/code&gt;</ept> in the <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> attribute. Initialization is performed by the <bpt id="3">&lt;code&gt;</bpt>init<ept id="3">&lt;/code&gt;</ept> function of the <bpt id="4">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu40]&gt;</bpt>i-bem__dom<ept id="4">&lt;/a&gt;</ept> module.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu41" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Включить автоматическую инициализацию можно, указав блок <bpt id="1">&lt;code&gt;</bpt>i-bem<ept id="1">&lt;/code&gt;</ept> с модификатором <bpt id="2">&lt;code&gt;</bpt>init<ept id="2">&lt;/code&gt;</ept> в значении <bpt id="3">&lt;code&gt;</bpt>auto<ept id="3">&lt;/code&gt;</ept> в файле зависимостей <bpt id="4">&lt;code&gt;</bpt>.deps.js<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">To enable automatic initialization, specify the <bpt id="1">&lt;code&gt;</bpt>i-bem<ept id="1">&lt;/code&gt;</ept> block with the <bpt id="2">&lt;code&gt;</bpt>init<ept id="2">&lt;/code&gt;</ept> modifier set to the <bpt id="3">&lt;code&gt;</bpt>auto<ept id="3">&lt;/code&gt;</ept> value in the <bpt id="4">&lt;code&gt;</bpt>.deps.js<ept id="4">&lt;/code&gt;</ept> dependencies file.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример файла<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>.deps.js<ept id="2">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example of<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>.deps.js<ept id="2">&lt;/code&gt;</ept>:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu43" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>({
    shouldDeps: [
        {
            block: 'i-bem',
            elem: 'dom',
            mods: { 'init': 'auto' }
        }
    ]
})<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>({
    shouldDeps: [
        {
            block: 'i-bem',
            elem: 'dom',
            mods: { 'init': 'auto' }
        }
    ]
})<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu44" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Блок <bpt id="1">&lt;a href="../../common.blocks/page/page.ru.md"&gt;</bpt>page<ept id="1">&lt;/a&gt;</ept> уже содержит в зависимостях <bpt id="2">&lt;code&gt;</bpt>i-bem__dom_init_auto<ept id="2">&lt;/code&gt;</ept>, поэтому если он используется в проекте, не требуется ничего дополнительно подключать.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;a href="../../common.blocks/page/page.ru.md"&gt;</bpt>page<ept id="1">&lt;/a&gt;</ept> block already contains <bpt id="2">&lt;code&gt;</bpt>i-bem__dom_init_auto<ept id="2">&lt;/code&gt;</ept> in dependencies, so if it is used in the project, nothing else needs to be enabled.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu45" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Блоки, для которых задана ленивая инициализация, не будут инициализированы автоматически.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Blocks that have lazy initialization set will not be initialized automatically.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-live"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="init-live"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu47" resname="-----id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Инициализация по событию (ленивая инициализация)</source><target state="translated" xml:lang="en">Initialization on event (lazy initialization)</target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="255" match-quality="84" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#init-live"&gt;</bpt>Инициализация блока по событию<ept id="1">&lt;/a&gt;</ept> (ленивая инициализация);</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#init-live"&gt;</bpt>Initialization of a block on an event<ept id="1">&lt;/a&gt;</ept> (lazy initialization).</target>

<?id 1442576426038?></alt-trans></trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если на странице размещено много экземпляров блоков, автоматическая инициализация<ph id="1">&lt;br /&gt;</ph>всех блоков в момент загрузки страницы нежелательна, так как она<ph id="2">&lt;br /&gt;</ph>увеличивает время загрузки и объем памяти, затрачиваемой браузером.</source><target state="translated" xml:lang="en">If a page has many instances of blocks, automatic initialization of<ph id="1">&lt;br /&gt;</ph>all the blocks at the time of loading is undesirable, since this increases the loading time<ph id="2">&lt;br /&gt;</ph>and the amount of memory consumed by the browser.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Удобнее инициализировать JS-объекты только в тот момент, когда их функциональность потребуется<ph id="1">&lt;br /&gt;</ph>пользователю: например, по клику на блоке. Такая инициализация называется <bpt id="2">&lt;strong&gt;</bpt>ленивой<ept id="2">&lt;/strong&gt;</ept> или <bpt id="3">&lt;strong&gt;</bpt>live-инициализацией<ept id="3">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en">It is more convenient to initialize JS objects only when their functionality is needed by the user,<ph id="1">&lt;br /&gt;</ph>such as when the block is clicked. This is called <bpt id="2">&lt;strong&gt;</bpt>lazy<ept id="2">&lt;/strong&gt;</ept> or <bpt id="3">&lt;strong&gt;</bpt>live<ept id="3">&lt;/strong&gt;</ept> initialization.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu50" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для описания условий ленивой инициализации в декларации зарезервировано статическое свойство <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept>. Свойство <bpt id="2">&lt;code&gt;</bpt>live<ept id="2">&lt;/code&gt;</ept> может иметь значения следующих типов:</source><target state="translated" xml:lang="en">The static property <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept> is reserved in the declaration for describing conditions for lazy initialization. The <bpt id="2">&lt;code&gt;</bpt>live<ept id="2">&lt;/code&gt;</ept> property can have the following types of values:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>Boolean<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>Boolean<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu52" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>true<ept id="1">&lt;/code&gt;</ept> — экземпляры блоков данного класса будут инициализированы только при попытке получить соответствующий экземпляр (см. раздел «<bpt id="2">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Взаимодействие блоков<ept id="2">&lt;/a&gt;</ept>»).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>true<ept id="1">&lt;/code&gt;</ept> — Instances of blocks in this class will be initialized only when attempting to get the corresponding instance (see the section <bpt id="2">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Interaction of blocks<ept id="2">&lt;/a&gt;</ept>).</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu53" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        onSetMod: {
            'js': {
                'inited': function() { /* ... */ } // этот код будет выполняться
                                                   // при первом обращении к экземпляру блока
            }
        }
    },
    { live: true } // статические методы и свойства
));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        onSetMod: {
            'js': {
                'inited': function() { /* ... */ } // this code will be executed
                                                   // the first time the block instance is accessed
            }
        }
    },
    { live: true } // static methods and properties
));

});<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu54" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>false<ept id="1">&lt;/code&gt;</ept> — позволяет отменить ленивую инициализацию блоков, заданную на другом уровне переопределения.</source><target state="needs-review-translation" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>false<ept id="1">&lt;/code&gt;</ept> — Allows cancelling lazy initialization of blocks that is set on another redefinition level.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu55" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>Function<ept id="1">&lt;/code&gt;</ept> – функция, выполняемая перед инициализацией <bpt id="2">&lt;strong&gt;</bpt>первого экземпляра<ept id="2">&lt;/strong&gt;</ept> блока заданного класса. Если функция возвращает значение <bpt id="3">&lt;code&gt;</bpt>false<ept id="3">&lt;/code&gt;</ept>, экземпляры блока будут инициализированы <bpt id="4">&lt;a href="#init-auto"&gt;</bpt>автоматически<ept id="4">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>Function<ept id="1">&lt;/code&gt;</ept> – A function that is executed before initializing the <bpt id="2">&lt;strong&gt;</bpt>first instance<ept id="2">&lt;/strong&gt;</ept> of a block of the specified class. If the function returns <bpt id="3">&lt;code&gt;</bpt>false<ept id="3">&lt;/code&gt;</ept>, instances of the block will be initialized <bpt id="4">&lt;a href="#init-auto"&gt;</bpt>automatically<ept id="4">&lt;/a&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu56" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom', 'ua'], function(provide, BEMDOM, ua) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited' : function() {
                // выполнится при первом обращении к экземпляру блока
            }
        }
    }
}, {
    live : function() { // выполнится перед инициализацией первого экземпляра блока
        if(ua.msie &amp;&amp; ua.version &lt; 9) { 
                          // отмена ленивой инициализации блока 
            return false; // для старых версий Internet Explorer
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom', 'ua'], function(provide, BEMDOM, ua) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited' : function() {
                // executed when the block instance is first accessed
            }
        }
    }
}, {
    live : function() { // executed before initialization of the first instance of the block
        if(ua.msie &amp;&amp; ua.version &lt; 9) { 
                          // disables lazy initialization of the block 
            return false; // for old versions of Internet Explorer
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu57" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Ленивая инициализация может быть отменена для конкретного экземпляра блока. Для этого нужно указать в <bpt id="2">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>параметрах<ept id="2">&lt;/a&gt;</ept> HTML-элемента, к которому привязан экземпляр блока <bpt id="3">&lt;code&gt;</bpt>data-bem='{"live": false}'<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Lazy initialization can be canceled for a specific instance of a block. To do this, specify <bpt id="3">&lt;code&gt;</bpt>data-bem='{"live": false}'<ept id="3">&lt;/code&gt;</ept> in the <bpt id="2">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>parameters<ept id="2">&lt;/a&gt;</ept> of the HTML element that the block instance is bound to.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы инициализировать экземпляры блока по наступлению DOM-события или БЭМ-события, в теле функции следует выполнить подписку на <bpt id="1">&lt;a href="i-bem-js-events.ru.md#delegated-events"&gt;</bpt>делегированные события<ept id="1">&lt;/a&gt;</ept> или воспользоваться <bpt id="2">&lt;a href="#init-live-helpers"&gt;</bpt>хелпером<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">To initialize block instances as DOM events or BEM events occur, subscribe to <bpt id="1">&lt;a href="i-bem-js-events.ru.md#delegated-events"&gt;</bpt>delegated events<ept id="1">&lt;/a&gt;</ept> in the function body or use a <bpt id="2">&lt;a href="#init-live-helpers"&gt;</bpt>helper<ept id="2">&lt;/a&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Экземпляры блока <bpt id="2">&lt;code&gt;</bpt>my-block<ept id="2">&lt;/code&gt;</ept> будут инициализированы по DOM-событию <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> на DOM-узле блока. По каждому DOM-событию <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept> будет вызываться метод экземпляра блока <bpt id="5">&lt;code&gt;</bpt>_onClick<ept id="5">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> Instances of <bpt id="2">&lt;code&gt;</bpt>my-block<ept id="2">&lt;/code&gt;</ept> will be initialized on the <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> DOM event on the block's DOM node. For each <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept> DOM event, the <bpt id="5">&lt;code&gt;</bpt>_onClick<ept id="5">&lt;/code&gt;</ept> method of the block instance is called:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu60" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod: {
        'js': {
            'inited': function() { /* ... */ } // выполняется при первом DOM-событии "click"
        }
    },

    _onClick: function(e) { /* ... */ } // выполняется при каждом DOM-событии "click"
}, {
    live: function() {
        this.liveBindTo('click', function(e) {
            this._onClick(e);   // в момент клика будет создан экземпляр 
                                // блока и вызван его метод _onClick
        });
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod: {
        'js': {
            'inited': function() { /* ... */ } // executed on the first "click" DOM event
        }
    },

    _onClick: function(e) { /* ... */ } // executed on every "click" DOM event
}, {
    live: function() {
        this.liveBindTo('click', function(e) {
            this._onClick(e);   // block instance will be created when a click occurs 
                                // and its _onClick method will be called
        });
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu61" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Свойство <bpt id="2">&lt;code&gt;</bpt>live<ept id="2">&lt;/code&gt;</ept> относится к статическим методам класса блока. Поэтому даже если оно задано в декларации блока с определенным модификатором, <bpt id="3">&lt;code&gt;</bpt>live<ept id="3">&lt;/code&gt;</ept> будет применено ко всем блокам данного класса вне зависимости от модификаторов.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> The <bpt id="2">&lt;code&gt;</bpt>live<ept id="2">&lt;/code&gt;</ept> property applies to static methods of a block's class. So even if it is set in the block declaration with a particular modifier, <bpt id="3">&lt;code&gt;</bpt>live<ept id="3">&lt;/code&gt;</ept> will be applied to all the blocks in this class, regardless of the modifiers.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu62" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-live-helpers"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="init-live-helpers"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu63" resname="-----id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Хелперы для инициализации по событию</source><target state="translated" xml:lang="en">Helpers for initialization on an event</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu64" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для упрощения инициализации по событию в контексте экземпляра блока зарезервирован набор методов-хелперов, позволяющий подписываться на следующие типы событий:</source><target state="translated" xml:lang="en">To simplify initialization on events in the context of a block instance, a set of helper methods is reserved for subscribing to the following types of events:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu65" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">DOM-события:
</source><target state="translated" xml:lang="en">DOM events:
</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu66" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveBindTo([elemName], event, [callback])<ept id="1">&lt;/code&gt;</ept> — подписка с отложенной инициализацией на событие на DOM-узле блока или его элементах. Блок будет инициализирован по первому событию <bpt id="2">&lt;code&gt;</bpt>event<ept id="2">&lt;/code&gt;</ept>. Функция-обработчик <bpt id="3">&lt;code&gt;</bpt>callback<ept id="3">&lt;/code&gt;</ept> будет вызываться по событию <bpt id="4">&lt;code&gt;</bpt>event<ept id="4">&lt;/code&gt;</ept> и после инициализации блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>liveBindTo([elemName], event, [callback])<ept id="1">&lt;/code&gt;</ept> — Subscribes to an event on the block's DOM node or its elements, with deferred initialization. The block will be initialized on the first <bpt id="2">&lt;code&gt;</bpt>event<ept id="2">&lt;/code&gt;</ept>. The <bpt id="3">&lt;code&gt;</bpt>callback<ept id="3">&lt;/code&gt;</ept> handler function will be called on <bpt id="4">&lt;code&gt;</bpt>event<ept id="4">&lt;/code&gt;</ept> and after block initialization.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu67" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveUnbindFrom([elemName], event, [callback])<ept id="1">&lt;/code&gt;</ept> — удаление подписки с отложенной инициализацией на событие на DOM-узле блока или его элементах.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>liveUnbindFrom([elemName], event, [callback])<ept id="1">&lt;/code&gt;</ept> — Deletes the subscription with deferred initialization on an event on the block's DOM node or its elements.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu68" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveInitOnEvent([elemName], event, callback)<ept id="1">&lt;/code&gt;</ept> — инициализация по событию на DOM-узле блока или его элементах.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>liveInitOnEvent([elemName], event, callback)<ept id="1">&lt;/code&gt;</ept> — Initialization on an event on the block's DOM node or its elements.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu69" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">БЭМ-события:
</source><target state="translated" xml:lang="en">BEM events:
</target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="286" match-quality="75" tool="Swordfish">
<source xml:lang="ru">DOM-события:
</source>
<target state="translated" xml:lang="en">DOM events:</target>
</alt-trans></trans-unit>
      <trans-unit id="tu70" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockEvent(event, blockName, callback)<ept id="1">&lt;/code&gt;</ept> — инициализация по БЭМ-событию экземпляра другого блока, размещенного на DOM-узле текущего экземпляра блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockEvent(event, blockName, callback)<ept id="1">&lt;/code&gt;</ept> — Initialization on a BEM event of an instance of a different block placed on the DOM node of the current block instance.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu71" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockInsideEvent(event, blockName, [callback])<ept id="1">&lt;/code&gt;</ept> — инициализация по БЭМ-событию экземпляра другого блока, вложенного в DOM-узел текущего экземпляра блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockInsideEvent(event, blockName, [callback])<ept id="1">&lt;/code&gt;</ept> — Initialization on a BEM event of an instance of a different block nested in the DOM node of the current block instance.</target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="291" match-quality="78" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockEvent(event, blockName, callback)<ept id="1">&lt;/code&gt;</ept> — инициализация по БЭМ-событию экземпляра другого блока, размещенного на DOM-узле текущего экземпляра блока.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockEvent(event, blockName, callback)<ept id="1">&lt;/code&gt;</ept> — Initialization on a BEM event of an instance of a different block placed on the DOM node of the current block instance.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu72" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, блок <bpt id="1">&lt;code&gt;</bpt>menu<ept id="1">&lt;/code&gt;</ept> инициализируется по <bpt id="2">&lt;strong&gt;</bpt>БЭМ-событию<ept id="2">&lt;/strong&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> вложенного в него блока <bpt id="4">&lt;code&gt;</bpt>menu-item<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">For example, the <bpt id="1">&lt;code&gt;</bpt>menu<ept id="1">&lt;/code&gt;</ept> block is initialized on the <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> <bpt id="2">&lt;strong&gt;</bpt>BEM event<ept id="2">&lt;/strong&gt;</ept> of the nested <bpt id="4">&lt;code&gt;</bpt>menu-item<ept id="4">&lt;/code&gt;</ept> block.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu73" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('menu', ['i-bem__dom', 'menu-item'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    _onItemClick : function(e, data) { 
        // функция-обработчик БЭМ-события click на вложенных "menu-item"
    }
}, {
    live : function() {
        this.liveInitOnBlockInsideEvent('click', 'menu-item', function(e, data) {
            this._onItemClick(e, data);
        });
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('menu', ['i-bem__dom', 'menu-item'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    _onItemClick : function(e, data) { 
        // handler function for the "click" BEM event on nested "menu-item" instances
    }
}, {
    live : function() {
        this.liveInitOnBlockInsideEvent('click', 'menu-item', function(e, data) {
            this._onItemClick(e, data);
        });
    }
}));

});<ept id="1">&lt;/code&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu74" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-ajax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="init-ajax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu75" resname="----dom--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Инициализация блоков на фрагменте DOM-дерева</source><target state="translated" xml:lang="en">Initialization of blocks on a fragment of the DOM tree</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu76" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Процедура инициализации JS-объектов может быть вызвана<ph id="1">&lt;br /&gt;</ph>явно для указанного фрагмента DOM-дерева. Часто такая необходимость<ph id="2">&lt;br /&gt;</ph>возникает при разработке AJAX-интерфейсов, когда нужно <bpt id="3">&lt;a href="i-bem-js-dom.ru.md#dynamic"&gt;</bpt>динамически встроить<ept id="3">&lt;/a&gt;</ept> в страницу новые экземпляры блоков либо обновить существующие.</source><target state="translated" xml:lang="en">The initialization of JS objects can be called<ph id="1">&lt;br /&gt;</ph>directly for a specified fragment of the DOM tree. This is often necessary when developing AJAX interfaces,<ph id="2">&lt;br /&gt;</ph>when new instances of blocks have to be <bpt id="3">&lt;a href="i-bem-js-dom.ru.md#dynamic"&gt;</bpt>dynamically added<ept id="3">&lt;/a&gt;</ept> to a page or existing ones have to be updated.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu77" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> следующие функции выполняют динамическую инициализацию блоков:</source><target state="translated" xml:lang="en">In <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept>, the following functions perform dynamic initialization of blocks:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu78" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>init<ept id="1">&lt;/code&gt;</ept>, <bpt id="2">&lt;code&gt;</bpt>destruct<ept id="2">&lt;/code&gt;</ept> – Инициализация/уничтожение блоков на указанном фрагменте DOM-дерева.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>init<ept id="1">&lt;/code&gt;</ept>, <bpt id="2">&lt;code&gt;</bpt>destruct<ept id="2">&lt;/code&gt;</ept> – Initialization/destruction of blocks on a specified fragment of the DOM tree.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu79" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>update<ept id="1">&lt;/code&gt;</ept>, <bpt id="2">&lt;code&gt;</bpt>replace<ept id="2">&lt;/code&gt;</ept>, <bpt id="3">&lt;code&gt;</bpt>append<ept id="3">&lt;/code&gt;</ept>, <bpt id="4">&lt;code&gt;</bpt>prepend<ept id="4">&lt;/code&gt;</ept>, <bpt id="5">&lt;code&gt;</bpt>before<ept id="5">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>after<ept id="6">&lt;/code&gt;</ept> – добавление/замена фрагмента DOM-дерева с одновременной инициализацией блоков на обновленном фрагменте.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>update<ept id="1">&lt;/code&gt;</ept>, <bpt id="2">&lt;code&gt;</bpt>replace<ept id="2">&lt;/code&gt;</ept>, <bpt id="3">&lt;code&gt;</bpt>append<ept id="3">&lt;/code&gt;</ept>, <bpt id="4">&lt;code&gt;</bpt>prepend<ept id="4">&lt;/code&gt;</ept>, <bpt id="5">&lt;code&gt;</bpt>before<ept id="5">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>after<ept id="6">&lt;/code&gt;</ept> – Adding/replacing a fragment of the DOM tree with simultaneous initialization of blocks on the updated fragment.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu80" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Пример использования функций, выполняющих динамическую инициализацию см. в разделе «<bpt id="1">&lt;a href="i-bem-js-dom.ru.md#dynamic"&gt;</bpt>Динамическое обновление блоков и элементов в DOM-дереве<ept id="1">&lt;/a&gt;</ept>»</source><target state="translated" xml:lang="en">For an example of using functions that perform dynamic initialization, see "<bpt id="1">&lt;a href="i-bem-js-dom.ru.md#dynamic"&gt;</bpt>Dynamically updating blocks and elements in the DOM tree<ept id="1">&lt;/a&gt;</ept>".</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu81" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="destruct-dom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="destruct-dom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu82" resname="----dom--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Удаление блоков на фрагменте DOM-дерева</source><target state="translated" xml:lang="en">Deleting blocks on a fragment of the DOM tree</target><?sid 1768204422-5?><alt-trans origin="autoFuzzy" ts="296" match-quality="75" tool="Swordfish">
<source xml:lang="ru">Инициализация блоков на фрагменте DOM-дерева</source>
<target state="translated" xml:lang="en">Initialization of blocks on a fragment of the DOM tree</target>
</alt-trans></trans-unit>
      <trans-unit id="tu83" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Как и процедура инициализации блоков, процедура удаления может быть вызвана явно для заданного фрагмента DOM-дерева. Например, для динамического удаления экземпляров блоков со страницы при разработке AJAX-интерфейсов.</source><target state="translated" xml:lang="en">Like the block initialization process, the deletion process can be called directly for a specified fragment of the DOM tree. For example, you may use this for dynamically deleting instances of blocks from a page when developing AJAX interfaces.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu84" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Явный вызов процедуры гарантирует корректное удаление:</source><target state="translated" xml:lang="en">Explicitly invoking this procedure guarantees correct deletion of:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu85" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">вложенных DOM-узлов;</source><target state="translated" xml:lang="en">nested DOM nodes.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu86" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">блоков, примешанных к другим блокам.</source><target state="translated" xml:lang="en">blocks mixed into other blocks.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu87" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для явного вызова процедуры удаления служит статический метод <bpt id="1">&lt;code&gt;</bpt>BEMDOM.destruct<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Use the <bpt id="1">&lt;code&gt;</bpt>BEMDOM.destruct<ept id="1">&lt;/code&gt;</ept> static method to explicitly invoke deletion.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu88" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Метод принимает:</source><target state="translated" xml:lang="en">The method accepts:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu89" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>ctx<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{jQuery}<ept id="2">&lt;/code&gt;</ept> – корневой DOM-элемент. Удаляется со всем вложенными DOM-узлами.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>ctx<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{jQuery}<ept id="2">&lt;/code&gt;</ept> – The root DOM element. Deleted together with all the nested DOM nodes.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu90" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>excludeSelf<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{Boolean}<ept id="2">&lt;/code&gt;</ept> – не удалять корневой DOM-элемент, если значение <bpt id="3">&lt;code&gt;</bpt>true<ept id="3">&lt;/code&gt;</ept>. По умолчанию <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>excludeSelf<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{Boolean}<ept id="2">&lt;/code&gt;</ept> – Doesn't delete the root DOM element if set to <bpt id="3">&lt;code&gt;</bpt>true<ept id="3">&lt;/code&gt;</ept>. By default, <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu91" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="init-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu92" resname="-----dom--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Инициализация и удаление блоков без DOM-представления</source><target state="translated" xml:lang="en">Initializing and deleting blocks without DOM representation</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu93" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для создания JS-объектов блока без DOM-представления (не привязанного к HTML-элементу) служит метод <bpt id="1">&lt;code&gt;</bpt>BEM.create<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Use the <bpt id="1">&lt;code&gt;</bpt>BEM.create<ept id="1">&lt;/code&gt;</ept> method for creating JS objects of a block without DOM representation (that aren't bound to an HTML element).</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu94" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Метод принимает:</source><target state="translated" xml:lang="en">The method accepts:</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu95" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>name<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|Object}<ept id="2">&lt;/code&gt;</ept> – имя блока;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>name<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|Object}<ept id="2">&lt;/code&gt;</ept> – The name of the block.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu96" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Возвращает экземпляр блока указанного класса.</source><target state="translated" xml:lang="en">Returns an instance of a block of the specified class.</target><?sid 1768204422-5?></trans-unit>
      <trans-unit id="tu97" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Удаление<ept id="1">&lt;/strong&gt;</ept> экземпляров блоков без DOM-представления не может быть<ph id="2">&lt;br /&gt;</ph>выполнено автоматически. Блоки без DOM-представления представляют собой обычные<ph id="3">&lt;br /&gt;</ph>JS-объекты и удаляются в момент удаления всех ссылок на объект блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Deletion<ept id="1">&lt;/strong&gt;</ept> of instances of blocks without DOM representation can't be<ph id="2">&lt;br /&gt;</ph>performed automatically. Blocks without DOM representation are normal JS objects and are deleted when<ph id="3">&lt;br /&gt;</ph>all the references to the block's object are deleted.</target><?sid 1768204422-5?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-states.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="states"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="states"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Состояния блока</source><target state="translated" xml:lang="en">States of a block</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Проектируя динамический блок в стиле БЭМ, нужно представить всю логику<ph id="1">&lt;br /&gt;</ph>изменений, происходящих в нем, как набор <bpt id="2">&lt;strong&gt;</bpt>состояний<ept id="2">&lt;/strong&gt;</ept> блока. Тогда<ph id="3">&lt;br /&gt;</ph>поведение блока определяется <bpt id="4">&lt;strong&gt;</bpt>триггерами<ept id="4">&lt;/strong&gt;</ept> — callback-функциями, которые<ph id="5">&lt;br /&gt;</ph>выполняются при переходе блока из одного состояния в другое.</source><target state="translated" xml:lang="en">When designing a dynamic block in BEM style, you need to provide the complete logic of<ph id="1">&lt;br /&gt;</ph>changes that occur in it as a set of <bpt id="2">&lt;strong&gt;</bpt>states<ept id="2">&lt;/strong&gt;</ept> for the block. Then the block's behavior is determined by <ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;strong&gt;</bpt>triggers<ept id="4">&lt;/strong&gt;</ept> — callback functions that are performed when the block switches <ph id="5">&lt;br /&gt;</ph>from one state to another.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Это позволяет писать код блока в декларативном стиле как набор утверждений вида: <bpt id="1">&lt;code&gt;</bpt>описание состояния<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;code&gt;</bpt>действия, выполняемые при переходе в данное состояние<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">This allows you to write the block's code declaratively as a set of statements in the format: <bpt id="1">&lt;code&gt;</bpt>state description<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;code&gt;</bpt>action performed when switching to this state<ept id="2">&lt;/code&gt;</ept>.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="modifiers"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="modifiers"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu6" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Модификаторы</source><target state="translated" xml:lang="en">Modifiers</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Согласно БЭМ-методологии, состояние блока и его элементов описывается<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;strong&gt;</bpt>модификаторами<ept id="2">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en">According to BEM methodology, <ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;strong&gt;</bpt>modifiers<ept id="2">&lt;/strong&gt;</ept> describe the state of a block and its elements.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Модификатор указывает, в каком из возможных состояний находится блок. Модификатор представляет собой пару: <bpt id="1">&lt;strong&gt;</bpt>имя<ept id="1">&lt;/strong&gt;</ept> и <bpt id="2">&lt;strong&gt;</bpt>значение<ept id="2">&lt;/strong&gt;</ept>. Список допустимых значений модификатора описывает набор состояний блока. Например, для описания размеров блока<ph id="3">&lt;br /&gt;</ph>можно использовать модификатор <bpt id="4">&lt;code&gt;</bpt>size<ept id="4">&lt;/code&gt;</ept> с допустимыми значениями <bpt id="5">&lt;code&gt;</bpt>s<ept id="5">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>m<ept id="6">&lt;/code&gt;</ept> и<ph id="7">&lt;br /&gt;</ph><bpt id="8">&lt;code&gt;</bpt>l<ept id="8">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">A modifier indicates which of the possible states the block is in. A modifier is a <bpt id="1">&lt;strong&gt;</bpt>name<ept id="1">&lt;/strong&gt;</ept> — <bpt id="2">&lt;strong&gt;</bpt>value<ept id="2">&lt;/strong&gt;</ept> pair. The list of acceptable modifier values describes the set of block states. For example, <ph id="3">&lt;br /&gt;</ph>to describe a block's size, you can use the <bpt id="4">&lt;code&gt;</bpt>size<ept id="4">&lt;/code&gt;</ept> modifier with the possible values <bpt id="5">&lt;code&gt;</bpt>s<ept id="5">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>m<ept id="6">&lt;/code&gt;</ept> and <ph id="7">&lt;br /&gt;</ph><bpt id="8">&lt;code&gt;</bpt>l<ept id="8">&lt;/code&gt;</ept>.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Простой модификатор<ept id="1">&lt;/strong&gt;</ept> — частный случай, когда важно только наличие<ph id="2">&lt;br /&gt;</ph>или отсутствие модификатора у блока, а его значение несущественно. Например, модификатор, описывающий состояние «отключен»: <bpt id="3">&lt;code&gt;</bpt>disabled<ept id="3">&lt;/code&gt;</ept>. Модификатор с неуказанным значением <bpt id="4">&lt;code&gt;</bpt>i-bem.js<ept id="4">&lt;/code&gt;</ept> интерпретирует как булев и автоматически присваивает ему значение <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">A <bpt id="1">&lt;strong&gt;</bpt>simple modifier<ept id="1">&lt;/strong&gt;</ept> is a special case when only the presence or absence<ph id="2">&lt;br /&gt;</ph>of the modifier on the block is important, and its value is insignificant. An example is the modifier describing the "disabled" state: <bpt id="3">&lt;code&gt;</bpt>disabled<ept id="3">&lt;/code&gt;</ept>. A modifier with an unspecified <bpt id="4">&lt;code&gt;</bpt>i-bem.js<ept id="4">&lt;/code&gt;</ept> value is interpreted as boolean and automatically assigned the value <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Каждому блоку можно установить один или несколько модификаторов. Блок<ph id="1">&lt;br /&gt;</ph>может не иметь модификаторов. Список допустимых модификаторов и их<ph id="2">&lt;br /&gt;</ph>значений определяет разработчик блока.</source><target state="translated" xml:lang="en">Each block can have one or more modifiers set. A block isn't required to have<ph id="1">&lt;br /&gt;</ph>any modifiers. The block developer defines the list of acceptable modifiers and their<ph id="2">&lt;br /&gt;</ph>values.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Модификаторы устанавливаются при <bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализации экземпляра блока<ept id="1">&lt;/a&gt;</ept> (если модификаторы и их значения указаны в атрибуте <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> соответствующего HTML-элемента).</source><target state="translated" xml:lang="en">Modifiers are set during <bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>initialization of a block instance<ept id="1">&lt;/a&gt;</ept> (if modifiers and their values are specified in the <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> attribute of the corresponding HTML element).</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Модификаторы могут изменяться как в процессе работы блока (например, как реакция на <bpt id="1">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM-события<ept id="1">&lt;/a&gt;</ept> блока), там и по запросу из других блоков (см. раздел <bpt id="2">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Взаимодействие блоков<ept id="2">&lt;/a&gt;</ept>).</source><target state="translated" xml:lang="en">Modifiers can change as part of the block's functioning (for example, as a reaction to a <bpt id="1">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM event<ept id="1">&lt;/a&gt;</ept> of the block), or at the request of other blocks (see <bpt id="2">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Interaction of blocks<ept id="2">&lt;/a&gt;</ept>).</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu13" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При установке, удалении и изменении значений модификаторов, выполняются <bpt id="1">&lt;a href="#mods-api-trigger"&gt;</bpt>триггеры<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">When setting, deleting, and changing modifier values, <bpt id="1">&lt;a href="#mods-api-trigger"&gt;</bpt>triggers<ept id="1">&lt;/a&gt;</ept> are executed.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Если модификаторы были заданы в HTML-элементе блока до момента его инициализации, триггеры на установку данных модификаторов <bpt id="2">&lt;strong&gt;</bpt>не выполняются<ept id="2">&lt;/strong&gt;</ept>. Экземпляр блока в этом случае получает начальное состояние, а не меняет его.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> If modifiers were set in a block's HTML element before its initialization, the triggers to set these modifiers <bpt id="2">&lt;strong&gt;</bpt>are not executed<ept id="2">&lt;/strong&gt;</ept>. In this case, the block instance gets its original state, and doesn't change it.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu15" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="mods-api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="mods-api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu16" resname="--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Управление модификаторами</source><target state="translated" xml:lang="en">Managing modifiers</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Методы экземпляра блока для работы с модификаторами:</source><target state="translated" xml:lang="en">Methods of a block instance for working with modifiers:</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>hasMod([elem], modName, [modVal])<ept id="1">&lt;/code&gt;</ept> – проверяет наличие модификатора. Возвращает <bpt id="2">&lt;code&gt;</bpt>true<ept id="2">&lt;/code&gt;</ept>, если модификатор <bpt id="3">&lt;code&gt;</bpt>modName<ept id="3">&lt;/code&gt;</ept> установлен.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>hasMod([elem], modName, [modVal])<ept id="1">&lt;/code&gt;</ept> – Checks for the presence of a modifier. Returns <bpt id="2">&lt;code&gt;</bpt>true<ept id="2">&lt;/code&gt;</ept> if the <bpt id="3">&lt;code&gt;</bpt>modName<ept id="3">&lt;/code&gt;</ept> modifier is set.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>getMod([elem], modName)<ept id="1">&lt;/code&gt;</ept> – возвращает значение модификатора <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>getMod([elem], modName)<ept id="1">&lt;/code&gt;</ept> – Returns the value of <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>getMods([elem], [...modNames])<ept id="1">&lt;/code&gt;</ept> – возвращает хэш со значениями всех модификаторов. Можно получить значения нескольких модификаторов, передав их имена отдельными аргументами (<bpt id="2">&lt;code&gt;</bpt>[...modNames]<ept id="2">&lt;/code&gt;</ept>). Для получения модификаторов элемента можно указать аргумент <bpt id="3">&lt;code&gt;</bpt>[elem]<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>getMods([elem], [...modNames])<ept id="1">&lt;/code&gt;</ept> – Returns a hash with the values of all modifiers. You can get the values of multiple modifiers by passing their names in separate arguments (<bpt id="2">&lt;code&gt;</bpt>[...modNames]<ept id="2">&lt;/code&gt;</ept>). To get the modifiers of an element, you can specify the <bpt id="3">&lt;code&gt;</bpt>[elem]<ept id="3">&lt;/code&gt;</ept> argument.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>setMod([elem], modName, [modVal=true])<ept id="1">&lt;/code&gt;</ept> – устанавливает модификатор <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>. Если значение <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept> не задано, будет установлен <bpt id="4">&lt;em&gt;</bpt>простой модификатор<ept id="4">&lt;/em&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>setMod([elem], modName, [modVal=true])<ept id="1">&lt;/code&gt;</ept> – Sets the <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept> modifier. If the value of <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept> isn't specified, a <bpt id="4">&lt;em&gt;</bpt>simple modifier<ept id="4">&lt;/em&gt;</ept> will be set.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>toggleMod([elem], modName, modVal1, [modVal2], [condition])<ept id="1">&lt;/code&gt;</ept> – переключает значения модификатора. Если передан аргумент <bpt id="2">&lt;code&gt;</bpt>[modVal2]<ept id="2">&lt;/code&gt;</ept>, переключение происходит между <bpt id="3">&lt;code&gt;</bpt>modVal1<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>modVal2<ept id="4">&lt;/code&gt;</ept>, если нет, <bpt id="5">&lt;code&gt;</bpt>modVal1<ept id="5">&lt;/code&gt;</ept> будет поочередно устанавливаться и удаляться. Аргумент <bpt id="6">&lt;code&gt;</bpt>condition<ept id="6">&lt;/code&gt;</ept> в значении <bpt id="7">&lt;code&gt;</bpt>true<ept id="7">&lt;/code&gt;</ept> позволяет инвертировать порядок переключения значений модификатора.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>toggleMod([elem], modName, modVal1, [modVal2], [condition])<ept id="1">&lt;/code&gt;</ept> – Toggles a modifier's value. If the <bpt id="2">&lt;code&gt;</bpt>[modVal2]<ept id="2">&lt;/code&gt;</ept> argument is passed, it switches between <bpt id="3">&lt;code&gt;</bpt>modVal1<ept id="3">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>modVal2<ept id="4">&lt;/code&gt;</ept>. If not, <bpt id="5">&lt;code&gt;</bpt>modVal1<ept id="5">&lt;/code&gt;</ept> will be set and removed in turn. The <bpt id="6">&lt;code&gt;</bpt>condition<ept id="6">&lt;/code&gt;</ept> argument with the <bpt id="7">&lt;code&gt;</bpt>true<ept id="7">&lt;/code&gt;</ept> value allows inverting the order for toggling modifier values.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu23" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>delMod([elem], modName)<ept id="1">&lt;/code&gt;</ept> – удаляет модификатор <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>delMod([elem], modName)<ept id="1">&lt;/code&gt;</ept> – Deletes <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Метод <bpt id="2">&lt;code&gt;</bpt>changeColor<ept id="2">&lt;/code&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>square<ept id="3">&lt;/code&gt;</ept> переключает модификатор <bpt id="4">&lt;code&gt;</bpt>color<ept id="4">&lt;/code&gt;</ept> между значениями <bpt id="5">&lt;code&gt;</bpt>green<ept id="5">&lt;/code&gt;</ept> и <bpt id="6">&lt;code&gt;</bpt>red<ept id="6">&lt;/code&gt;</ept>, если у блока выставлен модификатор <bpt id="7">&lt;code&gt;</bpt>has-color<ept id="7">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> The <bpt id="2">&lt;code&gt;</bpt>changeColor<ept id="2">&lt;/code&gt;</ept> method of the <bpt id="3">&lt;code&gt;</bpt>square<ept id="3">&lt;/code&gt;</ept> block toggles the <bpt id="4">&lt;code&gt;</bpt>color<ept id="4">&lt;/code&gt;</ept> modifier between the values <bpt id="5">&lt;code&gt;</bpt>green<ept id="5">&lt;/code&gt;</ept> and <bpt id="6">&lt;code&gt;</bpt>red<ept id="6">&lt;/code&gt;</ept>, if the block has the <bpt id="7">&lt;code&gt;</bpt>has-color<ept id="7">&lt;/code&gt;</ept> modifier set:</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu25" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('square', {
    changeColor : function(e) {
        if(this.hasMod('has-color')) {
            this.toggleMod('color', 'green', 'red');
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('square', {
    changeColor : function(e) {
        if(this.hasMod('has-color')) {
            this.toggleMod('color', 'green', 'red');
        }
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Эти же методы позволяют управлять модификаторами элементов блока. Для этого первым аргументом передается ссылка на <bpt id="1">&lt;strong&gt;</bpt>DOM-узел элемента<ept id="1">&lt;/strong&gt;</ept> (а не имя элемента).</source><target state="translated" xml:lang="en">The same methods allow managing modifiers of the block elements. To do this, a reference to the <bpt id="1">&lt;strong&gt;</bpt>element's DOM node<ept id="1">&lt;/strong&gt;</ept> (not the element name) is passed as the first argument.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Блок <bpt id="2">&lt;code&gt;</bpt>searchbox<ept id="2">&lt;/code&gt;</ept> по клику может выставлять своему элементу <bpt id="3">&lt;code&gt;</bpt>input<ept id="3">&lt;/code&gt;</ept> простой модификатор <bpt id="4">&lt;code&gt;</bpt>clean<ept id="4">&lt;/code&gt;</ept> (подразумеваемое значение — <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>):</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> On a click, the <bpt id="2">&lt;code&gt;</bpt>searchbox<ept id="2">&lt;/code&gt;</ept> block can assign its <bpt id="3">&lt;code&gt;</bpt>input<ept id="3">&lt;/code&gt;</ept> element the simple modifier <bpt id="4">&lt;code&gt;</bpt>clean<ept id="4">&lt;/code&gt;</ept> (the assumed value is <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>):</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu28" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('searchbox', {
    _onClick: function() {
        this.setMod(this.elem('input'), 'clean');
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('searchbox', {
    _onClick: function() {
        this.setMod(this.elem('input'), 'clean');
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu29" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Для изменения значений модификаторов используйте API. Не следует устанавливать модификаторы, самостоятельно изменяя CSS-классы соответствующего DOM-узла.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Use the API for changing the values of modifiers. Don't set modifiers by altering the CSS classes of the corresponding DOM node yourself.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu31" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source><target state="translated" xml:lang="en">https://en.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Полное описание API для управления модификаторами приведено в разделе <bpt id="1">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu31]&gt;</bpt>JSDoc<ept id="1">&lt;/a&gt;</ept> блока <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">For complete documentation of the API for managing modifiers, see the <bpt id="1">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu31]&gt;</bpt>JSDoc<ept id="1">&lt;/a&gt;</ept> section in the <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept> block.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu32" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="mods-api-trigger"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="mods-api-trigger"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu33" resname="----id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Триггеры на установку модификаторов</source><target state="translated" xml:lang="en">Triggers to set modifiers</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu34" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Выполнение триггеров на установку модификаторов разбито на две фазы:</source><target state="translated" xml:lang="en">Triggers to set modifiers are executed in two phases:</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu35" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>До установки модификатора<ept id="1">&lt;/strong&gt;</ept>. Эта фаза зарезервирована для<ph id="2">&lt;br /&gt;</ph>возможности <bpt id="3">&lt;strong&gt;</bpt>отменить<ept id="3">&lt;/strong&gt;</ept> установку модификатора. Если хотя бы один<ph id="4">&lt;br /&gt;</ph>из триггеров, выполняемых в этой фазе, вернет <bpt id="5">&lt;code&gt;</bpt>false<ept id="5">&lt;/code&gt;</ept>,<ph id="6">&lt;br /&gt;</ph>установки модификатора не произойдет.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Before setting the modifier<ept id="1">&lt;/strong&gt;</ept>. This phase is reserved for the ability to<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;strong&gt;</bpt>cancel<ept id="3">&lt;/strong&gt;</ept> setting modifiers. If at least one of the triggers executed in this phase returns<ph id="4">&lt;br /&gt;</ph><bpt id="5">&lt;code&gt;</bpt>false<ept id="5">&lt;/code&gt;</ept>, modifiers are not set.<ph id="6">&lt;br /&gt;</ph></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu36" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>После установки модификатора<ept id="1">&lt;/strong&gt;</ept>. Триггеры, выполняемые в этой<ph id="2">&lt;br /&gt;</ph>фазе, уже не могут отменить установку модификаторов.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>After setting the modifier<ept id="1">&lt;/strong&gt;</ept>. Triggers executed in this phase<ph id="2">&lt;br /&gt;</ph>can't cancel setting modifiers.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu37" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Триггеры могут быть привязаны к следующим типам изменений значений модификаторов:</source><target state="translated" xml:lang="en">Triggers can be bound to the following types of changes to modifier values:</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu38" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">установка <bpt id="1">&lt;em&gt;</bpt>любого<ept id="1">&lt;/em&gt;</ept> модификатора в <bpt id="2">&lt;em&gt;</bpt>любое<ept id="2">&lt;/em&gt;</ept> значение;</source><target state="translated" xml:lang="en">Setting <bpt id="1">&lt;em&gt;</bpt>any<ept id="1">&lt;/em&gt;</ept> modifier to <bpt id="2">&lt;em&gt;</bpt>any<ept id="2">&lt;/em&gt;</ept> value.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu39" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">установка <bpt id="1">&lt;em&gt;</bpt>конкретного<ept id="1">&lt;/em&gt;</ept> модификатора <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept> в <bpt id="3">&lt;em&gt;</bpt>любое<ept id="3">&lt;/em&gt;</ept> значение (в том числе<ph id="4">&lt;br /&gt;</ph>установка простого модификатора в значение <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>);</source><target state="translated" xml:lang="en">Setting a <bpt id="1">&lt;em&gt;</bpt>specific<ept id="1">&lt;/em&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept> modifier to <bpt id="3">&lt;em&gt;</bpt>any<ept id="3">&lt;/em&gt;</ept> value (including<ph id="4">&lt;br /&gt;</ph>setting a simple modifier to <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>).</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu40" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">установка <bpt id="1">&lt;em&gt;</bpt>конкретного<ept id="1">&lt;/em&gt;</ept> модификатора <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept> в <bpt id="3">&lt;em&gt;</bpt>конкретное<ept id="3">&lt;/em&gt;</ept> значение <bpt id="4">&lt;code&gt;</bpt>modVal<ept id="4">&lt;/code&gt;</ept>;</source><target state="translated" xml:lang="en">Setting a <bpt id="1">&lt;em&gt;</bpt>specific<ept id="1">&lt;/em&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept> modifier to a <bpt id="3">&lt;em&gt;</bpt>specific<ept id="3">&lt;/em&gt;</ept> <bpt id="4">&lt;code&gt;</bpt>modVal<ept id="4">&lt;/code&gt;</ept> value.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu41" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">установка модификатора в значение <bpt id="1">&lt;code&gt;</bpt>''<ept id="1">&lt;/code&gt;</ept> (пустая строка), что<ph id="2">&lt;br /&gt;</ph>эквивалентно удалению модификатора или установке простого<ph id="3">&lt;br /&gt;</ph>модификатора в значение <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Setting a modifier to the value <bpt id="1">&lt;code&gt;</bpt>''<ept id="1">&lt;/code&gt;</ept> (empty string), which is<ph id="2">&lt;br /&gt;</ph>equivalent to deleting the modifier or setting a simple modifier<ph id="3">&lt;br /&gt;</ph>to <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При установке модификатора <bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> в значение <bpt id="2">&lt;code&gt;</bpt>modVal<ept id="2">&lt;/code&gt;</ept> триггеры<ph id="3">&lt;br /&gt;</ph>каждой фазы (если они определены) вызываются в том порядке, в котором они<ph id="4">&lt;br /&gt;</ph>перечислены в приведенном выше списке событий (от общего к частному).</source><target state="translated" xml:lang="en">When setting the <bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> modifier to the <bpt id="2">&lt;code&gt;</bpt>modVal<ept id="2">&lt;/code&gt;</ept> value, triggers in<ph id="3">&lt;br /&gt;</ph>each phase (if they are defined) are fired in the same order as they are<ph id="4">&lt;br /&gt;</ph>listed in the list of events above (from general to specific).</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Таким образом, при определении триггера пользователь указывает:</source><target state="translated" xml:lang="en">Thus, when defining a trigger, the user specifies:</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu44" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">фазу выполнения (до или после установки модификатора);</source><target state="translated" xml:lang="en">The execution phase (before or after setting a modifier).</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu45" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">тип события (имя и устанавливаемое значение модификатора).</source><target state="translated" xml:lang="en">The event type (the modifier name and value to set).</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="mods-api-trigger-phase"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="mods-api-trigger-phase"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu47" resname="--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Фазы выполнения</source><target state="translated" xml:lang="en">Execution phases</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Дополнительная фаза, предшествующая установке модификатора, позволяет<ph id="1">&lt;br /&gt;</ph>произвести некоторые проверки без риска повлиять на логику, связанную с установкой модификатора. Например, если существуют взаимоисключающие модификаторы, перед установкой одного из них логично проверить, не установлен ли другой.</source><target state="translated" xml:lang="en">An additional phase prior to setting a modifier allows performing<ph id="1">&lt;br /&gt;</ph>certain checks without risk of affecting the logic for setting the modifier. For example, if there are mutually exclusive modifiers, it makes sense before setting one of them to check whether the other is already set.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример<ept id="1">&lt;/strong&gt;</ept>: модификатор <bpt id="2">&lt;code&gt;</bpt>focused<ept id="2">&lt;/code&gt;</ept> не будет установлен блоку <bpt id="3">&lt;code&gt;</bpt>searchbox<ept id="3">&lt;/code&gt;</ept>, если у него есть модификатор <bpt id="4">&lt;code&gt;</bpt>disabled<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example<ept id="1">&lt;/strong&gt;</ept>: The <bpt id="2">&lt;code&gt;</bpt>focused<ept id="2">&lt;/code&gt;</ept> modifier won't be set on the <bpt id="3">&lt;code&gt;</bpt>searchbox<ept id="3">&lt;/code&gt;</ept> block if it has the <bpt id="4">&lt;code&gt;</bpt>disabled<ept id="4">&lt;/code&gt;</ept> modifier.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu50" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('searchbox', {
    beforeSetMod : {
        'focused' : {
            'true' : function() {
                return !this.hasMod('disabled');
            }
        }
    },

    onSetMod : {
        'focused' : {
            'true' : function() { /* ... */ }
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('searchbox', {
    beforeSetMod : {
        'focused' : {
            'true' : function() {
                return !this.hasMod('disabled');
            }
        }
    },

    onSetMod : {
        'focused' : {
            'true' : function() { /* ... */ }
        }
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если триггер для фазы, предшествующей установке (<bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept>), возвращает <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>, установка модификатора не производится.</source><target state="translated" xml:lang="en">If the trigger for the phase prior to setting (<bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept>) returns <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>, the modifier is not set.</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Подробнее об использовании триггеров читайте в разделе «<bpt id="1">&lt;a href="i-bem-js-decl.ru.md#trigger-decl"&gt;</bpt>Декларация триггеров<ept id="1">&lt;/a&gt;</ept>».</source><target state="translated" xml:lang="en">For more information about using triggers, see "<bpt id="1">&lt;a href="i-bem-js-decl.ru.md#trigger-decl"&gt;</bpt>Declaring triggers<ept id="1">&lt;/a&gt;</ept>".</target><?sid -728212460-6?></trans-unit>
      <trans-unit id="tu53" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Триггер на установку модификатора <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> в значение <bpt id="3">&lt;code&gt;</bpt>inited<ept id="3">&lt;/code&gt;</ept> является конструктором экземпляра блока, а в значение <bpt id="4">&lt;code&gt;</bpt>''<ept id="4">&lt;/code&gt;</ept> – деструктором экземпляра блока. Подробности смотрите в разделе «<bpt id="5">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>Инициализация<ept id="5">&lt;/a&gt;</ept>».</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> The trigger to set the <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> modifier to <bpt id="3">&lt;code&gt;</bpt>inited<ept id="3">&lt;/code&gt;</ept> is a constructor of a block instance, but with the value <bpt id="4">&lt;code&gt;</bpt>''<ept id="4">&lt;/code&gt;</ept> it is a destructor of a block instance. For more information, see "<bpt id="5">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>Initialization<ept id="5">&lt;/a&gt;</ept>".</target><?sid -728212460-6?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-extras.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="docs"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="docs"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Что дальше?</source><target state="translated" xml:lang="en">What next?</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu4" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/</source><target state="translated" xml:lang="en">https://en.bem.info/</target><?sid 521594131-7?><alt-trans origin="autoFuzzy" ts="171" match-quality="74" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/method/</source>
<target state="translated" xml:lang="en">https://en.bem.info/method/</target>

<?id 1442562259851?></alt-trans></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Информацию о БЭМ-методологии, инструментарии и новостях в мире БЭМ смотрите на сайте <bpt id="1">&lt;a href="https://ru.bem.info/" [#$tu4]&gt;</bpt>bem.info<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">For information about the BEM methodology, tools, and news in the BEM world, visit the website <bpt id="1">&lt;a href="https://ru.bem.info/" [#$tu4]&gt;</bpt>bem.info<ept id="1">&lt;/a&gt;</ept>.</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu6" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source><target state="translated" xml:lang="en">https://en.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Полную информацию обо всех методах API <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> можно найти в разделе <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu6]&gt;</bpt>JSDoc<ept id="2">&lt;/a&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>i-bem<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">For complete information about all the <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> API methods, see the section <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu6]&gt;</bpt>JSDoc<ept id="2">&lt;/a&gt;</ept> for the <bpt id="3">&lt;code&gt;</bpt>i-bem<ept id="3">&lt;/code&gt;</ept> block.</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu8" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/forum/</source><target state="translated" xml:lang="en">https://en.bem.info/forum/</target><?sid 521594131-7?><alt-trans origin="autoFuzzy" ts="171" match-quality="79" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/method/</source>
<target state="translated" xml:lang="en">https://en.bem.info/method/</target>

<?id 1442562260337?></alt-trans><alt-trans origin="autoFuzzy" ts="374" match-quality="76" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/</source>
<target state="translated" xml:lang="en">https://en.bem.info/</target>
</alt-trans></trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Обменяться опытом и задать вопрос опытным пользователям и разработчикам <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> можно на <bpt id="2">&lt;a href="https://ru.bem.info/forum/" [#$tu8]&gt;</bpt>форуме<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">To share your experience with BEM or submit questions for experienced users and <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> developers, visit the <bpt id="2">&lt;a href="https://ru.bem.info/forum/" [#$tu8]&gt;</bpt>forum<ept id="2">&lt;/a&gt;</ept>.</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Примеры использования <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> и дополнительную информацию смотрите в статьях:</source><target state="translated" xml:lang="en">For <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> usage examples and additional information, see these articles:</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu11" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/articles/bem-js-main-terms/</source><target state="translated" xml:lang="en">https://en.bem.info/articles/bem-js-main-terms/</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu10" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/articles/bem-js-main-terms/" [#$tu11]&gt;</bpt>JavaScript по БЭМ: основные понятия<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="https://ru.bem.info/articles/bem-js-main-terms/" [#$tu11]&gt;</bpt>JavaScript for BEM: main terms<ept id="1">&lt;/a&gt;</ept></target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu13" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/tutorials/bem-js-tutorial/</source><target state="translated" xml:lang="en">https://en.bem.info/tutorials/bem-js-tutorial/</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tutorials/bem-js-tutorial/" [#$tu13]&gt;</bpt>Справочное руководство по i-bem.js<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="https://ru.bem.info/tutorials/bem-js-tutorial/" [#$tu13]&gt;</bpt>i-bem.js tutorial<ept id="1">&lt;/a&gt;</ept></target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu15" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/tutorials/start-with-project-stub/</source><target state="translated" xml:lang="en">https://en.bem.info/tutorials/start-with-project-stub/</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu14" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tutorials/start-with-project-stub/" [#$tu15]&gt;</bpt>Создаем свой проект на БЭМ<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="https://ru.bem.info/tutorials/start-with-project-stub/" [#$tu15]&gt;</bpt>Starting your own BEM project<ept id="1">&lt;/a&gt;</ept></target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu17" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/articles/firm-card-story/</source><target state="translated" xml:lang="en">https://en.bem.info/articles/firm-card-story/</target><?sid 521594131-7?></trans-unit>
      <trans-unit id="tu16" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/articles/firm-card-story/" [#$tu17]&gt;</bpt>БЭМ-приложение на Leaflet и API 2GIS<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="https://ru.bem.info/articles/firm-card-story/" [#$tu17]&gt;</bpt>Creating BEM application on Leaflet and 2GIS API<ept id="1">&lt;/a&gt;</ept></target><?sid 521594131-7?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-interact.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="ibc"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="ibc"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Взаимодействие блоков</source><target state="translated" xml:lang="en">Interaction of blocks</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В рамках БЭМ-методологии блоки следует разрабатывать так, чтобы свести к минимуму зависимость состояний одних блоков от других. Однако на практике идеал полной независимости блоков недостижим.</source><target state="translated" xml:lang="en">In the scope of the BEM methodology, blocks should be developed in a way that minimizes their dependency on each others' states. However, the ideal of fully independent blocks is not achievable in practice.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Взаимодействие блоков может быть реализовано:</source><target state="translated" xml:lang="en">Block interaction can be implemented in the following ways:</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">с помощью подписки на <bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events"&gt;</bpt>БЭМ-события<ept id="1">&lt;/a&gt;</ept> других экземпляров<ph id="2">&lt;br /&gt;</ph>блоков или подписки на <bpt id="3">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>делегированные БЭМ-события<ept id="3">&lt;/a&gt;</ept>;</source><target state="translated" xml:lang="en">By subscribing to <bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events"&gt;</bpt>BEM events<ept id="1">&lt;/a&gt;</ept> on other block instances<ph id="2">&lt;br /&gt;</ph> or subscribing to <bpt id="3">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>delegated BEM events<ept id="3">&lt;/a&gt;</ept>.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">с помощью непосредственного вызова методов других экземпляров<ph id="1">&lt;br /&gt;</ph>блоков или статических методов класса другого блока;</source><target state="translated" xml:lang="en">By directly calling methods of other block instances<ph id="1">&lt;br /&gt;</ph> or static methods of another block's class.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">через проверку состояний одного блока из другого;</source><target state="translated" xml:lang="en">By checking the states of one of the blocks.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">через <bpt id="1">&lt;em&gt;</bpt>каналы событий<ept id="1">&lt;/em&gt;</ept> (например с помощью элемента <bpt id="2">&lt;a href="../../common.blocks/events/__channels/events__channels.ru.md"&gt;</bpt>channels<ept id="2">&lt;/a&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>events<ept id="3">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en">Through <bpt id="1">&lt;em&gt;</bpt>event channels<ept id="1">&lt;/em&gt;</ept> (for example, using the <bpt id="2">&lt;a href="../../common.blocks/events/__channels/events__channels.ru.md"&gt;</bpt>channels<ept id="2">&lt;/a&gt;</ept> element in the <bpt id="3">&lt;code&gt;</bpt>events<ept id="3">&lt;/code&gt;</ept> block).</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Не используйте <bpt id="2">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM-события<ept id="2">&lt;/a&gt;</ept> для<ph id="3">&lt;br /&gt;</ph>организации взаимодействия между блоками. DOM-события предназначены<ph id="4">&lt;br /&gt;</ph>только для реализации внутренних процедур блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Don't use <bpt id="2">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM events<ept id="2">&lt;/a&gt;</ept> for<ph id="3">&lt;br /&gt;</ph>arranging interaction between blocks. DOM events are intended<ph id="4">&lt;br /&gt;</ph>only for implementing internal procedures of a block.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для реализации взаимодействия блоков <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> предоставляет API:</source><target state="translated" xml:lang="en">The following <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> APIs are provided for implementing interaction between blocks:</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-dom.ru.md#api-find"&gt;</bpt>Поиск экземпляров блоков в DOM-дереве<ept id="1">&lt;/a&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-dom.ru.md#api-find"&gt;</bpt>Searching for block instances in the DOM tree<ept id="1">&lt;/a&gt;</ept>.</target><?sid -1699806432-8?><alt-trans origin="autoFuzzy" ts="39" match-quality="96" tool="Swordfish">
<source xml:lang="ru">Поиск экземпляров блоков в DOM-дереве</source>
<target state="translated" xml:lang="en">Searching for block instances in the DOM tree</target>

<?id 1442496384920?></alt-trans></trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-html-binding.ru.md#api-nodom"&gt;</bpt>Доступ к экземплярам блоков без DOM-представления<ept id="1">&lt;/a&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-html-binding.ru.md#api-nodom"&gt;</bpt>Access to block instances without DOM representation<ept id="1">&lt;/a&gt;</ept>.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#api-calss"&gt;</bpt>Доступ к классам блоков<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#api-calss"&gt;</bpt>Access to block classes<ept id="1">&lt;/a&gt;</ept>.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api-class"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="api-class"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu15" resname="----id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Доступ к классам блоков</source><target state="translated" xml:lang="en">Access to block classes.</target><?sid -1699806432-8?><alt-trans origin="autoFuzzy" ts="401" match-quality="94" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#api-calss"&gt;</bpt>Доступ к классам блоков<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#api-calss"&gt;</bpt>Access to block classes<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu17" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">JS-компоненты, соответствующие классам блоков, можно получить через <bpt id="1">&lt;a href="https://github.com/ymaps/modules" [#$tu17]&gt;</bpt>модульную систему<ept id="1">&lt;/a&gt;</ept>. Это же верно и для блоков <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#i-blocks"&gt;</bpt>без DOM-представления<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">You can get JS components corresponding to block classes via the <bpt id="1">&lt;a href="https://github.com/ymaps/modules" [#$tu17]&gt;</bpt>module system<ept id="1">&lt;/a&gt;</ept>. This is also true for blocks <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#i-blocks"&gt;</bpt>without DOM representation<ept id="2">&lt;/a&gt;</ept>.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Доступ к классам блоков необходим для:</source><target state="translated" xml:lang="en">Access to block classes is needed for:</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Делегирования БЭМ-событий<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Delegating BEM events<ept id="1">&lt;/a&gt;</ept>.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-decl.ru.md#inher-over"&gt;</bpt>Доопределения<ept id="1">&lt;/a&gt;</ept> декларации блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-decl.ru.md#inher-over"&gt;</bpt>Redefining<ept id="1">&lt;/a&gt;</ept> a block declaration.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Вызова статических методов класса.</source><target state="translated" xml:lang="en">Calling static methods of a class.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Вызов статического метода <bpt id="2">&lt;code&gt;</bpt>close<ept id="2">&lt;/code&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>popup<ept id="3">&lt;/code&gt;</ept> позволяет закрыть все попапы на странице:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> Calling the <bpt id="2">&lt;code&gt;</bpt>close<ept id="2">&lt;/code&gt;</ept> static method for the <bpt id="3">&lt;code&gt;</bpt>popup<ept id="3">&lt;/code&gt;</ept> block will close all popups on the page.</target><?sid -1699806432-8?></trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('switcher', ['i-bem__dom', 'popup'], function(provide, BEMDOM, Popup) {

provide(BEMDOM.decl(this.name,
    {
        onSetMod : {
            'popup' : {
                'disabled' : function() {
                    Popup.close();
                }
            }
        }
    }
));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('switcher', ['i-bem__dom', 'popup'], function(provide, BEMDOM, Popup) {

provide(BEMDOM.decl(this.name,
    {
        onSetMod : {
            'popup' : {
                'disabled' : function() {
                    Popup.close();
                }
            }
        }
    }
));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -1699806432-8?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-html-binding.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="html"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu2" resname="-js---html-id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Привязка JS-блоков к HTML</source><target state="translated" xml:lang="en">Binding JS blocks to HTML</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">JavaScript-компоненты в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> служат для «оживления» HTML-элементов<ph id="2">&lt;br /&gt;</ph>страницы. Типовая задача JS-блока — установка реакции на события внутри HTML-фрагмента.</source><target state="translated" xml:lang="en">JavaScript components in <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> are used for bringing a page's HTML elements<ph id="2">&lt;br /&gt;</ph>to life. The typical task of a JS block is to set reactions to events inside an HTML fragment.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> первичным «каркасом» является HTML-дерево документа. В нем размечаются точки, к которым привязаны интерактивные элементы интерфейса — JS-блоки.<ph id="2">&lt;br /&gt;</ph>Точка привязки JS-блока — HTML-элемент (DOM-узел), в атрибуте <bpt id="3">&lt;code&gt;</bpt>class<ept id="3">&lt;/code&gt;</ept> которого<ph id="4">&lt;br /&gt;</ph>указано имя блока, а в атрибуте <bpt id="5">&lt;code&gt;</bpt>data-bem<ept id="5">&lt;/code&gt;</ept> — <bpt id="6">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>параметры блока<ept id="6">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">In <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept>, the primary "framework" is the document's HTML tree. Points are marked in it where interactive interface elements, the JS blocks, are connected.<ph id="2">&lt;br /&gt;</ph>The binding point for a JS block is an HTML element (DOM node) whose <bpt id="3">&lt;code&gt;</bpt>class<ept id="3">&lt;/code&gt;</ept> attribute<ph id="4">&lt;br /&gt;</ph>specifies the name of the block, and the <bpt id="5">&lt;code&gt;</bpt>data-bem<ept id="5">&lt;/code&gt;</ept> attribute specifies the <bpt id="6">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>block parameters<ept id="6">&lt;/a&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При загрузке страницы в браузере выполняется <bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализация блоков<ept id="1">&lt;/a&gt;</ept>. В ходе нее создаются экземпляры блоков — JS-объекты всех блоков, упомянутых в классах HTML-элементов страницы. JS-объект, привязанный к HTML-элементу,<ph id="2">&lt;br /&gt;</ph>обрабатывает происходящие на нем <bpt id="3">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM-события<ept id="3">&lt;/a&gt;</ept> и хранит состояния данного экземпляра блока.</source><target state="translated" xml:lang="en">When loading a page in the browser, <bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>blocks are initialized<ept id="1">&lt;/a&gt;</ept>. This creates instances of blocks — JS objects for all the blocks mentioned in classes of the page's HTML elements. A JS object bound to an HTML element<ph id="2">&lt;br /&gt;</ph>handles the <bpt id="3">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM events<ept id="3">&lt;/a&gt;</ept> that occur on it and stores the states of this block instance.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такой способ привязки JavaScript-компонентов к HTML имеет следующие преимущества:</source><target state="translated" xml:lang="en">This method of binding JavaScript components to HTML has the following advantages:</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">естественная деградация интерфейса на клиентах с отключенным JavaScript;</source><target state="translated" xml:lang="en">Natural degradation of the interface on clients with JavaScript disabled.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">прогрессивный рендеринг — возможность начинать отрисовку элементов интерфейса до окончания загрузки всех данных страницы (например, изображений).</source><target state="translated" xml:lang="en">Progressive rendering — the ability to begin rendering interface elements before all the page data has finished loading (for example, images).</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-syntax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="html-syntax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu10" resname="---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Механизм привязки блоков</source><target state="translated" xml:lang="en">Mechanism for binding blocks</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы привязать блок к HTML-элементу (например, <bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept>), необходимо:</source><target state="translated" xml:lang="en">To bind a block to an HTML element (for example, <bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept>), it is necessary to:</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu13" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Декларировать блок в <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Cоздать модуль <bpt id="5">&lt;a href="https://github.com/ymaps/modules" [#$tu13]&gt;</bpt>ym<ept id="5">&lt;/a&gt;</ept>, содержащий JS-реализацию блока (<bpt id="6">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>декларацию<ept id="6">&lt;/a&gt;</ept>). Для этого строка с именем блока передается первым аргументом методам <bpt id="7">&lt;code&gt;</bpt>modules.define<ept id="7">&lt;/code&gt;</ept> и <bpt id="8">&lt;code&gt;</bpt>BEMDOM.decl<ept id="8">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Declare the block in <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Create the <bpt id="5">&lt;a href="https://github.com/ymaps/modules" [#$tu13]&gt;</bpt>ym<ept id="5">&lt;/a&gt;</ept> module containing the JS implementation of the block (<bpt id="6">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>the declaration<ept id="6">&lt;/a&gt;</ept>). To do this, pass a string with the block name as the first argument to the <bpt id="7">&lt;code&gt;</bpt>modules.define<ept id="7">&lt;/code&gt;</ept> and <bpt id="8">&lt;code&gt;</bpt>BEMDOM.decl<ept id="8">&lt;/code&gt;</ept> methods.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu14" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM){

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    }
));

});<ept id="1">&lt;/code&gt;</ept></source><target state="needs-review-translation" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM){

provide(BEMDOM.decl(this.name,
    {
        /* instance's methods */
    },
    {
        /* static methods */
    }
));

});<ept id="1">&lt;/code&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="95" match-quality="89" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('button', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    })
);

});<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('button', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* methods of the instance */
    },
    {
        /* static methods */
    })
);

});<ept id="1">&lt;/code&gt;</ept></target>

<?id 1442562266474?></alt-trans><alt-trans origin="autoFuzzy" ts="102" match-quality="85" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem'], function(provide, BEM) {

provide(BEM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    })
);

});<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem'], function(provide, BEM) {

provide(BEM.decl(this.name,
    {
        /* methods of the instance */
    },
    {
        /* static methods */
    })
);

});<ept id="1">&lt;/code&gt;</ept></target>

<?id 1442562266475?></alt-trans></trans-unit>
      <trans-unit id="tu15" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">На уровне проекта каждый модуль <bpt id="1">&lt;code&gt;</bpt>ym<ept id="1">&lt;/code&gt;</ept> обычно хранится как отдельный файл технологии <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept>. Например, декларация <bpt id="3">&lt;code&gt;</bpt>my-block<ept id="3">&lt;/code&gt;</ept> в проекте может храниться как <bpt id="4">&lt;code&gt;</bpt>my-block/my-block.js<ept id="4">&lt;/code&gt;</ept> – файл <bpt id="5">&lt;code&gt;</bpt>my-block.js<ept id="5">&lt;/code&gt;</ept>, вложенный в папку <bpt id="6">&lt;code&gt;</bpt>my-block<ept id="6">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">On the project level, each <bpt id="1">&lt;code&gt;</bpt>ym<ept id="1">&lt;/code&gt;</ept> module is usually stored as a separate <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> file. For example, the <bpt id="3">&lt;code&gt;</bpt>my-block<ept id="3">&lt;/code&gt;</ept> declaration might be stored in the project as <bpt id="4">&lt;code&gt;</bpt>my-block/my-block.js<ept id="4">&lt;/code&gt;</ept> – the file <bpt id="5">&lt;code&gt;</bpt>my-block.js<ept id="5">&lt;/code&gt;</ept>, inside the folder <bpt id="6">&lt;code&gt;</bpt>my-block<ept id="6">&lt;/code&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu16" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Отметить блок в HTML-дереве<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Добавить HTML-элементу атрибут <bpt id="4">&lt;code&gt;</bpt>class<ept id="4">&lt;/code&gt;</ept> с именем блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Mark the block in the HTML tree<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Add the <bpt id="4">&lt;code&gt;</bpt>class<ept id="4">&lt;/code&gt;</ept> attribute with the block name to the HTML element.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu17" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>

<?id 1442576447517?></alt-trans></trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Разрешить инициализацию экземпляра блока<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Включить класс <bpt id="4">&lt;code&gt;</bpt>i-bem<ept id="4">&lt;/code&gt;</ept> в список классов HTML-элемента. Наличие этого класса укажет фреймворку, что HTML-элемент связан с JS-блоком.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Allow initialization of a block instance<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Include the <bpt id="4">&lt;code&gt;</bpt>i-bem<ept id="4">&lt;/code&gt;</ept> class in the list of classes for an HTML element. The presence of this class will show the framework that the HTML element is connected to the JS block.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu19" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>

<?id 1442576447762?></alt-trans><alt-trans origin="autoFuzzy" ts="428" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Передать параметры экземпляру блока<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Поместить параметры блока в атрибут <bpt id="4">&lt;code&gt;</bpt>data-bem<ept id="4">&lt;/code&gt;</ept>. Параметры блока записываются в формате JSON и представляют собой хэш вида: <bpt id="5">&lt;code&gt;</bpt>имя блока : хэш параметров<ept id="5">&lt;/code&gt;</ept>. Параметры будут переданы экземпляру блока <bpt id="6">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>в момент инициализации<ept id="6">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Pass parameters to a block instance<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Put block parameters in the <bpt id="4">&lt;code&gt;</bpt>data-bem<ept id="4">&lt;/code&gt;</ept> attribute. Block parameters are written in JSON format as a hash of the format: <bpt id="5">&lt;code&gt;</bpt>block name : hash of parameters<ept id="5">&lt;/code&gt;</ept>. The parameters will be passed to the block instance <bpt id="6">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>at the time of initialization<ept id="6">&lt;/a&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu21" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": { "name": "ya" } }'&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": { "name": "ya" } }'&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>

<?id 1442576448006?></alt-trans><alt-trans origin="autoFuzzy" ts="428" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-conection"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="html-conection"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu23" resname="---html--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Связь блоков с HTML-элементами</source><target state="translated" xml:lang="en">The relation of blocks to HTML elements</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Одному HTML-элементу не обязательно должен соответствовать один экземпляр блока. Возможны следующие типы связи между блоками и HTML-элементами:</source><target state="translated" xml:lang="en">A single HTML element doesn't have to correspond to a single block instance. The following relationships between blocks and HTML elements are possible:</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu25" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#html-simple"&gt;</bpt>Один HTML-элемент — один JS-блок<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#html-simple"&gt;</bpt>One HTML element to one JS block<ept id="1">&lt;/a&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu26" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>Один HTML-элемент — несколько JS-блоков<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>One HTML element to multiple JS blocks<ept id="1">&lt;/a&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu27" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#distrib-block"&gt;</bpt>Один JS-блок на нескольких HTML-элементах<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#distrib-block"&gt;</bpt>One JS block to multiple HTML elements<ept id="1">&lt;/a&gt;</ept>.</target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="437" match-quality="76" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>Один HTML-элемент — несколько JS-блоков<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>One HTML element to multiple JS blocks<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu28" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-simple"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="html-simple"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu29" resname="-html---js--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Один HTML-элемент — один JS-блок</source><target state="translated" xml:lang="en">One HTML element to one JS block</target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="436" match-quality="95" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#html-simple"&gt;</bpt>Один HTML-элемент — один JS-блок<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#html-simple"&gt;</bpt>One HTML element to one JS block<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Самый простой и распространенный способ привязки блоков к HTML.</source><target state="translated" xml:lang="en">The simplest and most common way of binding blocks to HTML.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> HTML-элемент <bpt id="2">&lt;code&gt;</bpt>div<ept id="2">&lt;/code&gt;</ept>, на котором размещен блок <bpt id="3">&lt;code&gt;</bpt>my-block<ept id="3">&lt;/code&gt;</ept>.<ph id="4">&lt;br /&gt;</ph>Параметры блока: пустой список <bpt id="5">&lt;code&gt;</bpt>{}<ept id="5">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> The <bpt id="2">&lt;code&gt;</bpt>div<ept id="2">&lt;/code&gt;</ept> HTML element with <bpt id="3">&lt;code&gt;</bpt>my-block<ept id="3">&lt;/code&gt;</ept> placed on it.<ph id="4">&lt;br /&gt;</ph>Block parameters: an empty list <bpt id="5">&lt;code&gt;</bpt>{}<ept id="5">&lt;/code&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu32" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>

<?id 1442576449310?></alt-trans><alt-trans origin="autoFuzzy" ts="428" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-mixes"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="html-mixes"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu34" resname="-html---js--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Один HTML-элемент — несколько JS-блоков</source><target state="translated" xml:lang="en">One HTML element to multiple JS blocks</target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="437" match-quality="96" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>Один HTML-элемент — несколько JS-блоков<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>One HTML element to multiple JS blocks<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="438" match-quality="76" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#distrib-block"&gt;</bpt>Один JS-блок на нескольких HTML-элементах<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#distrib-block"&gt;</bpt>One JS block to multiple HTML elements<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="440" match-quality="70" tool="Swordfish">
<source xml:lang="ru">Один HTML-элемент — один JS-блок</source>
<target state="translated" xml:lang="en">One HTML element to one JS block</target>
</alt-trans></trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Техника размещения нескольких блоков на одном HTML-элементе в БЭМ-методологии называется <bpt id="1">&lt;a href="i-bem-js-decl.ru.md#inher-mixins"&gt;</bpt>микс<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">The technique of placing multiple blocks on a single HTML element is called a <bpt id="1">&lt;a href="i-bem-js-decl.ru.md#inher-mixins"&gt;</bpt>mix<ept id="1">&lt;/a&gt;</ept> in BEM methodology.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu36" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> HTML-элемент <bpt id="2">&lt;code&gt;</bpt>div<ept id="2">&lt;/code&gt;</ept>, на котором размещены:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> The <bpt id="2">&lt;code&gt;</bpt>div<ept id="2">&lt;/code&gt;</ept> HTML element, with the following blocks on it:</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu37" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">блок <bpt id="1">&lt;code&gt;</bpt>user<ept id="1">&lt;/code&gt;</ept> с параметром <bpt id="2">&lt;code&gt;</bpt>name<ept id="2">&lt;/code&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>pushkin<ept id="3">&lt;/code&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>user<ept id="1">&lt;/code&gt;</ept> with the parameter <bpt id="2">&lt;code&gt;</bpt>name<ept id="2">&lt;/code&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>pushkin<ept id="3">&lt;/code&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu38" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">блок <bpt id="1">&lt;code&gt;</bpt>avatar<ept id="1">&lt;/code&gt;</ept> с параметром <bpt id="2">&lt;code&gt;</bpt>img<ept id="2">&lt;/code&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>http://...<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>avatar<ept id="1">&lt;/code&gt;</ept> with the parameter <bpt id="2">&lt;code&gt;</bpt>img<ept id="2">&lt;/code&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>http:// ...<ept id="3">&lt;/code&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu39" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="user avatar i-bem" data-bem='{ "user": { "name": "pushkin" }, "avatar": { "img": "http://..." } }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="user avatar i-bem" data-bem='{ "user": { "name": "pushkin" }, "avatar": { "img": "http://..." } }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>

<?id 1442576450148?></alt-trans><alt-trans origin="autoFuzzy" ts="428" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans><alt-trans origin="autoFuzzy" ts="443" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="distrib-block"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="distrib-block"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu41" resname="-js----html--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Один JS-блок на нескольких HTML-элементах</source><target state="translated" xml:lang="en">One JS block to multiple HTML elements</target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="437" match-quality="78" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>Один HTML-элемент — несколько JS-блоков<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>One HTML element to multiple JS blocks<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="438" match-quality="96" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#distrib-block"&gt;</bpt>Один JS-блок на нескольких HTML-элементах<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#distrib-block"&gt;</bpt>One JS block to multiple HTML elements<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="445" match-quality="79" tool="Swordfish">
<source xml:lang="ru">Один HTML-элемент — несколько JS-блоков</source>
<target state="translated" xml:lang="en">One HTML element to multiple JS blocks</target>
</alt-trans></trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такой дизайн удобен, если нужно согласовать состояния нескольких компонентов блока.</source><target state="translated" xml:lang="en">This design is convenient if you need to coordinate the states of multiple components of a block.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы привязать экземпляр блока к нескольким HTML-элементам, нужно указать им в атрибуте <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> одинаковое значение параметра <bpt id="2">&lt;code&gt;</bpt>id<ept id="2">&lt;/code&gt;</ept>. Значением <bpt id="3">&lt;code&gt;</bpt>id<ept id="3">&lt;/code&gt;</ept> может быть произвольная строка.</source><target state="translated" xml:lang="en">To bind a block instance to multiple HTML elements, you must set the same value for the <bpt id="2">&lt;code&gt;</bpt>id<ept id="2">&lt;/code&gt;</ept> parameter in the <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> attribute. The value of <bpt id="3">&lt;code&gt;</bpt>id<ept id="3">&lt;/code&gt;</ept> can be any string.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu44" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Экземпляр блока <bpt id="2">&lt;code&gt;</bpt>notebook<ept id="2">&lt;/code&gt;</ept> привязан к HTML-элементам <bpt id="3">&lt;code&gt;</bpt>div<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>span<ept id="4">&lt;/code&gt;</ept>.<ph id="5">&lt;br /&gt;</ph>В параметрах блока указан общий <bpt id="6">&lt;code&gt;</bpt>id<ept id="6">&lt;/code&gt;</ept> — <bpt id="7">&lt;code&gt;</bpt>maintab<ept id="7">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> An instance of the <bpt id="2">&lt;code&gt;</bpt>notebook<ept id="2">&lt;/code&gt;</ept> block bound to the <bpt id="3">&lt;code&gt;</bpt>div<ept id="3">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>span<ept id="4">&lt;/code&gt;</ept> HTML elements.<ph id="5">&lt;br /&gt;</ph>The parameters specify the shared <bpt id="6">&lt;code&gt;</bpt>id<ept id="6">&lt;/code&gt;</ept> — <bpt id="7">&lt;code&gt;</bpt>maintab<ept id="7">&lt;/code&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu45" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="notebook i-bem" data-bem='{ "notebook": { "id": "maintab" }}'&gt;</ph> <ph id="swf_auto_html_tag-2">&lt;/div&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;span class="notebook i-bem" data-bem='{ "notebook": { "id": "maintab" }}'&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/span&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="notebook i-bem" data-bem='{ "notebook": { "id": "maintab" }}'&gt;</ph> <ph id="swf_auto_html_tag-2">&lt;/div&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;span class="notebook i-bem" data-bem='{ "notebook": { "id": "maintab" }}'&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/span&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="231" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem="..." &gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>

<?id 1442576451405?></alt-trans><alt-trans origin="autoFuzzy" ts="428" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt> <ph id="swf_auto_html_tag-0">&lt;div class="my-block"&gt;</ph>...<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans><alt-trans origin="autoFuzzy" ts="443" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;</ph> ... <ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В результате при инициализации блоков создается один JS-объект, поле <bpt id="1">&lt;a href="./i-bem-js-dom.ru.md"&gt;</bpt><bpt id="2">&lt;code&gt;</bpt>domElem<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept> которого содержит ссылки на jQuery-объекты обоих DOM-узлов.</source><target state="translated" xml:lang="en">As a result, when the blocks are initialized, a single JS object is created, with a <bpt id="1">&lt;a href="./i-bem-js-dom.ru.md"&gt;</bpt><bpt id="2">&lt;code&gt;</bpt>domElem<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept> field that contains references to the jQuery objects of both DOM nodes.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu47" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, виджет «вкладка», где клик по заголовку вкладки (первый HTML-элемент), меняет ее содержимое (второй HTML-элемент).<ph id="1">&lt;br /&gt;</ph>Другой пример: маркер, обозначающий точку на карте (первый элемент), и связанное с ним описание точки в списке рядом (второй элемент).</source><target state="translated" xml:lang="en">For example, the "tab" widget, where a click on the tab title (the first HTML element) changes its content (the second HTML element).<ph id="1">&lt;br /&gt;</ph>Another example is a placemark that marks a point on a map (the first element), and the related description of the point in the list next to it (the second element).</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Идентификатор <bpt id="1">&lt;code&gt;</bpt>id<ept id="1">&lt;/code&gt;</ept> используется <bpt id="2">&lt;em&gt;</bpt>только в момент инициализации<ept id="2">&lt;/em&gt;</ept> экземпляра блока. Значение <bpt id="3">&lt;code&gt;</bpt>id<ept id="3">&lt;/code&gt;</ept> должно быть уникальным для экземпляров одного блока в рамках одной <bpt id="4">&lt;a href="i-bem-js-init.ru.md#init-wave"&gt;</bpt>волны инициализации<ept id="4">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>id<ept id="1">&lt;/code&gt;</ept> is used <bpt id="2">&lt;em&gt;</bpt>only at the time of initializing<ept id="2">&lt;/em&gt;</ept> the block instance. The <bpt id="3">&lt;code&gt;</bpt>id<ept id="3">&lt;/code&gt;</ept> value must be unique for instances of the same block in the context of a single <bpt id="4">&lt;a href="i-bem-js-init.ru.md#init-wave"&gt;</bpt>wave of initialization<ept id="4">&lt;/a&gt;</ept>.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="i-blocks"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="i-blocks"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu50" resname="--dom--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Блоки без DOM-представления</source><target state="translated" xml:lang="en">Blocks without DOM representation</target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="85" match-quality="84" tool="Swordfish">
<source xml:lang="ru">Блоки с DOM-представлением</source>
<target state="translated" xml:lang="en">Blocks with DOM representation</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="200" match-quality="75" tool="Swordfish">
<source xml:lang="ru">Без DOM-представления</source>
<target state="translated" xml:lang="en">Without DOM representation</target>
</alt-trans></trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Инфраструктурный код, решающий общие задачи интерфейса (связь с бэкэндом, вспомогательные методы), можно оформить в виде блока. Это позволит выражать состояния блока с помощью <bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>модификаторов<ept id="1">&lt;/a&gt;</ept>, на изменение которых смогут <bpt id="2">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>подписаться другие блоки<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">Infrastructure code that performs general interface tasks (access to the backend, or helper methods) can be formatted as a block. This allows expressing block states using <bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>modifiers<ept id="1">&lt;/a&gt;</ept>, so that <bpt id="2">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>other blocks can subscribe<ept id="2">&lt;/a&gt;</ept> to their changes.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы не привязывать такие блоки к HTML-дереву искусственно в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> можно создавать блоки без DOM-представления.</source><target state="translated" xml:lang="en">To avoid binding these blocks to the HTML tree artificially, these blocks can be created in <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> without DOM representation.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu53" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Блоки без DOM-представления:</source><target state="translated" xml:lang="en">Blocks without DOM representation:</target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="98" match-quality="96" tool="Swordfish">
<source xml:lang="ru">Блоки без DOM-представления</source>
<target state="translated" xml:lang="en">Blocks without DOM representation</target>

<?id 1442562271233?></alt-trans><alt-trans origin="autoFuzzy" ts="85" match-quality="81" tool="Swordfish">
<source xml:lang="ru">Блоки с DOM-представлением</source>
<target state="translated" xml:lang="en">Blocks with DOM representation</target>

<?id 1442562271232?></alt-trans><alt-trans origin="autoFuzzy" ts="200" match-quality="73" tool="Swordfish">
<source xml:lang="ru">Без DOM-представления</source>
<target state="translated" xml:lang="en">Without DOM representation</target>

<?id 1442576452301?></alt-trans></trans-unit>
      <trans-unit id="tu54" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">не требуют привязки к HTML-коду страницы;</source><target state="translated" xml:lang="en">Do not require binding to a page's HTML code.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu55" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">должны быть явно <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-bem"&gt;</bpt>инициализированы<ept id="1">&lt;/a&gt;</ept> и уничтожены.</source><target state="translated" xml:lang="en">Must be explicitly <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-bem"&gt;</bpt>initialized<ept id="1">&lt;/a&gt;</ept> and destroyed.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu56" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api-nodom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="api-nodom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu57" resname="-----dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Доступ к экземплярам блоков без DOM-представления</source><target state="translated" xml:lang="en">Access to block instances without DOM representation</target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="400" match-quality="97" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-html-binding.ru.md#api-nodom"&gt;</bpt>Доступ к экземплярам блоков без DOM-представления<ept id="1">&lt;/a&gt;</ept>;</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-html-binding.ru.md#api-nodom"&gt;</bpt>Access to block instances without DOM representation<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При создании экземпляра блока без DOM-представления необходимо позаботиться о сохранении ссылки на этот экземпляр для блоков, которым нужно с ним взаимодействовать.</source><target state="translated" xml:lang="en">When creating a block instance without DOM representation, you must see to it that references to this instance are stored for blocks that need to interact with it.</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Смотрите также:</source><target state="translated" xml:lang="en">See also:</target><?sid -1629172653-9?></trans-unit>
      <trans-unit id="tu60" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-bem"&gt;</bpt>Инициализация и удаление блоков без DOM-представления<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-bem"&gt;</bpt>Initializing and deleting blocks without DOM representation<ept id="1">&lt;/a&gt;</ept></target><?sid -1629172653-9?><alt-trans origin="autoFuzzy" ts="313" match-quality="97" tool="Swordfish">
<source xml:lang="ru">Инициализация и удаление блоков без DOM-представления</source>
<target state="translated" xml:lang="en">Initializing and deleting blocks without DOM representation</target>
</alt-trans></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-events.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu2" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">События</source><target state="translated" xml:lang="en">Events</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> поддерживается два вида событий:</source><target state="translated" xml:lang="en">In <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept>, two types of events are supported:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu4" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>DOM-события<ept id="1">&lt;/strong&gt;</ept> — jQuery-события на DOM-узле, связанном с<ph id="2">&lt;br /&gt;</ph>блоком. Отражают взаимодействие пользователя с интерфейсом (клик,<ph id="3">&lt;br /&gt;</ph>наведение мыши, ввод текста и т.п.). DOM-события обычно обрабатывает<ph id="4">&lt;br /&gt;</ph>тот экземпляр блока, на DOM-узлах которого они возникают.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>DOM events<ept id="1">&lt;/strong&gt;</ept> — jQuery events on the DOM node connected with<ph id="2">&lt;br /&gt;</ph>the block. They reflect the user's interaction with the interface (clicks,<ph id="3">&lt;br /&gt;</ph>moving the mouse, entering text, and so on). DOM events are usually handled by<ph id="4">&lt;br /&gt;</ph>the block instance of the DOM nodes where they occur.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>БЭМ-события<ept id="1">&lt;/strong&gt;</ept> — собственные события, генерируемые<ph id="2">&lt;br /&gt;</ph>блоком. Позволяют организовать API для<ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>взаимодействия с блоком<ept id="4">&lt;/a&gt;</ept>. БЭМ-события обычно обрабатывает<ph id="5">&lt;br /&gt;</ph>экземпляр блока, отслеживающий состояние других блоков, на которых<ph id="6">&lt;br /&gt;</ph>генерируются события.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>BEM events<ept id="1">&lt;/strong&gt;</ept> — Private events generated<ph id="2">&lt;br /&gt;</ph>by the block. They make it possible to form an API for<ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>interaction with the block<ept id="4">&lt;/a&gt;</ept>. BEM events are usually handled by<ph id="5">&lt;br /&gt;</ph>an instance of the block that monitors the state of other blocks<ph id="6">&lt;br /&gt;</ph>where events are generated.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">DOM-события следует использовать только во <bpt id="1">&lt;em&gt;</bpt>внутренних<ept id="1">&lt;/em&gt;</ept> процедурах блока. Для<ph id="2">&lt;br /&gt;</ph>взаимодействия блока с <bpt id="3">&lt;em&gt;</bpt>внешней<ept id="3">&lt;/em&gt;</ept> средой (другими блоками) предназначены БЭМ-события.</source><target state="translated" xml:lang="en">DOM events should be used only in <bpt id="1">&lt;em&gt;</bpt>internal<ept id="1">&lt;/em&gt;</ept> block procedures. Use BEM events for<ph id="2">&lt;br /&gt;</ph>a block's interaction with the <bpt id="3">&lt;em&gt;</bpt>external<ept id="3">&lt;/em&gt;</ept> environment (other blocks).</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="delegated-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="delegated-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu8" resname="--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Делегирование событий</source><target state="translated" xml:lang="en">Delegating events</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="407" match-quality="70" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Делегирования БЭМ-событий<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Delegating BEM events<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Обработка БЭМ-событий и DOM-событий может быть <bpt id="1">&lt;strong&gt;</bpt>делегирована<ept id="1">&lt;/strong&gt;</ept> контейнеру<ph id="2">&lt;br /&gt;</ph>(всему документу или конкретному DOM-узлу). В этом случае контейнер<ph id="3">&lt;br /&gt;</ph>служит точкой обработки событий, возникающих на любом из его<ph id="4">&lt;br /&gt;</ph>дочерних узлов, даже если в момент подписки на события<ph id="5">&lt;br /&gt;</ph>некоторых из дочерних узлов еще не существовало.</source><target state="translated" xml:lang="en">Handling BEM events and DOM events can be <bpt id="1">&lt;strong&gt;</bpt>delegated<ept id="1">&lt;/strong&gt;</ept> to a container<ph id="2">&lt;br /&gt;</ph>(the entire document, or a specific DOM node). In this case, the container<ph id="3">&lt;br /&gt;</ph>serves as a handling point for events that occur on any of its<ph id="4">&lt;br /&gt;</ph>child nodes, even if some of the child nodes didn't exist yet<ph id="5">&lt;br /&gt;</ph>at the time of subscribing to events.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, блок меню может содержать вложенные блоки — пункты меню. Обработку<ph id="1">&lt;br /&gt;</ph>кликов на пунктах меню имеет смысл делегировать самому блоку<ph id="2">&lt;br /&gt;</ph>меню. Это, во-первых, позволяет сэкономить затраты ресурсов на<ph id="3">&lt;br /&gt;</ph>подписку на события (дешевле подписаться на одно событие контейнера,<ph id="4">&lt;br /&gt;</ph>чем на много событий элементов). Во-вторых, дает возможность добавлять и удалять пункты меню, не подписываясь на события добавленных пунктов и не отписываясь от событий удаленных.</source><target state="translated" xml:lang="en">For example, a menu block can contain nested blocks — the menu items. Handling<ph id="1">&lt;br /&gt;</ph>clicks on the menu items should logically be delegated to the menu <ph id="2">&lt;br /&gt;</ph>block. First, this saves resources on<ph id="3">&lt;br /&gt;</ph>subscribing to events (less resources are consumed by subscribing to a container's single event<ph id="4">&lt;br /&gt;</ph>than by subscribing to many events on elements). Second, this makes it possible to add and remove menu items without subscribing to the events of added items or unsubscribing from the events of removed items.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Возможно делегировать как БЭМ-события, так и DOM-события.</source><target state="translated" xml:lang="en">Both BEM events and DOM events can be delegated.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dom-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="dom-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu13" resname="dom--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">DOM-события</source><target state="translated" xml:lang="en">DOM events</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="286" match-quality="91" tool="Swordfish">
<source xml:lang="ru">DOM-события:
</source>
<target state="translated" xml:lang="en">DOM events:</target>

<?id 1442822275586?></alt-trans></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Работа с DOM-событиями в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> полностью реализована средствами фреймворка jQuery.</source><target state="translated" xml:lang="en">Interaction with DOM events in <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> is fully implemented using the jQuery framework.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu15" resname="--dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Подписка на DOM-событие</source><target state="translated" xml:lang="en">Subscribing to DOM events</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">У объекта экземпляра блока зарезервирован набор методов для подписки на DOM-события:</source><target state="translated" xml:lang="en">A set of methods for subscribing to DOM events is reserved on the block instance object:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu17" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept> — на события основного DOM-узла блока и DOM-узлов его элементов.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>bindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept> — To events of the block's main DOM node and its elements' DOM nodes.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindToDoc(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>bindToDoc(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – To events of the <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept> DOM node.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindToWin(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>bindToWin(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – To events of the <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept> DOM node.</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="489" match-quality="80" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindToDoc(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>bindToDoc(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – To events of the <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept> DOM node.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu20" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> В момент <bpt id="2">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализации экземпляра блока<ept id="2">&lt;/a&gt;</ept><ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept> выполняется подписка на событие <bpt id="5">&lt;code&gt;</bpt>click<ept id="5">&lt;/code&gt;</ept>, при наступлении<ph id="6">&lt;br /&gt;</ph>которого блок выставляет себе <bpt id="7">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>модификатор<ept id="7">&lt;/a&gt;</ept> <bpt id="8">&lt;code&gt;</bpt>size<ept id="8">&lt;/code&gt;</ept> в значение <bpt id="9">&lt;code&gt;</bpt>big<ept id="9">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> At <bpt id="2">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>initialization of the block instance<ept id="2">&lt;/a&gt;</ept><ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept>, the <bpt id="5">&lt;code&gt;</bpt>click<ept id="5">&lt;/code&gt;</ept> event is subscribed to. When this event occurs,<ph id="6">&lt;br /&gt;</ph>the block sets its <bpt id="8">&lt;code&gt;</bpt>size<ept id="8">&lt;/code&gt;</ept> <bpt id="7">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>modifier<ept id="7">&lt;/a&gt;</ept>  to <bpt id="9">&lt;code&gt;</bpt>big<ept id="9">&lt;/code&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu21" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('click', function(e) {
                    this.setMod('size', 'big');
                });
            }
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('click', function(e) {
                    this.setMod('size', 'big');
                });
            }
        }
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> При <bpt id="2">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализации экземпляра блока<ept id="2">&lt;/a&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>my-form<ept id="3">&lt;/code&gt;</ept> выполняется<ph id="4">&lt;br /&gt;</ph>подписка на событие <bpt id="5">&lt;code&gt;</bpt>click<ept id="5">&lt;/code&gt;</ept> элемента <bpt id="6">&lt;code&gt;</bpt>submit<ept id="6">&lt;/code&gt;</ept>, при наступлении<ph id="7">&lt;br /&gt;</ph>которого будет вызвана функция-обработчик <bpt id="8">&lt;code&gt;</bpt>_onSubmit<ept id="8">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> At <bpt id="2">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt> initialization of the block instance<ept id="2">&lt;/a&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>my-form<ept id="3">&lt;/code&gt;</ept>, it subscribes to the<ph id="4">&lt;br /&gt;</ph><bpt id="5">&lt;code&gt;</bpt>click<ept id="5">&lt;/code&gt;</ept> event on the <bpt id="6">&lt;code&gt;</bpt>submit<ept id="6">&lt;/code&gt;</ept> element. When the event occurs,<ph id="7">&lt;br /&gt;</ph>the <bpt id="8">&lt;code&gt;</bpt>_onSubmit<ept id="8">&lt;/code&gt;</ept> handler function will be invoked.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('submit', 'click', this._onSubmit);
            }
        }
    },

    _onSubmit : function() { /* ... */ }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('submit', 'click', this._onSubmit);
            }
        }
    },

    _onSubmit : function() { /* ... */ }
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Функция-обработчик выполняется в контексте того экземпляра<ph id="2">&lt;br /&gt;</ph>блока, в котором возникло событие.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> The handler function is executed in the context of the<ph id="2">&lt;br /&gt;</ph>block instance where the event occurred.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu25" resname="---dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Удаление подписки на DOM-событие</source><target state="translated" xml:lang="en">Removing subscriptions to DOM events</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Удаление подписки на DOM-события выполняется автоматически при уничтожении экземпляра блока. Тем не менее у объекта экземпляра блока зарезервирован набор методов для удаления подписки вручную во время работы блока:</source><target state="translated" xml:lang="en">Subscriptions to DOM events are removed automatically when a block instance is destroyed. However, the block instance object has a set of methods reserved for removing subscriptions manually while the block is working:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu27" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>unbindFrom([elem], event, [handler])<ept id="1">&lt;/code&gt;</ept> — удаление подписки на события основного DOM-узла блока и DOM-узлов его элементов.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>unbindFrom([elem], event, [handler])<ept id="1">&lt;/code&gt;</ept> — Unsubscribing from events of the block's main DOM node and its elements' DOM nodes.</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="488" match-quality="70" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept> — на события основного DOM-узла блока и DOM-узлов его элементов.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>bindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept> — To events of the block's main DOM node and its elements' DOM nodes.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu28" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>unbindFromDoc(event, [handler])<ept id="1">&lt;/code&gt;</ept> – удаление подписки на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>unbindFromDoc(event, [handler])<ept id="1">&lt;/code&gt;</ept> – Unsubscribing from events of the <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept> DOM node.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu29" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>unbindFromWin(event, [handler])<ept id="1">&lt;/code&gt;</ept> – удаление подписки на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>unbindFromWin(event, [handler])<ept id="1">&lt;/code&gt;</ept> – Unsubscribing from events of the <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept> DOM node.</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="499" match-quality="83" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>unbindFromDoc(event, [handler])<ept id="1">&lt;/code&gt;</ept> – удаление подписки на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>unbindFromDoc(event, [handler])<ept id="1">&lt;/code&gt;</ept> – Unsubscribing from events of the <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept> DOM node.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если при вызове одного из методов не указана функция-обработчик, будут удалены все обработчики, установленные блоком на DOM-узле для этого события.</source><target state="translated" xml:lang="en">If the handler function isn't specified when calling one of these methods, all the handlers are removed that were set by the block on the DOM node for this event.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu31" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>_stopKeysListening : function() { 
    this.unbindFromDoc('keydown');  // удаляем все обработчики события 'keydown' 
                                    // установленные блоком DOM-узлу document
} <ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>_stopKeysListening : function() { 
    this.unbindFromDoc('keydown');  // removing all the handlers of the 'keydown' event
                                    // set by the block for the 'document' DOM node
} <ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu32" resname="-dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Объект DOM-события</source><target state="translated" xml:lang="en">DOM event object</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu34" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://api.jquery.com/category/events/event-object/</source><target state="translated" xml:lang="en">https://api.jquery.com/category/events/event-object/</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Первым аргументом функция-обработчик получает jQuery-объект DOM-события — <bpt id="1">&lt;a href="https://api.jquery.com/category/events/event-object/" [#$tu34]&gt;</bpt><bpt id="2">&lt;code&gt;</bpt>{jQuery.Event}<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">The first argument the handler function gets is a jQuery object for the DOM event — <bpt id="1">&lt;a href="https://api.jquery.com/category/events/event-object/" [#$tu34]&gt;</bpt><bpt id="2">&lt;code&gt;</bpt>{jQuery.Event}<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Это позволяет использовать методы объекта <bpt id="1">&lt;code&gt;</bpt>stopPropаgation<ept id="1">&lt;/code&gt;</ept> и <bpt id="2">&lt;code&gt;</bpt>preventDefault<ept id="2">&lt;/code&gt;</ept> для управления распространением события и реакцией на него браузера.</source><target state="translated" xml:lang="en">This allows using the <bpt id="1">&lt;code&gt;</bpt>stopPropagation<ept id="1">&lt;/code&gt;</ept> and <bpt id="2">&lt;code&gt;</bpt>preventDefault<ept id="2">&lt;/code&gt;</ept> object methods for managing event propagation and the browser's reaction to an event.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu36" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('click', function(e) {
                    e.stopPropаgation(); // останавливаем всплывание события
                    this._onSubmit();
                });
            }
        }
    },

    _onSubmit : function() {
        /* ... */
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('click', function(e) {
                    e.stopPropаgation(); // prevents the event from bubbling up
                    this._onSubmit();
                });
            }
        }
    },

    _onSubmit : function() {
        /* ... */
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu37" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">DOM-событие может быть сгенерировано вручную, например, с помощью jQuery-функции <bpt id="1">&lt;code&gt;</bpt>trigger<ept id="1">&lt;/code&gt;</ept>. После объекта события, функция-обработчик DOM-события получит аргументами те параметры, с которыми <bpt id="2">&lt;code&gt;</bpt>trigger<ept id="2">&lt;/code&gt;</ept> была вызвана при создании события.</source><target state="translated" xml:lang="en">A DOM event can be generated manually, such as using the jQuery <bpt id="1">&lt;code&gt;</bpt>trigger<ept id="1">&lt;/code&gt;</ept> function. After the event object, the handler function of the DOM event gets arguments with the parameters that were used to call <bpt id="2">&lt;code&gt;</bpt>trigger<ept id="2">&lt;/code&gt;</ept> when the event was created.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu39" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">http://api.jquery.com/on/#event-handler</source><target state="translated" xml:lang="en">http://api.jquery.com/on/#event-handler</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu38" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>N.B.<ept id="1">&lt;/strong&gt;</ept> Параметры окружения и поведение функции-обработчика события идентичны <bpt id="2">&lt;a href="http://api.jquery.com/on/#event-handler" [#$tu39]&gt;</bpt>функции-обработчику<ept id="2">&lt;/a&gt;</ept> jQuery.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Parameters for the environment and behavior of an event handler function are identical to the jQuery <bpt id="2">&lt;a href="http://api.jquery.com/on/#event-handler" [#$tu39]&gt;</bpt>handler function<ept id="2">&lt;/a&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dom-events-delegated"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="dom-events-delegated"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu41" resname="-dom--id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Делегирование DOM-событий</source><target state="translated" xml:lang="en">Delegating DOM events</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="479" match-quality="82" tool="Swordfish">
<source xml:lang="ru">Делегирование событий</source>
<target state="translated" xml:lang="en">Delegating events</target>

<?id 1442822279887?></alt-trans><alt-trans origin="autoFuzzy" ts="407" match-quality="73" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Делегирования БЭМ-событий<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Delegating BEM events<ept id="1">&lt;/a&gt;</ept>.</target>

<?id 1442822279886?></alt-trans></trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Делегировать обработку DOM-событий рекомендуется с помощью метода <bpt id="1">&lt;code&gt;</bpt>liveBindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept>. В <bpt id="2">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>статических методах декларации<ept id="2">&lt;/a&gt;</ept> блока зарезервированно свойство <bpt id="3">&lt;code&gt;</bpt>live<ept id="3">&lt;/code&gt;</ept> для подписки на делегированные DOM-события.</source><target state="translated" xml:lang="en">We recommend using the <bpt id="1">&lt;code&gt;</bpt>liveBindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept> method to delegate handling DOM events. In the block's <bpt id="2">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>static declaration methods<ept id="2">&lt;/a&gt;</ept>, the <bpt id="3">&lt;code&gt;</bpt>live<ept id="3">&lt;/code&gt;</ept> property is reserved for subscribing to delegated DOM events.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Все экземпляры блока <bpt id="2">&lt;code&gt;</bpt>menu<ept id="2">&lt;/code&gt;</ept> подписываются на делегированное DOM-событие <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> своих элементов <bpt id="4">&lt;code&gt;</bpt>item<ept id="4">&lt;/code&gt;</ept>. Метод <bpt id="5">&lt;code&gt;</bpt>_onItemClick<ept id="5">&lt;/code&gt;</ept> экземпляра блока <bpt id="6">&lt;code&gt;</bpt>menu<ept id="6">&lt;/code&gt;</ept> будет выполняться при клике на любой элемент <bpt id="7">&lt;code&gt;</bpt>item<ept id="7">&lt;/code&gt;</ept> в меню. Не важно, существовал ли этот элемент в момент инициализации экземпляра.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> All instances of the <bpt id="2">&lt;code&gt;</bpt>menu<ept id="2">&lt;/code&gt;</ept> block subscribe to the delegated <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> DOM event for their <bpt id="4">&lt;code&gt;</bpt>item<ept id="4">&lt;/code&gt;</ept> elements. The <bpt id="5">&lt;code&gt;</bpt>_onItemClick<ept id="5">&lt;/code&gt;</ept> method of the <bpt id="6">&lt;code&gt;</bpt>menu<ept id="6">&lt;/code&gt;</ept> block instance will be invoked when any <bpt id="7">&lt;code&gt;</bpt>item<ept id="7">&lt;/code&gt;</ept> in the menu is clicked. It doesn't matter whether this item existed when the instance was initialized.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu44" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('menu', {
    _onItemClick : function(e) { /* ... */ }
}, {
    live : function() {
        this.liveBindTo('item', 'click', function(e) {
            this._onItemClick(e);
        });
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('menu', {
    _onItemClick : function(e) { /* ... */ }
}, {
    live : function() {
        this.liveBindTo('item', 'click', function(e) {
            this._onItemClick(e);
        });
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu45" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если в декларации блока задано свойство <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept>, инициализация экземпляров блока будет <bpt id="2">&lt;em&gt;</bpt>отложена<ept id="2">&lt;/em&gt;</ept> до момента, когда экземпляр блока потребуется в работе (<bpt id="3">&lt;a href="./i-bem-js-init.ru.md#init-live"&gt;</bpt>ленивая инициализация<ept id="3">&lt;/a&gt;</ept>). Таким моментом может стать DOM-событие на экземпляре блока, на которое выполнена делегированная подписка, или обращение к экземпляру блока <bpt id="4">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>из другого блока<ept id="4">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">If the <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept> property is set in the block declaration, the initialization of block instances will be <bpt id="2">&lt;em&gt;</bpt>deferred<ept id="2">&lt;/em&gt;</ept> until the moment when the block instance is needed (<bpt id="3">&lt;a href="./i-bem-js-init.ru.md#init-live"&gt;</bpt>lazy initialization<ept id="3">&lt;/a&gt;</ept>). This moment could be a DOM event on the block instance that was delegated the subscription, or a request sent to the block instance <bpt id="4">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>from another block<ept id="4">&lt;/a&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Функция-обработчик выполняется в контексте ближайшего блока данного типа на пути всплывания DOM-события (снизу вверх по DOM-дереву).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> A handler function is executed in the context of the nearest block of this type in the direction of the DOM event's bubbling (from bottom to top through the DOM tree).</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu47" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы воспользоваться делегированными событиями в блоке, не откладывая инициализацию, из функции, заданной в свойстве <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept>, следует вернуть <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en">To use delegated events in a block without deferring initialization, the function set in the <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept> property should return <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu48" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        _onClick: function() { /* ... */ }  // будет выполняться каждый раз, 
                                            // когда возникает событие 'click'
    },
    {
        live: function() {
            this.liveBindTo('click', function() { this._onClick() });
            return false; // экземпляры блоков будут инициализированы автоматически
        }
    }
));

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        _onClick: function() { /* ... */ }  // will be run each time 
                                            // the 'click' event occurs
    },
    {
        live: function() {
            this.liveBindTo('click', function() { this._onClick() });
            return false; // block instances will be initialized automatically
        }
    }
));

});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="bem-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu50" resname="--id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">БЭМ-события</source><target state="translated" xml:lang="en">BEM events</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="290" match-quality="91" tool="Swordfish">
<source xml:lang="ru">БЭМ-события:
</source>
<target state="translated" xml:lang="en">BEM events:</target>

<?id 1442822281288?></alt-trans><alt-trans origin="autoFuzzy" ts="484" match-quality="72" tool="Swordfish">
<source xml:lang="ru">DOM-события</source>
<target state="translated" xml:lang="en">DOM events</target>
</alt-trans></trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В отличие от DOM-событий, БЭМ-события генерируются не на DOM-элементах, а на <bpt id="1">&lt;strong&gt;</bpt>экземплярах блоков<ept id="1">&lt;/strong&gt;</ept>. Элементы блоков не могут генерировать БЭМ-события.</source><target state="translated" xml:lang="en">In contrast to DOM events, BEM events are not generated on DOM elements, but on <bpt id="1">&lt;strong&gt;</bpt>block instances<ept id="1">&lt;/strong&gt;</ept>. Block elements can't generate BEM events.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-subscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="bem-events-subscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu53" resname="---id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Генерация БЭМ-события</source><target state="translated" xml:lang="en">Generating BEM events</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu54" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для генерации БЭМ-события используется метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>emit(event, [data])<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>emit(event, [data])<ept id="1">&lt;/code&gt;</ept> method of a block instance is used for generating BEM events.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu55" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При взаимодействие пользователя с элементом управления блока возникают DOM-события. В ходе их обработки блоком можно создавать БЭМ-события. Это позволяет реализовать уровень абстракции над DOM-событиями. БЭМ-события создаются как реакция на DOM-события, но при соблюдении некоторых условий, например, при наличии или конкретном значении модификатора.</source><target state="translated" xml:lang="en">DOM events occur when a user interacts with a block's controls. BEM events can be created as part of their processing by the block. This allows a level of abstraction over DOM events. BEM events are generated as a reaction to DOM events, but subject to certain conditions, such as whether a modifier is present or has a specific value.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu56" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, при клике по кнопке <bpt id="1">&lt;code&gt;</bpt>submit<ept id="1">&lt;/code&gt;</ept> (DOM-событие <bpt id="2">&lt;code&gt;</bpt>click<ept id="2">&lt;/code&gt;</ept>) <bpt id="3">&lt;strong&gt;</bpt>БЭМ-событие<ept id="3">&lt;/strong&gt;</ept> <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept> генерируется только в том случае, если у блока в этот момент не установлен модификатор <bpt id="5">&lt;code&gt;</bpt>disabled<ept id="5">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en">For example, a click on the <bpt id="1">&lt;code&gt;</bpt>submit<ept id="1">&lt;/code&gt;</ept> button (the <bpt id="2">&lt;code&gt;</bpt>click<ept id="2">&lt;/code&gt;</ept> DOM event) will generate the <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept> <bpt id="3">&lt;strong&gt;</bpt>BEM event<ept id="3">&lt;/strong&gt;</ept> only if the block doesn't have the <bpt id="5">&lt;code&gt;</bpt>disabled<ept id="5">&lt;/code&gt;</ept> modifier set:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu57" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('submit', {
    onSetMod: {
        'js': {
            'inited': function() {
                this.bindTo('click', this._onClick); // подписка на DOM-событие "click"
            }
        }
    },

    _onClick: function() {
        if(!this.hasMod('disabled')) {
            this.emit('click'); // создание БЭМ-события "click"
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('submit', {
    onSetMod: {
        'js': {
            'inited': function() {
                this.bindTo('click', this._onClick); // subscribing to the "click" DOM event
            }
        }
    },

    _onClick: function() {
        if(!this.hasMod('disabled')) {
            this.emit('click'); // creating the "click" BEM event
        }
    }
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Вторым аргументом <bpt id="1">&lt;code&gt;</bpt>emit<ept id="1">&lt;/code&gt;</ept> можно передать произвольные данные, которые будут доступны как второй аргумент функции-обработчика.</source><target state="translated" xml:lang="en">You can pass any data as the second <bpt id="1">&lt;code&gt;</bpt>emit<ept id="1">&lt;/code&gt;</ept> argument, which will be accessible as the second argument of the handler function.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-subscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="bem-events-subscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu60" resname="----id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Подписка на БЭМ-события</source><target state="translated" xml:lang="en">Subscribing to BEM events</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="486" match-quality="80" tool="Swordfish">
<source xml:lang="ru">Подписка на DOM-событие</source>
<target state="translated" xml:lang="en">Subscribing to a DOM event</target>
</alt-trans></trans-unit>
      <trans-unit id="tu61" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для подписки на БЭМ-события экземпляров блоков используется метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>on(event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>on(event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept> method of a block instance is used for subscribing to BEM events on block instances.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu62" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> В момент инициализации HTML-формы (экземпляра блока <bpt id="2">&lt;code&gt;</bpt>my-form<ept id="2">&lt;/code&gt;</ept>) выполняется поиск вложенной в форму кнопки <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept> и подписка на ее БЭМ-событие <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept>. В результате при нажатии на кнопку (экземпляр блока <bpt id="5">&lt;code&gt;</bpt>submit<ept id="5">&lt;/code&gt;</ept>) будет выполнен метод <bpt id="6">&lt;code&gt;</bpt>_onSubmit<ept id="6">&lt;/code&gt;</ept> формы (экземпляр блока <bpt id="7">&lt;code&gt;</bpt>my-form<ept id="7">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> At initialization of an HTML form (an instance of the <bpt id="2">&lt;code&gt;</bpt>my-form<ept id="2">&lt;/code&gt;</ept> block), a search is performed for the <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept> button embedded in the form, and its <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept> BEM event is subscribed to. As a result, when the button (an instance of the <bpt id="5">&lt;code&gt;</bpt>submit<ept id="5">&lt;/code&gt;</ept> block) is clicked, the <bpt id="6">&lt;code&gt;</bpt>_onSubmit<ept id="6">&lt;/code&gt;</ept> method is executed for the form (the instance of the <bpt id="7">&lt;code&gt;</bpt>my-form<ept id="7">&lt;/code&gt;</ept> block).</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu63" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-form', {
    onSetMod: {
        'js': {
            'inited': function() {
                this.findBlockInside('submit').on(
                    'click', // имя БЭМ-события
                    this._onSubmit, // метод экземпляра блока my-form
                    this); // контекст для выполнения _onSubmit — блок my-form
            }
        }
    },

    _onSubmit: function() { /* ... */ }
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-form', {
    onSetMod: {
        'js': {
            'inited': function() {
                this.findBlockInside('submit').on(
                    'click', // name of the BEM event
                    this._onSubmit, // method of the 'my-form' block instance
                    this); // context for executing _onSubmit — the my-form block
            }
        }
    },

    _onSubmit: function() { /* ... */ }
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu64" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Если не передавать аргумент <bpt id="2">&lt;code&gt;</bpt>[handlerCtx]<ept id="2">&lt;/code&gt;</ept>, контекстом для выполнения функции-обработчика будет тот блок, в котором возникло БЭМ-событие (в примере выше это блок <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> If you don't pass the <bpt id="2">&lt;code&gt;</bpt>[handlerCtx]<ept id="2">&lt;/code&gt;</ept> argument, the context for the handler function will be the block where the BEM event occurred (in the example above, this is the <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept> block).</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu65" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-unsubscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="bem-events-unsubscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu66" resname="-----id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Удаление подписки на БЭМ-события</source><target state="translated" xml:lang="en">Removing subscriptions to BEM events</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="496" match-quality="85" tool="Swordfish">
<source xml:lang="ru">Удаление подписки на DOM-событие</source>
<target state="translated" xml:lang="en">Removing a subscription to a DOM event</target>
</alt-trans></trans-unit>
      <trans-unit id="tu67" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Удаление подписки на БЭМ-события выполняется автоматически при уничтожении экземпляра блока. Для удаления подписки вручную, используйте метод экземпляра блока<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;code&gt;</bpt>un(event, [handler], [handlerCtx])<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Subscriptions to BEM events are removed automatically when the block instance is destroyed. To remove a subscription manually, use the <ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;code&gt;</bpt>un(event, [handler], [handlerCtx])<ept id="2">&lt;/code&gt;</ept> method of the block instance.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu68" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-modchange"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="bem-events-modchange"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu69" resname="----id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">События при изменении модификаторов</source><target state="translated" xml:lang="en">Events when modifiers are changed</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu70" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для подписки на БЭМ-события при изменении модификатора блока или элемента используется метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>on(event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept>. Метод принимает аргументы:</source><target state="translated" xml:lang="en">Use the <bpt id="1">&lt;code&gt;</bpt>on(event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept> block instance method for subscribing to BEM events for changes to a modifier of a block or element. The method accepts the arguments:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu71" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">объект свойств модификатора, на который производится подписка;</source><target state="translated" xml:lang="en">The properties object of the modifier that is being subscribed to.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu72" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">функцию-обработчик, выполняющуюся при установке соответствующего модификатора.</source><target state="translated" xml:lang="en">The handler function that is executed when setting the corresponding modifier.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu73" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Объект, описывающий модификатор, может содержать следующие зарезервированные свойства:</source><target state="translated" xml:lang="en">The object describing the modifier can contain the following reserved properties:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu74" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – имя модификатора. Обязательное свойство.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – Modifier name. Required property.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu75" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – значение модификатора. Обязательное свойство. Со значением <bpt id="3">&lt;code&gt;</bpt>*<ept id="3">&lt;/code&gt;</ept> производится подписка на установку модификатора в <bpt id="4">&lt;strong&gt;</bpt>любое<ept id="4">&lt;/strong&gt;</ept> значение. Со значением <bpt id="5">&lt;code&gt;</bpt>''<ept id="5">&lt;/code&gt;</ept> – на <bpt id="6">&lt;strong&gt;</bpt>удаление<ept id="6">&lt;/strong&gt;</ept> модификатора. Подробнее смотрите в разделе <bpt id="7">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>триггеры на установку модификаторов<ept id="7">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – Modifier value. Required property. With the value <bpt id="3">&lt;code&gt;</bpt>*<ept id="3">&lt;/code&gt;</ept>, the subscription is for setting the modifier to <bpt id="4">&lt;strong&gt;</bpt>any<ept id="4">&lt;/strong&gt;</ept> value. With the value <bpt id="5">&lt;code&gt;</bpt>''<ept id="5">&lt;/code&gt;</ept>, the subscription is for <bpt id="6">&lt;strong&gt;</bpt>deleting<ept id="6">&lt;/strong&gt;</ept> the modifier. For more information, see the section <bpt id="7">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>Triggers for setting modifiers<ept id="7">&lt;/a&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu76" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>elem<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – имя элемента (для модификаторов элементов).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>elem<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – Element name (for element modifiers).</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu77" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> В момент инициализации блок <bpt id="2">&lt;code&gt;</bpt>form<ept id="2">&lt;/code&gt;</ept> подписывается на событие при изменении модификатора у вложенного блока <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept>. К примеру, можно подписаться на:</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example<ept id="1">&lt;/strong&gt;</ept>: At initialization, the <bpt id="2">&lt;code&gt;</bpt>form<ept id="2">&lt;/code&gt;</ept> block subscribes to the event of changing a modifier on the nested <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept> block. For example, subscriptions can be for:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu78" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu79" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">установку модификатора <bpt id="1">&lt;code&gt;</bpt>disabled<ept id="1">&lt;/code&gt;</ept> в любое значение;</source><target state="translated" xml:lang="en">Setting the <bpt id="1">&lt;code&gt;</bpt>disabled<ept id="1">&lt;/code&gt;</ept> modifier to any value.</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="356" match-quality="74" tool="Swordfish">
<source xml:lang="ru">установка <bpt id="1">&lt;em&gt;</bpt>любого<ept id="1">&lt;/em&gt;</ept> модификатора в <bpt id="2">&lt;em&gt;</bpt>любое<ept id="2">&lt;/em&gt;</ept> значение;</source>
<target state="translated" xml:lang="en">Setting <bpt id="1">&lt;em&gt;</bpt>any<ept id="1">&lt;/em&gt;</ept> modifier to <bpt id="2">&lt;em&gt;</bpt>any<ept id="2">&lt;/em&gt;</ept> value.</target>

<?id 1442822285361?></alt-trans></trans-unit>
      <trans-unit id="tu80" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('form', {
onSetMod: {
    'js': {
        'inited': function() {
            var submit = findBlockInside('submit');
            submit.on({ modName : 'disabled', modVal : '*' }, function() {});
        }
    }
},
});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('form', {
onSetMod: {
    'js': {
        'inited': function() {
            var submit = findBlockInside('submit');
            submit.on({ modName : 'disabled', modVal : '*' }, function() {});
        }
    }
},
});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu81" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu82" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">установку модификатора <bpt id="1">&lt;code&gt;</bpt>'disabled'<ept id="1">&lt;/code&gt;</ept> в значение <bpt id="2">&lt;code&gt;</bpt>'true'<ept id="2">&lt;/code&gt;</ept>;</source><target state="translated" xml:lang="en">Setting the <bpt id="1">&lt;code&gt;</bpt>'disabled'<ept id="1">&lt;/code&gt;</ept> modifier to <bpt id="2">&lt;code&gt;</bpt>'true'<ept id="2">&lt;/code&gt;</ept>.</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="549" match-quality="75" tool="Swordfish">
<source xml:lang="ru">установку модификатора <bpt id="1">&lt;code&gt;</bpt>disabled<ept id="1">&lt;/code&gt;</ept> в любое значение;</source>
<target state="translated" xml:lang="en">Setting the <bpt id="1">&lt;code&gt;</bpt>disabled<ept id="1">&lt;/code&gt;</ept> modifier to any value.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu83" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : 'true' }, function() {});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : 'true' }, function() {});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu84" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu85" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">удаление модификатора <bpt id="1">&lt;code&gt;</bpt>'disabled'<ept id="1">&lt;/code&gt;</ept>;</source><target state="translated" xml:lang="en">Removing the <bpt id="1">&lt;code&gt;</bpt>'disabled'<ept id="1">&lt;/code&gt;</ept> modifier.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu86" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="552" match-quality="92" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : 'true' }, function() {});<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : 'true' }, function() {});<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu87" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu88" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">удаление модификатора <bpt id="1">&lt;code&gt;</bpt>m1<ept id="1">&lt;/code&gt;</ept> у элемента <bpt id="2">&lt;code&gt;</bpt>'control'<ept id="2">&lt;/code&gt;</ept>;</source><target state="translated" xml:lang="en">Removing the <bpt id="1">&lt;code&gt;</bpt>m1<ept id="1">&lt;/code&gt;</ept> modifier from the <bpt id="2">&lt;code&gt;</bpt>'control'<ept id="2">&lt;/code&gt;</ept> element.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu89" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ elem : 'control', modName : 'm1', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>submit.on({ elem : 'control', modName : 'm1', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="554" match-quality="70" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu90" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-delegated"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="bem-events-delegated"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu91" resname="---id" restype="x-h4" xml:space="preserve" approved="yes"><source xml:lang="ru">Делегирование БЭМ-событий</source><target state="translated" xml:lang="en">Delegating BEM events</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="407" match-quality="89" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Делегирования БЭМ-событий<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Delegating BEM events<ept id="1">&lt;/a&gt;</ept>.</target>

<?id 1442822286809?></alt-trans><alt-trans origin="autoFuzzy" ts="479" match-quality="82" tool="Swordfish">
<source xml:lang="ru">Делегирование событий</source>
<target state="translated" xml:lang="en">Delegating events</target>

<?id 1442822286810?></alt-trans><alt-trans origin="autoFuzzy" ts="512" match-quality="86" tool="Swordfish">
<source xml:lang="ru">Делегирование DOM-событий</source>
<target state="translated" xml:lang="en">Delegating DOM events</target>
</alt-trans></trans-unit>
      <trans-unit id="tu92" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Делегирование БЭМ-событий означает, что блок подписывается на определенное БЭМ-событие <bpt id="1">&lt;strong&gt;</bpt>всех экземпляров<ept id="1">&lt;/strong&gt;</ept> блока с заданным именем <bpt id="2">&lt;strong&gt;</bpt>в пределах заданного контекста<ept id="2">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en">Delegating BEM events means that the block subscribes to a particular BEM event on <bpt id="1">&lt;strong&gt;</bpt>all instances<ept id="1">&lt;/strong&gt;</ept> of the block with the specified name <bpt id="2">&lt;strong&gt;</bpt>in the scope of the specified context<ept id="2">&lt;/strong&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu93" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Подписка на делегированные БЭМ-события выполняется с помощью статического метода класса блока <bpt id="1">&lt;code&gt;</bpt>MyBlock.on([ctx], event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Subscribing to delegated BEM events is performed using the<bpt id="1">&lt;code&gt;</bpt>MyBlock.on([ctx], event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept> static method of the block's class.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu94" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{jQuery} [ctx]<ept id="1">&lt;/code&gt;</ept> — DOM-узел, в пределах которого отслеживаются БЭМ-события (контейнер). Если не указан, в качестве контейнера используется весь документ.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>{jQuery} [ctx]<ept id="1">&lt;/code&gt;</ept> — The DOM node where BEM events are monitored (the container). If omitted, the entire document is used as the container.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu95" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{String} event<ept id="1">&lt;/code&gt;</ept> — имя БЭМ-события.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>{String} event<ept id="1">&lt;/code&gt;</ept> — Name of the BEM event.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu96" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{Object} [data]<ept id="1">&lt;/code&gt;</ept> — произвольные данные, передаваемые функции-обработчику.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>{Object} [data]<ept id="1">&lt;/code&gt;</ept> — Any data passed to the handler function.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu97" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{Function} handler<ept id="1">&lt;/code&gt;</ept> — функция-обработчик события.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>{Function} handler<ept id="1">&lt;/code&gt;</ept> — Event handler function.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu98" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{Object} [handlerCtx]<ept id="1">&lt;/code&gt;</ept> — контекст функции-обработчика события. Если отсутствует, функция-обработчик будет выполняться в контексте экземпляра блока, в котором произошло событие.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>{Object} [handlerCtx]<ept id="1">&lt;/code&gt;</ept> — Context of the event handler function. If omitted, the handler function executes in the context of the block instance where the event occurred.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu99" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> При инициализации экземпляров блока <bpt id="2">&lt;code&gt;</bpt>menu<ept id="2">&lt;/code&gt;</ept> выполняется подписка на БЭМ-событие <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> всех ссылок (экземпляров блока <bpt id="4">&lt;code&gt;</bpt>link<ept id="4">&lt;/code&gt;</ept>) в пределах DOM-узла блока (<bpt id="5">&lt;code&gt;</bpt>this.domElem<ept id="5">&lt;/code&gt;</ept>). В качестве контекста функции-обработчика передается текущий экземпляр блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> During initialization of the <bpt id="2">&lt;code&gt;</bpt>menu<ept id="2">&lt;/code&gt;</ept> block instance, it subscribes to the <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> BEM event on all links (instances of the <bpt id="4">&lt;code&gt;</bpt>link<ept id="4">&lt;/code&gt;</ept> block) in the scope of the block's DOM node (<bpt id="5">&lt;code&gt;</bpt>this.domElem<ept id="5">&lt;/code&gt;</ept>). The current block instance is passed as the handler function context.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu100" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('menu', ['i-bem__dom', 'link'], function(provide, BEMDOM, Link) {

provide(BEMDOM.decl(this.name,
    onSetMod : {
        'js' : {
            'inited' : function() {
                Link.on( // подписка на БЭМ-событие
                    this.domElem, // контейнер — DOM-узел экземпляра блока menu
                    'click', // БЭМ-событие
                    this._onLinkClick, // обработчик
                    this); // контекст обработчика — экземпляр блока menu
            },

            '' : function() {
                Link.un( // удаление подписки на БЭМ-событие
                    this.domElem,
                    'click',
                    this._onLinkClick,
                    this);
            }
        }
    },

    _onLinkClick : function(e) {
        var clickedLink = e.target; // экземпляр блока 'link', 
                                    // на котором произошло БЭМ-событие 'click'
    }
});

});<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>modules.define('menu', ['i-bem__dom', 'link'], function(provide, BEMDOM, Link) {

provide(BEMDOM.decl(this.name,
    onSetMod : {
        'js' : {
            'inited' : function() {
                Link.on( // subscribing to BEM event
                    this.domElem, // container — the DOM node of the 'menu' block instance
                    'click', // BEM event
                    this._onLinkClick, // handler
                    this); // handler context — an instance of the 'menu' block
            },

            '' : function() {
                Link.un( // unsubscribing from the BEM event
                    this.domElem,
                    'click',
                    this._onLinkClick,
                    this);
            }
        }
    },

    _onLinkClick : function(e) {
        var clickedLink = e.target; // instance of the 'link' block 
                                    // where the 'click' BEM event occurred
    }
});

});<ept id="1">&lt;/code&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu101" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Делегировать можно любые БЭМ-события, в том числе и события при изменении модификаторов.</source><target state="translated" xml:lang="en">Any BEM events can be delegated, including events for changes to modifiers.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu102" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;strong&gt;</bpt>Удаление подписки<ept id="2">&lt;/strong&gt;</ept> на делегированные БЭМ-события никогда не происходит автоматически. Всегда следует явно удалять подписку при<ph id="3">&lt;br /&gt;</ph>помощи статического метода блока <bpt id="4">&lt;code&gt;</bpt>un([ctx], event, [handler], [handlerCtx])<ept id="4">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;strong&gt;</bpt>Unsubscribing<ept id="2">&lt;/strong&gt;</ept> from delegated BEM events never happens automatically. Subscriptions should always be removed explicitly using<ph id="3">&lt;br /&gt;</ph>the block's static method <bpt id="4">&lt;code&gt;</bpt>un([ctx], event, [handler], [handlerCtx])<ept id="4">&lt;/code&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu103" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu104" resname="---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Объект БЭМ-события</source><target state="translated" xml:lang="en">BEM event object</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="503" match-quality="81" tool="Swordfish">
<source xml:lang="ru">Объект DOM-события</source>
<target state="translated" xml:lang="en">DOM event object</target>

<?id 1442852766227?></alt-trans></trans-unit>
      <trans-unit id="tu106" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu105" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При вызове функция-обработчик получает аргументом объект, описывающий БЭМ-событие. Класс объекта БЭМ-события <bpt id="1">&lt;code&gt;</bpt>events.Event<ept id="1">&lt;/code&gt;</ept> определен в <bpt id="2">&lt;a href="https://github.com/ymaps/modules" [#$tu106]&gt;</bpt>ym<ept id="2">&lt;/a&gt;</ept>-модуле <bpt id="3">&lt;a href="../../common.blocks/events/events.vanilla.js"&gt;</bpt><bpt id="4">&lt;code&gt;</bpt>events<ept id="4">&lt;/code&gt;</ept><ept id="3">&lt;/a&gt;</ept> библиотеки bem-core. Объект содержит поля:</source><target state="translated" xml:lang="en">When invoked, a handler function gets an argument with an object describing the BEM event. The BEM event object class <bpt id="1">&lt;code&gt;</bpt>events.Event<ept id="1">&lt;/code&gt;</ept> is defined in the <bpt id="2">&lt;a href="https://github.com/ymaps/modules" [#$tu106]&gt;</bpt>ym<ept id="2">&lt;/a&gt;</ept> module of <bpt id="3">&lt;a href="../../common.blocks/events/events.vanilla.js"&gt;</bpt><bpt id="4">&lt;code&gt;</bpt>events<ept id="4">&lt;/code&gt;</ept><ept id="3">&lt;/a&gt;</ept> in the bem-core library. This object contains the fields:</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu107" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>target<ept id="1">&lt;/code&gt;</ept> — экземпляр блока, в котором произошло БЭМ-событие.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>target<ept id="1">&lt;/code&gt;</ept> — Instance of the block where the BEM event occurred.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu108" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>data<ept id="1">&lt;/code&gt;</ept> — произвольные дополнительные данные, переданные как аргумент <bpt id="2">&lt;code&gt;</bpt>data<ept id="2">&lt;/code&gt;</ept> при подписке на БЭМ-событие.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>data<ept id="1">&lt;/code&gt;</ept> — Any additional data passed as the <bpt id="2">&lt;code&gt;</bpt>data<ept id="2">&lt;/code&gt;</ept> argument when subscribing to a BEM event.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu110" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://api.jquery.com/event.result/</source><target state="translated" xml:lang="en">https://api.jquery.com/event.result/</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu109" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>result<ept id="1">&lt;/code&gt;</ept> — последнее значение, возвращенное обработчиком данного события. Аналогично <bpt id="2">&lt;a href="https://api.jquery.com/event.result/" [#$tu110]&gt;</bpt>jQuery.Event.result<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>result<ept id="1">&lt;/code&gt;</ept> — The last value returned by this event's handler. The same as <bpt id="2">&lt;a href="https://api.jquery.com/event.result/" [#$tu110]&gt;</bpt>jQuery.Event.result<ept id="2">&lt;/a&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu112" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://api.jquery.com/event.type/</source><target state="translated" xml:lang="en">https://api.jquery.com/event.type/</target><?sid 1146766493-10?><alt-trans origin="autoFuzzy" ts="576" match-quality="82" tool="Swordfish">
<source xml:lang="ru">https://api.jquery.com/event.result/</source>
<target state="translated" xml:lang="en">https://api.jquery.com/event.result/</target>
</alt-trans></trans-unit>
      <trans-unit id="tu111" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>type<ept id="1">&lt;/code&gt;</ept> — тип события. Аналогично <bpt id="2">&lt;a href="https://api.jquery.com/event.type/" [#$tu112]&gt;</bpt>jQuery.Event.type<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>type<ept id="1">&lt;/code&gt;</ept> — The type of event. The same as <bpt id="2">&lt;a href="https://api.jquery.com/event.type/" [#$tu112]&gt;</bpt>jQuery.Event.type<ept id="2">&lt;/a&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
      <trans-unit id="tu113" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Подробнее о свойствах и методах объекта БЭМ-события читайте в <bpt id="1">&lt;a href="../../common.blocks/events/events.ru.md"&gt;</bpt>документации блока events<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">For more information about properties and methods of a BEM event object, see the <bpt id="1">&lt;a href="../../common.blocks/events/events.ru.md"&gt;</bpt>documentation for the 'events' block<ept id="1">&lt;/a&gt;</ept>.</target><?sid 1146766493-10?></trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-common.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="intro"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Общие сведения</source><target state="translated" xml:lang="en">Overview</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="intro-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu4" resname="---javascript-id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">БЭМ-методология и JavaScript</source><target state="translated" xml:lang="en">The BEM methodology and JavaScript</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В БЭМ-методологии веб-интерфейс строится из независимых<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;strong&gt;</bpt>блоков<ept id="2">&lt;/strong&gt;</ept> у которых могут быть <bpt id="3">&lt;strong&gt;</bpt>элементы<ept id="3">&lt;/strong&gt;</ept>. И блоки,<ph id="4">&lt;br /&gt;</ph>и элементы могут иметь состояния или особенности, описываемые <bpt id="5">&lt;strong&gt;</bpt>модификаторами<ept id="5">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en">In the BEM methodology, a web interface is built from independent<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;strong&gt;</bpt>blocks<ept id="2">&lt;/strong&gt;</ept>, which may have <bpt id="3">&lt;strong&gt;</bpt>elements<ept id="3">&lt;/strong&gt;</ept>. Both blocks<ph id="4">&lt;br /&gt;</ph>and elements can have states or characteristics described by <bpt id="5">&lt;strong&gt;</bpt>modifiers<ept id="5">&lt;/strong&gt;</ept>.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Работа веб-интерфейса обеспечивается несколькими <bpt id="1">&lt;strong&gt;</bpt>технологиями<ept id="1">&lt;/strong&gt;</ept><ph id="2">&lt;br /&gt;</ph>(HTML, CSS, JS и т.д.). Его реализация разбита на компоненты по блокам. Блок содержит набор <bpt id="3">&lt;strong&gt;</bpt>файлов технологий<ept id="3">&lt;/strong&gt;</ept>, составляющих аспекты его реализации:</source><target state="translated" xml:lang="en">A web interface uses various <bpt id="1">&lt;strong&gt;</bpt>technologies<ept id="1">&lt;/strong&gt;</ept><ph id="2">&lt;br /&gt;</ph>(HTML, CSS, JS, and others). Its implementation is divided into components by block. A block contains a set of <bpt id="3">&lt;strong&gt;</bpt>technology files<ept id="3">&lt;/strong&gt;</ept> that represent aspects of its implementation:</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>my-block.css<ept id="1">&lt;/code&gt;</ept> — внешний вид блока;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>my-block.css<ept id="1">&lt;/code&gt;</ept> — The block's appearance.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>my-block.bemhtml<ept id="1">&lt;/code&gt;</ept> — шаблоны для генерации HTML-представления блока;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>my-block.bemhtml<ept id="1">&lt;/code&gt;</ept> — Templates for generating HTML representations of the block.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>my-block.js<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;strong&gt;</bpt>динамическое поведение<ept id="2">&lt;/strong&gt;</ept> блока в браузере.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>my-block.js<ept id="1">&lt;/code&gt;</ept> — The block's <bpt id="2">&lt;strong&gt;</bpt>dynamic behavior<ept id="2">&lt;/strong&gt;</ept> in the browser.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Фреймворк <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> позволяет разложить клиентский JavaScript на компоненты в терминах БЭМ:</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> framework allows us to break down the client JavaScript into components in BEM terms:</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Блок<ept id="1">&lt;/strong&gt;</ept> — JS-компонент, описывающий логику работы однотипных элементов интерфейса. Например, все кнопки могут быть реализованы в виде блока <bpt id="2">&lt;code&gt;</bpt>button<ept id="2">&lt;/code&gt;</ept>. В этом случае, <bpt id="3">&lt;code&gt;</bpt>button.css<ept id="3">&lt;/code&gt;</ept> определяет внешний вид всех кнопок, а <bpt id="4">&lt;code&gt;</bpt>button.js<ept id="4">&lt;/code&gt;</ept> — логику их работы.<ph id="5">&lt;br /&gt;</ph>На каждой странице может размещаться более одного <bpt id="6">&lt;strong&gt;</bpt>экземпляра блока<ept id="6">&lt;/strong&gt;</ept> (например, кнопки). Каждому экземпляру блока соответствует JS-объект, в памяти браузера, хранящий его состояние. JS-объект содержит ссылку на DOM-узел, к которому привязан данный экземпляр блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Block<ept id="1">&lt;/strong&gt;</ept> — The JS component that describes the logic of same-type interface elements. For example, all buttons can be implemented as a <bpt id="2">&lt;code&gt;</bpt>button<ept id="2">&lt;/code&gt;</ept> block. In this case, <bpt id="3">&lt;code&gt;</bpt>button.css<ept id="3">&lt;/code&gt;</ept> defines how all buttons look, and <bpt id="4">&lt;code&gt;</bpt>button.js<ept id="4">&lt;/code&gt;</ept> defines how they work.<ph id="5">&lt;br /&gt;</ph>Each page can have more than one <bpt id="6">&lt;strong&gt;</bpt>block instance<ept id="6">&lt;/strong&gt;</ept> (such as buttons). Each block instance corresponds to a JS object in the browser memory that stores its state. The JS object contains a reference to the DOM node that this block instance is bound to.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Элементы<ept id="1">&lt;/strong&gt;</ept> — DOM-узлы, вложенные в DOM-узел блока, с атрибутом <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept>, указывающим на их роль в БЭМ-предметной области (имя блока и элемента). Элементы блока доступны через [JS-API][dom] экземпляра блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Elements<ept id="1">&lt;/strong&gt;</ept> — DOM nodes nested in the block's DOM node, with the <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> attribute pointing to their role in the BEM subject domain (the name of the block and element). Block elements are accessible via the block instance's [JS-API] [dom].</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Модификаторы<ept id="1">&lt;/strong&gt;</ept> — предоставляют информацию о состоянии блока и его элементов. Состояние модификаторов записывается в атрибуте <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> на DOM-узлах блока и элементов. Управление модификаторами производится через <bpt id="3">&lt;a href="i-bem-js-states.ru.md#mods-api"&gt;</bpt>JS-API<ept id="3">&lt;/a&gt;</ept> экземпляра блока.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Modifiers<ept id="1">&lt;/strong&gt;</ept> — Provide information about the state of a block and its elements. The state of modifiers is written in the <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> attribute on the DOM nodes of a block and elements. Modifiers are controlled using a block instance's <bpt id="3">&lt;a href="i-bem-js-states.ru.md#mods-api"&gt;</bpt>JS-API<ept id="3">&lt;/a&gt;</ept>.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-build"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="intro-build"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu15" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Сборка</source><target state="translated" xml:lang="en">Assembly</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Разработка в рамках БЭМ-методологии ведется модульно — каждый блок<ph id="1">&lt;br /&gt;</ph>программируется отдельно. Финальный исходный код веб-страниц<ph id="2">&lt;br /&gt;</ph>формируется из кода отдельных блоков с помощью процедур <bpt id="3">&lt;strong&gt;</bpt>сборки<ept id="3">&lt;/strong&gt;</ept>.</source><target state="translated" xml:lang="en">In the BEM methodology, development is modular — each block<ph id="1">&lt;br /&gt;</ph>is programmed separately. The final source code of web pages is generated<ph id="2">&lt;br /&gt;</ph>from the code of individual blocks using <bpt id="3">&lt;strong&gt;</bpt>assembly<ept id="3">&lt;/strong&gt;</ept> procedures.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В файловой системе блок удобно представлять в виде каталога, а реализацию блока в каждой из технологий — в виде отдельного файла:</source><target state="translated" xml:lang="en">In the file system, it is convenient to represent a block as a directory, and the block's implementation in each of the technologies as a separate file:</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu18" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>    desktop.blocks/
        my-block/
            my-block.css
            my-block.js
            my-block.bemhtml
            ...

    desktop.blocks/
        other-block/
            other-block.css
            other-block.js
            other-block.bemhtml
            ...<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>    desktop.blocks/
        my-block/
            my-block.css
            my-block.js
            my-block.bemhtml
            ...

    desktop.blocks/
        other-block/
            other-block.css
            other-block.js
            other-block.bemhtml
            ...<ept id="1">&lt;/code&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Для каждой веб-страницы код использованных на ней блоков может быть собран в единые файлы:</source><target state="translated" xml:lang="en">For each web page, the code of the blocks used on it can be put in the same types of files:</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu20" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>    desktop.bundles/
        index/
            index.html
            index.css
            index.js
            ...<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>    desktop.bundles/
        index/
            index.html
            index.css
            index.js
            ...<ept id="1">&lt;/code&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Существует два инструмента, поддерживающих БЭМ-предметную область, для сборки кода результирующих веб-страниц из отдельных описаний блоков:</source><target state="translated" xml:lang="en">There are two tools that support the BEM subject domain for assembling separate block descriptions into the code of resulting web pages:</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu23" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/tools/bem/</source><target state="translated" xml:lang="en">https://en.bem.info/tools/bem/</target><?sid -1778408309-11?><alt-trans origin="autoFuzzy" ts="171" match-quality="73" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/method/</source>
<target state="translated" xml:lang="en">https://en.bem.info/method/</target>

<?id 1442562289384?></alt-trans><alt-trans origin="autoFuzzy" ts="378" match-quality="72" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/forum/</source>
<target state="translated" xml:lang="en">https://en.bem.info/forum/</target>

<?id 1442822292556?></alt-trans></trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tools/bem/" [#$tu23]&gt;</bpt>bem-tools<ept id="1">&lt;/a&gt;</ept>;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="https://ru.bem.info/tools/bem/" [#$tu23]&gt;</bpt>bem-tools<ept id="1">&lt;/a&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu25" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/tools/bem/enb-bem/</source><target state="translated" xml:lang="en">https://en.bem.info/tools/bem/enb-bem/</target><?sid -1778408309-11?><alt-trans origin="autoFuzzy" ts="602" match-quality="78" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/tools/bem/</source>
<target state="translated" xml:lang="en">https://en.bem.info/tools/bem/</target>
</alt-trans></trans-unit>
      <trans-unit id="tu26" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/enb-make/enb-modules</source><target state="translated" xml:lang="en">https://github.com/enb-make/enb-modules</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu24" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tools/bem/enb-bem/" [#$tu25]&gt;</bpt>ENB<ept id="1">&lt;/a&gt;</ept> совместно с <bpt id="2">&lt;a href="https://github.com/enb-make/enb-modules" [#$tu26]&gt;</bpt>enb-modules<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="https://ru.bem.info/tools/bem/enb-bem/" [#$tu25]&gt;</bpt>ENB<ept id="1">&lt;/a&gt;</ept> together with <bpt id="2">&lt;a href="https://github.com/enb-make/enb-modules" [#$tu26]&gt;</bpt>enb-modules<ept id="2">&lt;/a&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Оба инструмента позволяют автоматизировать создание HTML-разметки для <bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>привязки JS-блоков<ept id="1">&lt;/a&gt;</ept> и <bpt id="2">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>передачи параметров экземпляру блока<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">Both tools automate the creation of HTML markup for <bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>binding JS blocks<ept id="1">&lt;/a&gt;</ept> and <bpt id="2">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>passing parameters to a block instance<ept id="2">&lt;/a&gt;</ept>.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu28" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-name"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="intro-name"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu29" resname="-i-bem.js---id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Почему i-bem.js так называется</source><target state="translated" xml:lang="en">Why i-bem.js is named this way</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В соответствии с БЭМ-методологией, базовая JS-библиотека БЭМ-платформы изначально разрабатывалась<ph id="1">&lt;br /&gt;</ph>как особый служебный блок. Такой подход позволяет работать с базовыми библиотеками так же, как<ph id="2">&lt;br /&gt;</ph>и с обычными блоками. В частности, структурировать код в терминах элементов и модификаторов и<ph id="3">&lt;br /&gt;</ph>гибко настраивать поведение библиотеки на разных уровнях переопределения.</source><target state="needs-review-translation" xml:lang="en">According to BEM methodology, the base JS library of the BEM platform was originally developed<ph id="1">&lt;br /&gt;</ph>as a special service block. This approach allows us to work with base libraries the same way as with<ph id="2">&lt;br /&gt;</ph>normal libraries. In particular, it allows us to structure code in terms of elements and modifiers and flexibly<ph id="3">&lt;br /&gt;</ph>configure the library behavior on various redefinition levels.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Служебным блокам в БЭМ было принято давать имена с префиксом <bpt id="1">&lt;code&gt;</bpt>i-<ept id="1">&lt;/code&gt;</ept>. Таким образом, имя <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept><ph id="3">&lt;br /&gt;</ph>читается как <bpt id="4">&lt;em&gt;</bpt>реализация блока <bpt id="5">&lt;code&gt;</bpt>i-bem<ept id="5">&lt;/code&gt;</ept> в технологии <bpt id="6">&lt;code&gt;</bpt>JS<ept id="6">&lt;/code&gt;</ept><ept id="4">&lt;/em&gt;</ept>.</source><target state="translated" xml:lang="en">Service blocks in BEM were conventionally given names with the <bpt id="1">&lt;code&gt;</bpt>i-<ept id="1">&lt;/code&gt;</ept> prefix. Thus, the name <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept><ph id="3">&lt;br /&gt;</ph>is read as <bpt id="4">&lt;em&gt;</bpt>an implementation of the <bpt id="5">&lt;code&gt;</bpt>i-bem<ept id="5">&lt;/code&gt;</ept> block in the <bpt id="6">&lt;code&gt;</bpt>JS<ept id="6">&lt;/code&gt;</ept> technology<ept id="4">&lt;/em&gt;</ept>.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu32" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-use"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a preserve="1" name="intro-use"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu33" resname="--i-bem.js-id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Как использовать i-bem.js</source><target state="translated" xml:lang="en">How to use i-bem.js</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu35" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/libs/bem-core/</source><target state="translated" xml:lang="en">https://en.bem.info/libs/bem-core/</target><?sid -1778408309-11?><alt-trans origin="autoFuzzy" ts="602" match-quality="74" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/tools/bem/</source>
<target state="translated" xml:lang="en">https://en.bem.info/tools/bem/</target>
</alt-trans></trans-unit>
      <trans-unit id="tu34" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Фреймворк <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> входит в состав библиотеки <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/" [#$tu35]&gt;</bpt>bem-core<ept id="2">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> framework is part of the <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/" [#$tu35]&gt;</bpt>bem-core<ept id="2">&lt;/a&gt;</ept> library.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu36" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Реализация <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> состоит из двух модулей:</source><target state="translated" xml:lang="en">The implementation of <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> consists of two modules:</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu38" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source><target state="translated" xml:lang="en">https://en.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu37" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Модуль <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu38]&gt;</bpt>i-bem<ept id="2">&lt;/a&gt;</ept><ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Базовая реализация JS-блока <bpt id="5">&lt;code&gt;</bpt>i-bem<ept id="5">&lt;/code&gt;</ept>, от которой наследуются все блоки в<ph id="6">&lt;br /&gt;</ph><bpt id="7">&lt;code&gt;</bpt>i-bem.js<ept id="7">&lt;/code&gt;</ept>. Блок <bpt id="8">&lt;code&gt;</bpt>i-bem<ept id="8">&lt;/code&gt;</ept> написан с расчетом на использование в любом<ph id="9">&lt;br /&gt;</ph>JS-окружении: как на клиенте, так и на сервере например, в<ph id="10">&lt;br /&gt;</ph>Node.js).</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>The <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu38]&gt;</bpt>i-bem<ept id="2">&lt;/a&gt;</ept> module<ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Base implementation of the <bpt id="5">&lt;code&gt;</bpt>i-bem<ept id="5">&lt;/code&gt;</ept> JS block, which all the blocks in<ph id="6">&lt;br /&gt;</ph><bpt id="7">&lt;code&gt;</bpt>i-bem.js<ept id="7">&lt;/code&gt;</ept> inherit from. The <bpt id="8">&lt;code&gt;</bpt>i-bem<ept id="8">&lt;/code&gt;</ept> block is written for use in any of the<ph id="9">&lt;br /&gt;</ph>JS environments: both on the client and on the server (for example, in<ph id="10">&lt;br /&gt;</ph>Node.js).</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu40" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source><target state="translated" xml:lang="en">https://en.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu39" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Модуль <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu40]&gt;</bpt>i-bem__dom<ept id="2">&lt;/a&gt;</ept><ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Базовая реализация блока, привязанного к DOM-узлу.<ph id="5">&lt;br /&gt;</ph>Рассчитан на использование на клиенте, опирается на работу браузеров с DOM. Зависит от <bpt id="6">&lt;code&gt;</bpt>jQuery<ept id="6">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>The <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu40]&gt;</bpt>i-bem__dom<ept id="2">&lt;/a&gt;</ept> module<ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>The base implementation of a block bound to a DOM node.<ph id="5">&lt;br /&gt;</ph>Intended for use on the client, and relies on browsers working with DOM. Depends on <bpt id="6">&lt;code&gt;</bpt>jQuery<ept id="6">&lt;/code&gt;</ept>.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu41" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Зависимости:</source><target state="translated" xml:lang="en">Dependencies:</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu42" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">jQuery (только для модуля <bpt id="1">&lt;code&gt;</bpt>i-bem__dom<ept id="1">&lt;/code&gt;</ept>). При использовании <bpt id="2">&lt;code&gt;</bpt>bem-core<ept id="2">&lt;/code&gt;</ept> отдельная установка<ph id="3">&lt;br /&gt;</ph> jQuery не требуется.</source><target state="translated" xml:lang="en">jQuery (only for the <bpt id="1">&lt;code&gt;</bpt>i-bem__dom<ept id="1">&lt;/code&gt;</ept> module). When using <bpt id="2">&lt;code&gt;</bpt>bem-core<ept id="2">&lt;/code&gt;</ept>, separate installation<ph id="3">&lt;br /&gt;</ph>of jQuery is not necessary.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu44" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://github.com/ymaps/modules</source><target state="translated" xml:lang="en">https://github.com/ymaps/modules</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu45" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/tools/bem/</source><target state="translated" xml:lang="en">https://en.bem.info/tools/bem/</target><?sid -1778408309-11?><alt-trans origin="autoFuzzy" ts="171" match-quality="73" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/method/</source>
<target state="translated" xml:lang="en">https://en.bem.info/method/</target>

<?id 1442562292266?></alt-trans><alt-trans origin="autoFuzzy" ts="378" match-quality="72" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/forum/</source>
<target state="translated" xml:lang="en">https://en.bem.info/forum/</target>

<?id 1442822295000?></alt-trans><alt-trans origin="autoFuzzy" ts="604" match-quality="78" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/tools/bem/enb-bem/</source>
<target state="translated" xml:lang="en">https://en.bem.info/tools/bem/enb-bem/</target>
</alt-trans><alt-trans origin="autoFuzzy" ts="614" match-quality="74" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/libs/bem-core/</source>
<target state="translated" xml:lang="en">https://en.bem.info/libs/bem-core/</target>
</alt-trans></trans-unit>
      <trans-unit id="tu43" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Модульная система <bpt id="1">&lt;a href="https://github.com/ymaps/modules" [#$tu44]&gt;</bpt>ym/modules<ept id="1">&lt;/a&gt;</ept>. При использовании<ph id="2">&lt;br /&gt;</ph> <bpt id="3">&lt;a href="https://ru.bem.info/tools/bem/" [#$tu45]&gt;</bpt>bem-tools<ept id="3">&lt;/a&gt;</ept> с технологией <bpt id="4">&lt;code&gt;</bpt>.browser.js<ept id="4">&lt;/code&gt;</ept> (и производных от нее)<ph id="5">&lt;br /&gt;</ph> эта зависимость удовлетворяется автоматически.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;a href="https://github.com/ymaps/modules" [#$tu44]&gt;</bpt>ym/modules<ept id="1">&lt;/a&gt;</ept> module system. When using<ph id="2">&lt;br /&gt;</ph> <bpt id="3">&lt;a href="https://ru.bem.info/tools/bem/" [#$tu45]&gt;</bpt>bem-tools<ept id="3">&lt;/a&gt;</ept> with <bpt id="4">&lt;code&gt;</bpt>.browser.js<ept id="4">&lt;/code&gt;</ept> technology (and derivatives of it),<ph id="5">&lt;br /&gt;</ph> this dependency is satisfied automatically.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu47" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.bem.info/tutorials/project-stub/</source><target state="translated" xml:lang="en">https://en.bem.info/tutorials/project-stub/</target><?sid -1778408309-11?><alt-trans origin="autoFuzzy" ts="385" match-quality="77" tool="Swordfish">
<source xml:lang="ru">https://ru.bem.info/tutorials/start-with-project-stub/</source>
<target state="translated" xml:lang="en">https://en.bem.info/tutorials/start-with-project-stub/</target>

<?id 1442822295250?></alt-trans></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Можно использовать <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> как часть полного стека<ph id="2">&lt;br /&gt;</ph>БЭМ-инструментов. В этом случае свой проект удобно создавать на основе<ph id="3">&lt;br /&gt;</ph>шаблонного репозитория <bpt id="4">&lt;a href="https://ru.bem.info/tutorials/project-stub/" [#$tu47]&gt;</bpt>project-stub<ept id="4">&lt;/a&gt;</ept>, в котором настроена автоматическая установка зависимых библиотек и сборка.</source><target state="translated" xml:lang="en">You can use <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> as part of the full stack<ph id="2">&lt;br /&gt;</ph>of BEM tools. In this case, it is convenient to base your project on the<ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;a href="https://ru.bem.info/tutorials/project-stub/" [#$tu47]&gt;</bpt>project-stub<ept id="4">&lt;/a&gt;</ept> template repository, where automatic installation of dependent libraries and assembly is set up.</target><?sid -1778408309-11?></trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если не планируется использование других технологий БЭМ-платформы, достаточно поместить код библиотеки <bpt id="1">&lt;code&gt;</bpt>bem-core<ept id="1">&lt;/code&gt;</ept> в существующий проект.</source><target state="translated" xml:lang="en">If you aren't planning to use other technologies of the BEM platform, you can just put the <bpt id="1">&lt;code&gt;</bpt>bem-core<ept id="1">&lt;/code&gt;</ept> library code in an existing project.</target><?sid -1778408309-11?></trans-unit>
    </body>
  </file>
</xliff>