<?xml version="1.0" encoding="UTF-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" version="1.2">
  <file original="common.docs/i-bem-js/i-bem-js-params.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="data-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="----id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Передача параметров экземпляру блока</source>
</trans-unit>
      <trans-unit id="tu3" resname="---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Синтаксис передачи параметров</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Параметры блока хранятся в атрибуте <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> HTML-элемента и передаются блоку в момент инициализации. Параметры позволяют влиять на поведение конкретного экземпляра блока, привязанного к данному HTML-элементу.</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Значение атрибута <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> должно содержать валидный JSON описвающий хэш вида:</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve">
<source xml:lang="ru">ключ — <bpt id="1">&lt;code&gt;</bpt>{String}<ept id="1">&lt;/code&gt;</ept>, имя блока;</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve">
<source xml:lang="ru">значение — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>, параметры данного блока. Если данному экземпляру блока не требуются<ph id="2">&lt;br /&gt;</ph>параметры, указывается пустой хэш <bpt id="3">&lt;code&gt;</bpt>{}<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Если к HTML-элементу <bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md#html-mixes"&gt;</bpt>привязано несколько JS-блоков<ept id="1">&lt;/a&gt;</ept>, в значении атрибута <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> должны содержаться параметры для каждого из них:</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block another-block i-bem" data-bem='{ "my-block": {}, "another-block": {} }'&gt;&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Параметры элемента<ept id="1">&lt;/strong&gt;</ept> передаются через атрибута <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> DOM-узла элемента. Например, передать параметры элементу <bpt id="3">&lt;code&gt;</bpt>my-elem<ept id="3">&lt;/code&gt;</ept> блока <bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept> можно так:</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;
    &lt;div class="my-block__my-elem" data-bem='{ "my-block__my-elem": {} }'&gt;&lt;/div&gt;
&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu13" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Указание имени блока в параметрах позволяет:</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-li" xml:space="preserve">
<source xml:lang="ru">ускорить инициализацию блоков – не нужно парсить значение атрибута <bpt id="1">&lt;code&gt;</bpt>class<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu15" restype="x-li" xml:space="preserve">
<source xml:lang="ru">размещать несколько блоков на одном HTML-элементе без необходимости множить его атрибуты.</source>
</trans-unit>
      <trans-unit id="tu16" resname="------id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Доступ к параметрам из экземпляра блока</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Доступ к параметрам из экземпляра блока можно получить через поле <bpt id="1">&lt;code&gt;</bpt>this.params<ept id="1">&lt;/code&gt;</ept>. Его значение – хэш параметров из атрибута <bpt id="2">&lt;code&gt;</bpt>data-bem<ept id="2">&lt;/code&gt;</ept> DOM-элемента блока (<bpt id="3">&lt;code&gt;</bpt>this.domElem<ept id="3">&lt;/code&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Например, получить доступ к параметрам блока <bpt id="1">&lt;code&gt;</bpt>my-block<ept id="1">&lt;/code&gt;</ept> можно так:</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem" data-bem='{ "my-block": { "foo" : "bar" } }'&gt;&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu20" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                console.log(this.params); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для получения параметров элемента служит метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>elemParams<ept id="1">&lt;/code&gt;</ept>. Он принимает аргументом строку с именем элемента или его jQuery-объект. Возвращает хэш параметров элемента.</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;
    &lt;div class="my-block__my-elem" data-bem='{ "my-block__my-elem": { "foo" : "bar" } }'&gt;&lt;/div&gt;
&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited': function() {
                    console.log(this.elemParams('my-elem')); // { foo : 'bar' }
            }
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-dom.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="--dom--id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Работа с DOM-деревом</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="domElem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu4" resname="dom----id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">DOM-узел экземпляра блока</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В контексте экземпляра блока с DOM-представлением зарезервировано поле <bpt id="1">&lt;code&gt;</bpt>this.domElem<ept id="1">&lt;/code&gt;</ept>, содержащее jQuery-объект со ссылками на все DOM-узлы, с которыми связан данный экземпляр.</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="elem-api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu7" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Элементы</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">БЭМ-элементы блоков представлены в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> как DOM-узлы, вложенные в DOM-узел экземпляра блока.</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для обращения к DOM-узлам элементов и работы с их модификаторами, следует использовать API экземпляра блока:</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Кэширующий доступ: <bpt id="1">&lt;code&gt;</bpt>elem(elems, [modName], [modVal])<ept id="1">&lt;/code&gt;</ept>. Элемент,<ph id="2">&lt;br /&gt;</ph>полученный таким образом, не требуется сохранять в переменную.</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        this.elem('inner').text('Текст ссылки');
        /* ... */
        this.elem('inner').text('Другой текст');
    }
);<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Некэширующий доступ: <bpt id="1">&lt;code&gt;</bpt>findElem(elems, [modName], [modVal])<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('link', {
    setInnerText: function() {
        var inner = this.findElem('inner');
        inner.text('Текст ссылки');
        /* ... */
        inner.text('Другой текст');
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При <bpt id="1">&lt;a href="#dynamic"&gt;</bpt>динамическом добавлении и удалении элементов блока<ept id="1">&lt;/a&gt;</ept> может<ph id="2">&lt;br /&gt;</ph>потребоваться очистить кэш элементов. Для этого служит метод <bpt id="3">&lt;code&gt;</bpt>dropElemCache('elements')<ept id="3">&lt;/code&gt;</ept>. Он принимает строку – разделенный пробелами список имен элементов, кэш которых нужно сбросить.</source>
</trans-unit>
      <trans-unit id="tu15" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('attach', {
    clear: function() {
        BEMDOM.destruct(this.elem('control'));
        BEMDOM.destruct(this.elem('file'));
        return this.dropElemCache('control file');
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api-find"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu17" resname="----dom--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Поиск экземпляров блоков в DOM-дереве</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Обращение к другому блоку в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> выполняется из текущего блока,<ph id="2">&lt;br /&gt;</ph>размещенного на определенном узле DOM-дерева. Поиск других блоков в<ph id="3">&lt;br /&gt;</ph>DOM-дереве может вестись по трем направлениям (осям) относительно<ph id="4">&lt;br /&gt;</ph>DOM-узла текущего блока:</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Внутри блока<ept id="1">&lt;/strong&gt;</ept> — на DOM-узлах, вложенных в DOM-узел текущего блока. Вспомогательные методы: <bpt id="2">&lt;code&gt;</bpt>findBlocksInside([elem], block)<ept id="2">&lt;/code&gt;</ept> и <bpt id="3">&lt;code&gt;</bpt>findBlockInside([elem], block)<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Снаружи блока<ept id="1">&lt;/strong&gt;</ept> — на DOM-узлах, потомком которых является DOM-узел<ph id="2">&lt;br /&gt;</ph>текущего блока. Вспомогательные методы: <bpt id="3">&lt;code&gt;</bpt>findBlocksOutside([elem], block)<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>findBlockOutside([elem], block)<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>На себе<ept id="1">&lt;/strong&gt;</ept> — на том же DOM-узле, на котором размещен текущий блок. Это актуально в случае <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#html-mixes"&gt;</bpt>размещения нескольких JS-блоков на одном DOM-узле<ept id="2">&lt;/a&gt;</ept> (микс). Вспомогательные методы: <bpt id="3">&lt;code&gt;</bpt>findBlocksOn([elem], block)<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>findBlockOn([elem], block)<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Сигнатура вспомогательных методов идентична:</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>[elem]<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|jQuery}<ept id="2">&lt;/code&gt;</ept> – имя или DOM-узел элемента блока.</source>
</trans-unit>
      <trans-unit id="tu24" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>block<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|Object}<ept id="2">&lt;/code&gt;</ept> – имя или описание искомого блока. Описанием служит хеш вида <bpt id="3">&lt;code&gt;</bpt>{ block : 'name', modName : 'foo', modVal : 'bar' }<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu25" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Вспомогательные методы для поиска парные. Различаются возвращаемым значением:</source>
</trans-unit>
      <trans-unit id="tu26" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>findBlocks&lt;Direction&gt;<ept id="1">&lt;/code&gt;</ept> – возвращает массив найденных блоков.</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>findBlock&lt;Direction&gt;<ept id="1">&lt;/code&gt;</ept> – возвращает первый найденный блок.</source>
</trans-unit>
      <trans-unit id="tu28" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример<ept id="1">&lt;/strong&gt;</ept>: При переключении модификатора <bpt id="2">&lt;code&gt;</bpt>disabled<ept id="2">&lt;/code&gt;</ept> экземпляр блока<ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;code&gt;</bpt>attach<ept id="4">&lt;/code&gt;</ept> находит вложенный в него блок <bpt id="5">&lt;code&gt;</bpt>button<ept id="5">&lt;/code&gt;</ept> и переключает его<ph id="6">&lt;br /&gt;</ph>модификатор <bpt id="7">&lt;code&gt;</bpt>disabled<ept id="7">&lt;/code&gt;</ept> в то же значение, которое получил сам:</source>
</trans-unit>
      <trans-unit id="tu29" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('attach', ['i-bem__dom', 'button'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod: {
        'disabled': function(modName, modVal) {
            this.findBlockInside('button').setMod(modName, modVal);
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Не используйте jQuery-селекторы для поиска блоков и элементов.<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>i-bem.js<ept id="3">&lt;/code&gt;</ept> предоставляет высокоуровневое API для доступа к DOM-узлам блоков и элементов. Прямое обращение к DOM-дереву делает код менее устойчивым к изменениям БЭМ-библиотек и может привести к возникновению сложно обнаруживаемых ошибок.</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dynamic"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu32" resname="------dom--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Динамическое обновление блоков и элементов в DOM-дереве</source>
</trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В современных интерфейсах зачастую необходимо создавать новые<ph id="1">&lt;br /&gt;</ph>фрагменты DOM-дерева и заменять старые в процессе работы (AJAX). В<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>i-bem.js<ept id="3">&lt;/code&gt;</ept> предусмотрены следующие функции для добавления и замены<ph id="4">&lt;br /&gt;</ph>фрагментов DOM-дерева.</source>
</trans-unit>
      <trans-unit id="tu34" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Добавить DOM-фрагмент:</source>
</trans-unit>
      <trans-unit id="tu36" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>append<ept id="1">&lt;/code&gt;</ept> — в конец указанного контекста;</source>
</trans-unit>
      <trans-unit id="tu37" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>prepend<ept id="1">&lt;/code&gt;</ept> — в начало указанного контекста;</source>
</trans-unit>
      <trans-unit id="tu38" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>before<ept id="1">&lt;/code&gt;</ept> — перед указанным контекстом;</source>
</trans-unit>
      <trans-unit id="tu39" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>after<ept id="1">&lt;/code&gt;</ept> — после указанного контекста;</source>
</trans-unit>
      <trans-unit id="tu41" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Заместить DOM-фрагмент:</source>
</trans-unit>
      <trans-unit id="tu43" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>update<ept id="1">&lt;/code&gt;</ept> — внутри указанного контекста;</source>
</trans-unit>
      <trans-unit id="tu44" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu45" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>replace<ept id="1">&lt;/code&gt;</ept> — заменить указанный контекст новым DOM-фрагментом.</source>
</trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Все функции автоматически выполняют <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-ajax"&gt;</bpt>инициализацию блоков на обновленном фрагменте DOM-дерева<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu48" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/technology/bemhtml/current/intro/</source>
</trans-unit>
      <trans-unit id="tu49" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu50" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/technology/bemjson/current/bemjson/</source>
</trans-unit>
      <trans-unit id="tu47" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы упростить создание БЭМ-сущностей на обновляемых фрагментах<ph id="1">&lt;br /&gt;</ph>DOM-дерева, можно использовать шаблонизатор<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;a href="https://ru.bem.info/technology/bemhtml/current/intro/" [#$tu48]&gt;</bpt>BEMHTML<ept id="3">&lt;/a&gt;</ept>, подключив<ph id="4">&lt;br /&gt;</ph>его в качестве <bpt id="5">&lt;a href="https://github.com/ymaps/modules" [#$tu49]&gt;</bpt>ym<ept id="5">&lt;/a&gt;</ept>-модуля. БЭМ-сущности описываются в формате<ph id="6">&lt;br /&gt;</ph><bpt id="7">&lt;a href="https://ru.bem.info/technology/bemjson/current/bemjson/" [#$tu50]&gt;</bpt>BEMJSON<ept id="7">&lt;/a&gt;</ept><ph id="8">&lt;br /&gt;</ph>непосредственно в коде блока. Функция <bpt id="9">&lt;code&gt;</bpt>BEMHTML.apply<ept id="9">&lt;/code&gt;</ept> генерирует<ph id="10">&lt;br /&gt;</ph>HTML-элементы по BEMJSON-декларации в соответствии с правилами<ph id="11">&lt;br /&gt;</ph>именования БЭМ.</source>
</trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Метод <bpt id="2">&lt;code&gt;</bpt>_updateFileElem<ept id="2">&lt;/code&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>attach<ept id="3">&lt;/code&gt;</ept> удаляет элемент <bpt id="4">&lt;code&gt;</bpt>file<ept id="4">&lt;/code&gt;</ept>, если он существовал, и создает новый элемент с помощью функции <bpt id="5">&lt;code&gt;</bpt>BEMHTML.apply<ept id="5">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu52" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define(
    'attach',
    ['BEMHTML', 'strings__escape', 'i-bem__dom'],
    function(provide, BEMHTML, escape, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    _updateFileElem : function() {
        var fileName = extractFileNameFromPath(this.getVal());
        this.elem('file').length &amp;&amp; BEMDOM.destruct(this.elem('file'));
        BEMDOM.append(
            this.domElem,
            BEMHTML.apply({
                block : 'attach',
                elem : 'file',
                content : [
                    {
                        elem : 'icon',
                        mods : { file : extractExtensionFromFileName(fileName) }
                    },
                    { elem : 'text', content : escape.html(fileName) },
                    { elem : 'clear' }
                ]
            }));
        return this.dropElemCache('file');
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-decl.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Декларация блока</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">JS-реализация блока описывает поведение определенного класса элементов веб-интерфейса. В конкретных интерфейсах каждый блок может быть представлен несколькими экземплярами.<ph id="1">&lt;br /&gt;</ph>Экземпляр блока реализует функциональность своего класса и имеет собственное, независимое состояние.</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В терминах парадигмы <bpt id="1">&lt;strong&gt;</bpt>объектно-ориентированного программирования<ept id="1">&lt;/strong&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve">
<source xml:lang="ru">блок — класс;</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve">
<source xml:lang="ru">экземпляр блока — экземпляр класса.</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В соответствии с ООП, вся функциональность блока реализуется модульно в методах класса <bpt id="1">&lt;em&gt;</bpt>(=блока)<ept id="1">&lt;/em&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Методы блока подразделяются на:</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve">
<source xml:lang="ru">методы экземпляра блока;</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-li" xml:space="preserve">
<source xml:lang="ru">статические методы.</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Код блока в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> принято называть <bpt id="2">&lt;strong&gt;</bpt>декларацией<ept id="2">&lt;/strong&gt;</ept>, чтобы подчеркнуть принятый<ph id="3">&lt;br /&gt;</ph>в БЭМ декларативный стиль программирования.</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Поведение блока программируется в декларативном стиле в виде утверждений: <bpt id="1">&lt;code&gt;</bpt>набор условий<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;code&gt;</bpt>реакция блока<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="decl-syntax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu14" resname="--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Синтаксис декларации</source>
</trans-unit>
      <trans-unit id="tu15" resname="--dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Блоки с DOM-представлением</source>
</trans-unit>
      <trans-unit id="tu16" resname="-----id" restype="x-h5" xml:space="preserve">
<source xml:lang="ru">Объявление нового блока без родителя</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы задекларировать новый JS-блок <bpt id="1">&lt;strong&gt;</bpt>с DOM-представлением<ept id="1">&lt;/strong&gt;</ept> (привязанный к HTML-элементу), нужно воспользоваться методом <bpt id="2">&lt;code&gt;</bpt>decl<ept id="2">&lt;/code&gt;</ept> <bpt id="3">&lt;a href="https://github.com/ymaps/modules" [#$tu18]&gt;</bpt>ym<ept id="3">&lt;/a&gt;</ept>-модуля <bpt id="4">&lt;code&gt;</bpt>i-bem__dom<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Метод <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> принимает аргументы:</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Описание блока <bpt id="1">&lt;code&gt;</bpt>{String}<ept id="1">&lt;/code&gt;</ept> или <bpt id="2">&lt;code&gt;</bpt>{Object}<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Методы экземпляра блока — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Статические методы — <bpt id="1">&lt;code&gt;</bpt>{Object}<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Объявленные методы будут применяться во всех экземплярах блока независимо от их состояний (модификаторов).</source>
</trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Декларация методов для блока <bpt id="2">&lt;code&gt;</bpt>button<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu25" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('button', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    })
);

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Поле контекста <bpt id="1">&lt;code&gt;</bpt>ym<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>this.name<ept id="2">&lt;/code&gt;</ept>, передаваемое первым аргументом методу <bpt id="3">&lt;code&gt;</bpt>BEMDOM.decl<ept id="3">&lt;/code&gt;</ept>, содержит ссылку на имя блока, указанное первым аргументом <bpt id="4">&lt;code&gt;</bpt>modules.define<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu28" resname="--dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Блоки без DOM-представления</source>
</trans-unit>
      <trans-unit id="tu30" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu29" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для декларации блоков без DOM-представления служит метод <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;a href="https://github.com/ymaps/modules" [#$tu30]&gt;</bpt>ym<ept id="2">&lt;/a&gt;</ept>-модуля <bpt id="3">&lt;code&gt;</bpt>i-bem<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Метод принимает те же параметры, что и метод <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> модуля <bpt id="2">&lt;code&gt;</bpt>i-bem__dom<ept id="2">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu32" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem'], function(provide, BEM) {

provide(BEM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    })
);

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu34" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Оформлять инфраструктурный код в виде блока без DOM-представления удобно, если в нем планируется использовать API БЭМ-блоков (состояния, выражаемые модификаторами, БЭМ-события и<ph id="2">&lt;br /&gt;</ph>т. п.). Если использовать БЭМ-предметную область не планируется,<ph id="3">&lt;br /&gt;</ph>инфраструктурный код можно оформлять в виде <bpt id="4">&lt;a href="https://github.com/ymaps/modules" [#$tu34]&gt;</bpt>ym<ept id="4">&lt;/a&gt;</ept>-модуля.</source>
</trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu36" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('router', function(provide) {

provide({
    route : function() { /* ... */ }
});

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu37" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu38" resname="--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Наследование блока</source>
</trans-unit>
      <trans-unit id="tu39" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Одна и та же функциональность может быть востребована в нескольких блоках проекта.<ph id="1">&lt;br /&gt;</ph>Например, разные блоки могут обращаться за данными к бэкенду, используя AJAX,<ph id="2">&lt;br /&gt;</ph>или совершать однотипные операции с DOM-деревом и т.д. Чтобы избежать ненужных повторов в коде, общую функциональность можно инкапсулировать в виде модулей, а затем добавлять к блокам.</source>
</trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Наследование позволяет повторно использовать функциональность блока, расширяя ее новой логикой.<ph id="1">&lt;br /&gt;</ph>В <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> доступно несколько механизмов наследования. Выбор конкретного механизма зависит от специфики создаваемого блока.</source>
</trans-unit>
      <trans-unit id="tu41" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-simple"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu42" resname="--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Простое наследование</source>
</trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В случае простого наследования создаваемый блок объявляется как наследник существующего. Для этого нужно:</source>
</trans-unit>
      <trans-unit id="tu44" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Указать базовый блок в зависимостях модульной системы.</source>
</trans-unit>
      <trans-unit id="tu45" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Передать ссылку на базовый блок в специальном поле <bpt id="1">&lt;code&gt;</bpt>baseBlock<ept id="1">&lt;/code&gt;</ept> декларации.</source>
</trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Например, блок <bpt id="1">&lt;code&gt;</bpt>bblock<ept id="1">&lt;/code&gt;</ept> наследуется от блока <bpt id="2">&lt;code&gt;</bpt>ablock<ept id="2">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu47" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {}));

});

modules.define('bblock', ['i-bem__dom', 'ablock'], function(provide, BEMDOM, ABlock) {

provide(BEMDOM.decl({ block : this.name, baseBlock : ABlock }));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Такой механизм позволяет использовать методы базового блока внутри производного.<ph id="1">&lt;br /&gt;</ph>Для вызова одноименных методов базового блока служит <bpt id="2">&lt;a href="i-bem-js-context.ru.md#spec-fields"&gt;</bpt>вспомогательное свойство<ept id="2">&lt;/a&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>this.__base<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> В <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept> можно создавать цепочки наследования – блок наследуется от другого,<ph id="3">&lt;br /&gt;</ph>который, в свою очередь, наследуется от третьего и т.д.</source>
</trans-unit>
      <trans-unit id="tu50" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-over"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu51" resname="--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Доопределение блока</source>
</trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы создать вариант уже существующего блока с измененной или дополненной функциональностью, можно <bpt id="1">&lt;strong&gt;</bpt>доопределить<ept id="1">&lt;/strong&gt;</ept> базовый блок на <bpt id="2">&lt;em&gt;</bpt>уровне переопределения<ept id="2">&lt;/em&gt;</ept> проекта.</source>
</trans-unit>
      <trans-unit id="tu53" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для этого в проекте создается декларация нового блока с тем же именем, что и у базового. В результате блоку будет доступна вся функциональностью базового. Реализация одноименных методов и модификаторов, при этом, будет взята из новой декларации.</source>
</trans-unit>
      <trans-unit id="tu54" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({})); // Доопределяем базовый блок

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu55" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Такая схема наследования часто используется при работе с библиотечными блоками.</source>
</trans-unit>
      <trans-unit id="tu56" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-over-modifier"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu57" resname="----id" restype="x-h5" xml:space="preserve">
<source xml:lang="ru">Добавление модификатора к блоку</source>
</trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В соответствии с БЭМ-методологией состояния блока должны описываться <bpt id="1">&lt;a href="i-bem-js-states.ru.md#modifiers"&gt;</bpt>модификаторами<ept id="1">&lt;/a&gt;</ept>.<ph id="2">&lt;br /&gt;</ph>Поэтому чтобы расширить функциональность блока часто нужно реализовать поддержку новых модификаторов.</source>
</trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для добавления модификатора необходимо передать методу <bpt id="1">&lt;code&gt;</bpt>decl<ept id="1">&lt;/code&gt;</ept> доопределяемого блока:</source>
</trans-unit>
      <trans-unit id="tu60" restype="x-li" xml:space="preserve">
<source xml:lang="ru">хэш с ключами <bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> и <bpt id="2">&lt;code&gt;</bpt>modVal<ept id="2">&lt;/code&gt;</ept>. Значением для <bpt id="3">&lt;code&gt;</bpt>modName<ept id="3">&lt;/code&gt;</ept> служит строка – имя модификатора. Значением <bpt id="4">&lt;code&gt;</bpt>modVal<ept id="4">&lt;/code&gt;</ept> – строка со значением модификатора.</source>
</trans-unit>
      <trans-unit id="tu61" restype="x-li" xml:space="preserve">
<source xml:lang="ru">хэш методов, которые будут доступны для блока с соответствующим модификатором. При наличии одноименных методов и модификаторов, будет использована их реализация из хэша.</source>
</trans-unit>
      <trans-unit id="tu62" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('ablock', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок

});

modules.define('ablock', function(provide, ABlock) {

provide(ABlock.decl({ modName : 'm1', modVal : 'v1' }, {})); // Доопределяем базовый блок с модификтором _m1_v1

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu63" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;a href="./i-bem-js-context.ru.md"&gt;</bpt>Cтатические методы<ept id="2">&lt;/a&gt;</ept> блока будут доступны всем его экземплярам <bpt id="3">&lt;em&gt;</bpt>вне зависимости от значений модификаторов<ept id="3">&lt;/em&gt;</ept>.<ph id="4">&lt;br /&gt;</ph>Модификаторы — это свойства экземпляра блока, а статические методы принадлежат классу<ph id="5">&lt;br /&gt;</ph>блока и не учитывают состояния модификаторов.</source>
</trans-unit>
      <trans-unit id="tu64" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-mixins"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu65" resname="--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Блоки-миксы</source>
</trans-unit>
      <trans-unit id="tu66" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> для добавления востребованной функциональности к блокам используется специальный<ph id="2">&lt;br /&gt;</ph>тип блоков – <bpt id="3">&lt;strong&gt;</bpt>блоки-миксы<ept id="3">&lt;/strong&gt;</ept>. Главная особенность блоков-миксов состоит в том, что они не участвуют в цепочке наследования. Это позволяет примешивать реализованную в них функциональность к другим блокам без риска нарушить их <bpt id="4">&lt;a href="i-bem-js-context.ru.md#spec-fields"&gt;</bpt>связи с родительскими блоками<ept id="4">&lt;/a&gt;</ept> (<bpt id="5">&lt;code&gt;</bpt>this.__base<ept id="5">&lt;/code&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu67" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-mixins-declwithmix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu68" resname="---id" restype="x-h5" xml:space="preserve">
<source xml:lang="ru">Примешивание блока-микса</source>
</trans-unit>
      <trans-unit id="tu69" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы примешать к блоку один или несколько блоков-миксов, необходимо в декларации блока присвоить значение опциональному полю <bpt id="1">&lt;code&gt;</bpt>baseMix<ept id="1">&lt;/code&gt;</ept>. Значением служит массив строк – имен примешиваемых блоков-миксов:</source>
</trans-unit>
      <trans-unit id="tu70" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom', 'foo', 'bar'], function(provide, BEMDOM) {

provide(BEMDOM.decl({ block : this.name, baseMix : ['foo', 'bar']},
    { /* методы экземпляра */ },
    { /* статические методы */ }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu71" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="inher-mixins-mixindecl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu72" resname="---id" restype="x-h5" xml:space="preserve">
<source xml:lang="ru">Декларация блока-микса</source>
</trans-unit>
      <trans-unit id="tu73" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В качестве блоков-миксов можно использовать только блоки, созданные с помощью <bpt id="1">&lt;code&gt;</bpt>declMix<ept id="1">&lt;/code&gt;</ept>.<ph id="2">&lt;br /&gt;</ph>Метод принимает декларацию блока в формате, аналогичном методу <bpt id="3">&lt;code&gt;</bpt>decl<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu74" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('mymix', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.declMix('mymix', // только строка с именем
    { /* методы экземпляра */ },
    { /* статические методы */ }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu75" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Блок-микс нельзя инстанцировать и использовать как самостоятельный блок.</source>
</trans-unit>
      <trans-unit id="tu76" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="trigger-decl"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu77" resname="--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Декларация триггеров</source>
</trans-unit>
      <trans-unit id="tu78" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>Триггеры<ept id="1">&lt;/a&gt;</ept>, выполняемые при установке модификаторов, описываются в декларации блока. Для этого в хэше методов экземпляра блока зарезервированы свойства:</source>
</trans-unit>
      <trans-unit id="tu79" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов блока<ept id="2">&lt;/strong&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu80" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые до установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов элементов<ept id="2">&lt;/strong&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu81" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые после установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов блока<ept id="2">&lt;/strong&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu82" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onElemSetMod<ept id="1">&lt;/code&gt;</ept> — триггеры, вызываемые после установки <bpt id="2">&lt;strong&gt;</bpt>модификаторов элементов<ept id="2">&lt;/strong&gt;</ept> блока.</source>
</trans-unit>
      <trans-unit id="tu83" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('block-name', function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
        beforeSetMod: { /* триггеры до установки модификаторов блока*/}
        beforeElemSetMod: { /* триггеры до установки модификаторов элементов*/}
        onSetMod: { /* триггеры после установки модификаторов блока */ }
        onElemSetMod: { /* триггеры после установки модификаторов элементов */ }
    },
    {
        /* статические методы */
    }
));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu84" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Значение свойств <bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept> и <bpt id="2">&lt;code&gt;</bpt>onSetMod<ept id="2">&lt;/code&gt;</ept> — хэш, связывающий изменения модификаторов с триггерами. Триггер получает аргументами:</source>
</trans-unit>
      <trans-unit id="tu85" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> – имя модификатора;</source>
</trans-unit>
      <trans-unit id="tu86" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> – выставляемое значение модификатора;</source>
</trans-unit>
      <trans-unit id="tu87" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>prevModVal<ept id="1">&lt;/code&gt;</ept> – предыдущее значение модификатора. Для <bpt id="2">&lt;code&gt;</bpt>beforeSetMod<ept id="2">&lt;/code&gt;</ept> это текущее значение модификатора, которое будет заменено на <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept>, если триггер не вернет <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu88" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{
    'mod1': function(modName, modVal, prevModVal) { /* ... */ }, // установка mod1 в любое значение
    'mod2': {
        'val1': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val1
        'val2': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val2
        '': function(modName, modVal, prevModVal) { /* ... */ } // триггер на удаление модификатора mod2
    'mod3': {
        'true': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку простого модификатора mod3
        '': function(modName, modVal, prevModVal) { /* ... */ }, // триггер на удаление простого модификатора mod3
    },
    '*': function(modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора в любое значение
}<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu89" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для триггера на установку любого модификатора блока в любое значение<ph id="1">&lt;br /&gt;</ph>существует сокращенная форма записи:</source>
</trans-unit>
      <trans-unit id="tu90" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeSetMod: function(modName, modVal, prevModVal) { /* ... */ }
onSetMod: function(modName, modVal, prevModVal) { /* ... */ }<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu91" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Триггеры на установку <bpt id="1">&lt;strong&gt;</bpt>модификаторов элемента<ept id="1">&lt;/strong&gt;</ept> описываются в свойствах <bpt id="2">&lt;code&gt;</bpt>beforeElemSetMod<ept id="2">&lt;/code&gt;</ept> и <bpt id="3">&lt;code&gt;</bpt>onElemSetMod<ept id="3">&lt;/code&gt;</ept>. Хэш в значениях свойств имеет дополнительный уровень вложенности — <bpt id="4">&lt;strong&gt;</bpt>имя элемента<ept id="4">&lt;/strong&gt;</ept>.<ph id="5">&lt;br /&gt;</ph>В качестве аргументов триггеру передаются:</source>
</trans-unit>
      <trans-unit id="tu92" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>elem<ept id="1">&lt;/code&gt;</ept> — имя элемента;</source>
</trans-unit>
      <trans-unit id="tu93" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> – имя модификатора;</source>
</trans-unit>
      <trans-unit id="tu94" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> – выставляемое значение модификатора;</source>
</trans-unit>
      <trans-unit id="tu95" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>prevModVal<ept id="1">&lt;/code&gt;</ept> – предыдущее значение модификатора. Для <bpt id="2">&lt;code&gt;</bpt>beforeSetMod<ept id="2">&lt;/code&gt;</ept> это текущее значение модификатора, которое будет заменено на <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept>, если триггер не вернет <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu96" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{
    'elem1': {
        'mod1': function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod1 элемента elem 1 в любое значение
        'mod2': {
            'val1': function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 элемента elem1 в значение val1
            'val2': function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку mod2 элемента elem1 в значение val2
            }
        },
    'elem2': function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора элемента elem2 в любое значение
}<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu97" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Сокращенная запись для триггера на установку любого модификатора элемента <bpt id="1">&lt;code&gt;</bpt>elem1<ept id="1">&lt;/code&gt;</ept> в любое значение:</source>
</trans-unit>
      <trans-unit id="tu98" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>beforeElemSetMod: { 'elem1': function(elem, modName, modVal, prevModVal) { /* ... */ } }
onElemSetMod: { 'elem1': function(elem, modName, modVal, prevModVal) { /* ... */ } }<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" resname="i-bem.js---id" restype="x-h1" xml:space="preserve">
<source xml:lang="ru">i-bem.js: руководство пользователя</source>
</trans-unit>
      <trans-unit id="tu2" resname="i-bem.js-javascript----id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">i-bem.js: JavaScript-фреймворк для БЭМ</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/method/</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> — специализированный JavaScript-фреймворк для веб-разработки<ph id="2">&lt;br /&gt;</ph>в рамках <bpt id="3">&lt;a href="https://ru.bem.info/method/" [#$tu4]&gt;</bpt>БЭМ-методологии<ept id="3">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> позволяет:</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve">
<source xml:lang="ru">разрабатывать веб-интерфейс в терминах блоков, элементов, модификаторов;</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve">
<source xml:lang="ru">описывать логику работы блока в декларативном стиле — как набор состояний;</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve">
<source xml:lang="ru">легко интегрировать JavaScript-код с BEMHTML- или BH-шаблонами и CSS в стиле БЭМ;</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve">
<source xml:lang="ru">гибко переопределять поведение библиотечных блоков.</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> не предназначен для замены фреймворка общего назначения, подобного jQuery.</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Краткий обзор содержания документа<ept id="1">&lt;/strong&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-common.ru.md"&gt;</bpt>Общие сведения<ept id="1">&lt;/a&gt;</ept> о фреймворке: связь с предметной областью БЭМ, краткое описание модульной структуры<ph id="2">&lt;br /&gt;</ph>фреймворка, шаблонного проекта и инструментов для сборки кода,<ph id="3">&lt;br /&gt;</ph>написанного с использованием <bpt id="4">&lt;code&gt;</bpt>i-bem.js<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>Привязка JS-блоков к HTML<ept id="1">&lt;/a&gt;</ept> — разметка JS-блоков в<ph id="2">&lt;br /&gt;</ph>HTML-коде страницы, варианты соотношения HTML-элементов и JS-блоков.</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>Декларация блока<ept id="1">&lt;/a&gt;</ept> — синтаксис описания JS-блоков.</source>
</trans-unit>
      <trans-unit id="tu15" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>Передача параметров<ept id="1">&lt;/a&gt;</ept> — передача параметров экземпляру блока, получение доступа к параметрам блока из экземпляра.</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-dom.ru.md"&gt;</bpt>Работа с DOM-деревом<ept id="1">&lt;/a&gt;</ept> — API для работы с DOM-узлами блоков:<ph id="2">&lt;br /&gt;</ph>элементы, динамическое изменение DOM-дерева (AJAX), поиск DOM-узлов.</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>Состояния блока<ept id="1">&lt;/a&gt;</ept> — модификаторы, триггеры на смену состояний (установку модификаторов).</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-events.ru.md"&gt;</bpt>События<ept id="1">&lt;/a&gt;</ept> — событийная модель <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept>: DOM- и БЭМ-события, делегирование событий.</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>Инициализация<ept id="1">&lt;/a&gt;</ept> — инициализация и удаление экземпляров блоков, отложенная и автоматическая инициализация.</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Взаимодействие блоков<ept id="1">&lt;/a&gt;</ept> — обращение из блока к другим блокам, классам блоков.</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-context.ru.md"&gt;</bpt>Контекст<ept id="1">&lt;/a&gt;</ept> — собственные и статические свойства блока. Статические свойства BEMDOM.</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="./i-bem-js-extras.ru.md"&gt;</bpt>Что дальше?<ept id="1">&lt;/a&gt;</ept> — ссылки на документацию и дополнительные материалы.</source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-context.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="context"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Контекст</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Методы экземпляра блока<ept id="1">&lt;/strong&gt;</ept> исполняются в контексте JS-объекта экземпляра блока. Ключевое слово <bpt id="2">&lt;code&gt;</bpt>this<ept id="2">&lt;/code&gt;</ept> в методах экземпляра блока ссылается на JS-объект <bpt id="3">&lt;strong&gt;</bpt>экземпляра блока<ept id="3">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Статические методы<ept id="1">&lt;/strong&gt;</ept> исполняются в контексте JS-объекта, соответствующего классу блока. Ключевое слово <bpt id="2">&lt;code&gt;</bpt>this<ept id="2">&lt;/code&gt;</ept> в статических методах блока ссылается на <bpt id="3">&lt;strong&gt;</bpt>класс блока<ept id="3">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> При разработке блоков с использованием <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> внутренним методам блока, не предназначенным для использования извне, принято давать имена, начинающиеся с символа подчеркивания. Например, <bpt id="3">&lt;code&gt;</bpt>_onClick<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu6" resname="---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Свойства экземпляра блока</source>
</trans-unit>
      <trans-unit id="tu7" resname="-dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">С DOM-представлением</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>params<ept id="1">&lt;/code&gt;</ept> – хэш параметров, переданных экземпляру блока при инициализации.</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>domElem<ept id="1">&lt;/code&gt;</ept> – объект jQuery, содержащий ссылки на DOM-элементы, к которым <bpt id="2">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>привязан<ept id="2">&lt;/a&gt;</ept> блок.</source>
</trans-unit>
      <trans-unit id="tu10" resname="-dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Без DOM-представления</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>params<ept id="1">&lt;/code&gt;</ept> – хэш параметров, переданных экземпляру блока при инициализации.</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="spec-fields"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu13" resname="--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Вспомогательные свойства</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Экземпляр блока предоставляет набор вспомогательных свойств:</source>
</trans-unit>
      <trans-unit id="tu15" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>__self<ept id="1">&lt;/code&gt;</ept> – для доступа к статическим свойствам и методам блока из его экземпляра.</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Вызов статического метода <bpt id="2">&lt;code&gt;</bpt>staticMethod<ept id="2">&lt;/code&gt;</ept> в методе <bpt id="3">&lt;code&gt;</bpt>onEvent<ept id="3">&lt;/code&gt;</ept> экземпляра блока <bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onEvent : function() {
        this.__self.staticMethod(); // вызов статического метода
        this.doMore();
    }
}, {
    staticMethod : function() { /* ... */ }; // определение статического метода
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>__base<ept id="1">&lt;/code&gt;</ept> – для вызова реализации одноименного метода из базового класса, от которого наследуется данный (<bpt id="2">&lt;code&gt;</bpt>super call<ept id="2">&lt;/code&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> вызов базовой реализации метода <bpt id="2">&lt;code&gt;</bpt>_onClick<ept id="2">&lt;/code&gt;</ept> базового класса <bpt id="3">&lt;code&gt;</bpt>button<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl({ block : 'my-button', baseBlock : 'button' }, {
    _onClick : function() {
        this.__base(); // вызываем базовый _onClick
        this.doMore();
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Вспомогательные свойства предоставляются модулем <bpt id="1">&lt;a href="../../common.blocks/inherit/inherit.ru.md"&gt;</bpt>inherit<ept id="1">&lt;/a&gt;</ept>, реализующим механизм наследования в <bpt id="2">&lt;code&gt;</bpt>bem-core<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu22" resname="---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Статические свойства блока</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="spec-fields-static"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu24" resname="--1-id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Вспомогательные свойства</source>
</trans-unit>
      <trans-unit id="tu25" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В декларации статических методов блока доступны вспомогательные свойства:</source>
</trans-unit>
      <trans-unit id="tu26" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>__base<ept id="1">&lt;/code&gt;</ept> – для вызова реализации одноименного метода из базового класса, от которого наследуется данный (<bpt id="2">&lt;code&gt;</bpt>super call<ept id="2">&lt;/code&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl({ block : 'extra', baseBlock : 'my-block' }, 
    { /* ... */ },
    { 
        staticMethod: function() {
            this.__base();
            this.doMore();
        }
    }
);<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu28" resname="---bemdom-id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Статические свойства модуля BEMDOM</source>
</trans-unit>
      <trans-unit id="tu29" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>scope<ept id="1">&lt;/code&gt;</ept> – корневой элемент обрабатываемого DOM-дерева. Позволяет выполнять несколько разных версий <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept> в одном рантайме. По умолчанию содержит ссылку на jQuery объект <bpt id="3">&lt;code&gt;</bpt>body<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu30" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>doc<ept id="1">&lt;/code&gt;</ept> – ссылка на jQuery объект <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>win<ept id="1">&lt;/code&gt;</ept> – ссылка на jQuery объект <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-init.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Инициализация</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Инициализация блока — это создание в памяти браузера JS-объекта,<ph id="1">&lt;br /&gt;</ph>соответствующего экземпляру блока. Инициализация экземпляров блоков выполняется<ph id="2">&lt;br /&gt;</ph>методом <bpt id="3">&lt;code&gt;</bpt>init()<ept id="3">&lt;/code&gt;</ept> модуля <bpt id="4">&lt;code&gt;</bpt>i-bem__dom<ept id="4">&lt;/code&gt;</ept> на заданном фрагменте DOM-дерева.</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Каждому экземпляру блока можно приписать три состояния:</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve">
<source xml:lang="ru">экземпляр блока не инициализирован (JS-объект не создан);</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve">
<source xml:lang="ru">экземпляр блока инициализирован (JS-объект создан в памяти браузера);</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve">
<source xml:lang="ru">экземпляр блока уничтожен (удалены все ссылки на JS-объект экземпляра<ph id="1">&lt;br /&gt;</ph>блока, и он может быть удален сборщиком мусора).</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> эти состояния экземпляра блока описываются с помощью служебного<ph id="2">&lt;br /&gt;</ph>модификатора <bpt id="3">&lt;code&gt;</bpt>js<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve">
<source xml:lang="ru">До инициализации экземпляр блока не имеет модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem" data-bem="..." &gt;...&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve">
<source xml:lang="ru">В момент инициализации экземпляру блока устанавливается модификатор<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> в значении <bpt id="3">&lt;code&gt;</bpt>inited<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem my-block_js_inited" data-bem="..."&gt;...&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Если в процессе работы удаляется фрагмент DOM-дерева (при помощи метода <bpt id="1">&lt;code&gt;</bpt>destruct<ept id="1">&lt;/code&gt;</ept> модуля <bpt id="2">&lt;code&gt;</bpt>i-bem__dom<ept id="2">&lt;/code&gt;</ept>), то вместе с ним удаляются экземпляры блоков, все HTML-элементы которых находятся в этом фрагменте. Перед удалением экземпляра блока модификатор <bpt id="3">&lt;code&gt;</bpt>js<ept id="3">&lt;/code&gt;</ept> удаляется, чтобы выполнились <bpt id="4">&lt;a href="#destruct"&gt;</bpt>деструкторы экземпляра<ept id="4">&lt;/a&gt;</ept> блока.</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Если экземпляр блока был <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#distrib-block"&gt;</bpt>привязан к нескольким HTML-элементам<ept id="2">&lt;/a&gt;</ept>, блок будет существовать, пока в HTML-дереве сохраняется хотя бы один элемент, с которым он связан.</source>
</trans-unit>
      <trans-unit id="tu15" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Если на HTML-элементе размещено несколько экземпляров других блоков, то<ph id="1">&lt;br /&gt;</ph>инициализация одного из них (появление модификатора <bpt id="2">&lt;code&gt;</bpt>js_inited<ept id="2">&lt;/code&gt;</ept>)<ph id="3">&lt;br /&gt;</ph>не влияет на инициализацию остальных.</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> На HTML-элементе инициализирован только экземпляр блока <bpt id="2">&lt;code&gt;</bpt>my-block<ept id="2">&lt;/code&gt;</ept>.<ph id="3">&lt;br /&gt;</ph>Экземпляр блока <bpt id="4">&lt;code&gt;</bpt>lazy-block<ept id="4">&lt;/code&gt;</ept> не инициализирован:</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block my-block_js_inited lazy-block i-bem"
    data-bem='{ "my-block": {}, "lazy-block": {} }' &gt;
    ...
&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Наличие модификатора <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> позволяет писать разные CSS-стили для<ph id="3">&lt;br /&gt;</ph>блока в зависимости от того, инициализирован он или нет.</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="constructor"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu20" resname="---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Конструктор экземпляра блока</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">На изменение значений модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> можно назначать <bpt id="2">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>триггеры<ept id="2">&lt;/a&gt;</ept> так же, как и для любых других модификаторов блока.</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Триггер на установку модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> в значение <bpt id="2">&lt;code&gt;</bpt>inited<ept id="2">&lt;/code&gt;</ept> выполняется<ph id="3">&lt;br /&gt;</ph>при создании блока. Этот триггер можно считать <bpt id="4">&lt;strong&gt;</bpt>конструктором экземпляра блока<ept id="4">&lt;/strong&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        'inited': function() { /* ... */ } // конструктор экземпляра блока
    }
}<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="destruct"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu25" resname="---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Деструктор экземпляра блока</source>
</trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Моментом удаления блока является момент уничтожения всех ссылок на<ph id="1">&lt;br /&gt;</ph>JS-объект блока, после чего он может быть удален из памяти браузера<ph id="2">&lt;br /&gt;</ph>сборщиком мусора.</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Триггер на удаление модификатора <bpt id="1">&lt;code&gt;</bpt>js<ept id="1">&lt;/code&gt;</ept> (установку в пустое значение<ph id="2">&lt;br /&gt;</ph><bpt id="3">&lt;code&gt;</bpt>''<ept id="3">&lt;/code&gt;</ept>) выполняется перед удалением блока. Такой триггер можно считать<ph id="4">&lt;br /&gt;</ph><bpt id="5">&lt;strong&gt;</bpt>деструктором экземпляра блока<ept id="5">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu28" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>onSetMod: {
    'js': {
        '': function() { /* ... */ } // деструктор экземпляра блока
    }
}<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu29" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-wave"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu30" resname="--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Волны инициализации</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Инициализация экземпляров блоков, присутствующих на странице, не<ph id="1">&lt;br /&gt;</ph>обязательно происходит одновременно. Блоки могут динамически добавляться в ходе<ph id="2">&lt;br /&gt;</ph>работы, инициализироваться по запросу или событию.<ph id="3">&lt;br /&gt;</ph>Инициализация очередной группы блоков называется <bpt id="4">&lt;strong&gt;</bpt>волной инициализации<ept id="4">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu32" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Новая волна инициализации создается в следующих случаях:</source>
</trans-unit>
      <trans-unit id="tu33" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="#init-auto"&gt;</bpt>Автоматическая инициализация блоков по событию <bpt id="2">&lt;code&gt;</bpt>domReady<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu34" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="#init-live"&gt;</bpt>Инициализация блока по событию<ept id="1">&lt;/a&gt;</ept> (ленивая инициализация);</source>
</trans-unit>
      <trans-unit id="tu35" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="#init-ajax"&gt;</bpt>Явный вызов инициализации блоков на указанном фрагменте DOM-дерева<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu36" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-auto"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu37" resname="--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Автоматическая инициализация</source>
</trans-unit>
      <trans-unit id="tu38" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Фреймворк <bpt id="1">&lt;em&gt;</bpt>i-bem.js<ept id="1">&lt;/em&gt;</ept> позволяет автоматически инициализировать блоки с DOM-представлением в момент наступления DOM-события <bpt id="2">&lt;code&gt;</bpt>domReady<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu40" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source>
</trans-unit>
      <trans-unit id="tu39" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При автоматической инициализации в памяти браузера будут созданы JS-объекты для всех DOM-узлов, содержащих <bpt id="1">&lt;code&gt;</bpt>i-bem<ept id="1">&lt;/code&gt;</ept> в атрибуте <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept>. Инициализация выполняется функцией <bpt id="3">&lt;code&gt;</bpt>init<ept id="3">&lt;/code&gt;</ept> модуля <bpt id="4">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu40]&gt;</bpt>i-bem__dom<ept id="4">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu41" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Включить автоматическую инициализацию можно, указав блок <bpt id="1">&lt;code&gt;</bpt>i-bem<ept id="1">&lt;/code&gt;</ept> с модификатором <bpt id="2">&lt;code&gt;</bpt>init<ept id="2">&lt;/code&gt;</ept> в значении <bpt id="3">&lt;code&gt;</bpt>auto<ept id="3">&lt;/code&gt;</ept> в файле зависимостей <bpt id="4">&lt;code&gt;</bpt>.deps.js<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример файла<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>.deps.js<ept id="2">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu43" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>({
    shouldDeps: [
        {
            block: 'i-bem',
            elem: 'dom',
            mods: { 'init': 'auto' }
        }
    ]
})<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu44" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Блок <bpt id="1">&lt;a href="../../common.blocks/page/page.ru.md"&gt;</bpt>page<ept id="1">&lt;/a&gt;</ept> уже содержит в зависимостях <bpt id="2">&lt;code&gt;</bpt>i-bem__dom_init_auto<ept id="2">&lt;/code&gt;</ept>, поэтому если он используется в проекте, не требуется ничего дополнительно подключать.</source>
</trans-unit>
      <trans-unit id="tu45" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Блоки, для которых задана ленивая инициализация, не будут инициализированы автоматически.</source>
</trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-live"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu47" resname="-----id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Инициализация по событию (ленивая инициализация)</source>
</trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Если на странице размещено много экземпляров блоков, автоматическая инициализация<ph id="1">&lt;br /&gt;</ph>всех блоков в момент загрузки страницы нежелательна, так как она<ph id="2">&lt;br /&gt;</ph>увеличивает время загрузки и объем памяти, затрачиваемой браузером.</source>
</trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Удобнее инициализировать JS-объекты только в тот момент, когда их функциональность потребуется<ph id="1">&lt;br /&gt;</ph>пользователю: например, по клику на блоке. Такая инициализация называется <bpt id="2">&lt;strong&gt;</bpt>ленивой<ept id="2">&lt;/strong&gt;</ept> или <bpt id="3">&lt;strong&gt;</bpt>live-инициализацией<ept id="3">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu50" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для описания условий ленивой инициализации в декларации зарезервировано статическое свойство <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept>. Свойство <bpt id="2">&lt;code&gt;</bpt>live<ept id="2">&lt;/code&gt;</ept> может иметь значения следующих типов:</source>
</trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>Boolean<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu52" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>true<ept id="1">&lt;/code&gt;</ept> — экземпляры блоков данного класса будут инициализированы только при попытке получить соответствующий экземпляр (см. раздел «<bpt id="2">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Взаимодействие блоков<ept id="2">&lt;/a&gt;</ept>»).</source>
</trans-unit>
      <trans-unit id="tu53" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        onSetMod: {
            'js': {
                'inited': function() { /* ... */ } // этот код будет выполняться
                                                   // при первом обращении к экземпляру блока
            }
        }
    },
    { live: true } // статические методы и свойства
));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu54" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>false<ept id="1">&lt;/code&gt;</ept> — позволяет отменить ленивую инициализацию блоков, заданную на другом уровне переопределения.</source>
</trans-unit>
      <trans-unit id="tu55" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>Function<ept id="1">&lt;/code&gt;</ept> – функция, выполняемая перед инициализацией <bpt id="2">&lt;strong&gt;</bpt>первого экземпляра<ept id="2">&lt;/strong&gt;</ept> блока заданного класса. Если функция возвращает значение <bpt id="3">&lt;code&gt;</bpt>false<ept id="3">&lt;/code&gt;</ept>, экземпляры блока будут инициализированы <bpt id="4">&lt;a href="#init-auto"&gt;</bpt>автоматически<ept id="4">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu56" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom', 'ua'], function(provide, BEMDOM, ua) {

provide(BEMDOM.decl(this.name, {
    onSetMod : {
        'js' : {
            'inited' : function() {
                // выполнится при первом обращении к экземпляру блока
            }
        }
    }
}, {
    live : function() { // выполнится перед инициализацией первого экземпляра блока
        if(ua.msie &amp;&amp; ua.version &lt; 9) { 
                          // отмена ленивой инициализации блока 
            return false; // для старых версий Internet Explorer
        }
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu57" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Ленивая инициализация может быть отменена для конкретного экземпляра блока. Для этого нужно указать в <bpt id="2">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>параметрах<ept id="2">&lt;/a&gt;</ept> HTML-элемента, к которому привязан экземпляр блока <bpt id="3">&lt;code&gt;</bpt>data-bem='{"live": false}'<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы инициализировать экземпляры блока по наступлению DOM-события или БЭМ-события, в теле функции следует выполнить подписку на <bpt id="1">&lt;a href="i-bem-js-events.ru.md#delegated-events"&gt;</bpt>делегированные события<ept id="1">&lt;/a&gt;</ept> или воспользоваться <bpt id="2">&lt;a href="#init-live-helpers"&gt;</bpt>хелпером<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Экземпляры блока <bpt id="2">&lt;code&gt;</bpt>my-block<ept id="2">&lt;/code&gt;</ept> будут инициализированы по DOM-событию <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> на DOM-узле блока. По каждому DOM-событию <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept> будет вызываться метод экземпляра блока <bpt id="5">&lt;code&gt;</bpt>_onClick<ept id="5">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu60" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    onSetMod: {
        'js': {
            'inited': function() { /* ... */ } // выполняется при первом DOM-событии "click"
        }
    },

    _onClick: function(e) { /* ... */ } // выполняется при каждом DOM-событии "click"
}, {
    live: function() {
        this.liveBindTo('click', function(e) {
            this._onClick(e);   // в момент клика будет создан экземпляр 
                                // блока и вызван его метод _onClick
        });
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu61" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Свойство <bpt id="2">&lt;code&gt;</bpt>live<ept id="2">&lt;/code&gt;</ept> относится к статическим методам класса блока. Поэтому даже если оно задано в декларации блока с определенным модификатором, <bpt id="3">&lt;code&gt;</bpt>live<ept id="3">&lt;/code&gt;</ept> будет применено ко всем блокам данного класса вне зависимости от модификаторов.</source>
</trans-unit>
      <trans-unit id="tu62" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-live-helpers"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu63" resname="-----id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Хелперы для инициализации по событию</source>
</trans-unit>
      <trans-unit id="tu64" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для упрощения инициализации по событию в контексте экземпляра блока зарезервирован набор методов-хелперов, позволяющий подписываться на следующие типы событий:</source>
</trans-unit>
      <trans-unit id="tu65" restype="x-li" xml:space="preserve">
<source xml:lang="ru">DOM-события:
</source>
</trans-unit>
      <trans-unit id="tu66" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveBindTo([elemName], event, [callback])<ept id="1">&lt;/code&gt;</ept> — подписка с отложенной инициализацией на событие на DOM-узле блока или его элементах. Блок будет инициализирован по первому событию <bpt id="2">&lt;code&gt;</bpt>event<ept id="2">&lt;/code&gt;</ept>. Функция-обработчик <bpt id="3">&lt;code&gt;</bpt>callback<ept id="3">&lt;/code&gt;</ept> будет вызываться по событию <bpt id="4">&lt;code&gt;</bpt>event<ept id="4">&lt;/code&gt;</ept> и после инициализации блока.</source>
</trans-unit>
      <trans-unit id="tu67" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveUnbindFrom([elemName], event, [callback])<ept id="1">&lt;/code&gt;</ept> — удаление подписки с отложенной инициализацией на событие на DOM-узле блока или его элементах.</source>
</trans-unit>
      <trans-unit id="tu68" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveInitOnEvent([elemName], event, callback)<ept id="1">&lt;/code&gt;</ept> — инициализация по событию на DOM-узле блока или его элементах.</source>
</trans-unit>
      <trans-unit id="tu69" restype="x-li" xml:space="preserve">
<source xml:lang="ru">БЭМ-события:
</source>
</trans-unit>
      <trans-unit id="tu70" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockEvent(event, blockName, callback)<ept id="1">&lt;/code&gt;</ept> — инициализация по БЭМ-событию экземпляра другого блока, размещенного на DOM-узле текущего экземпляра блока.</source>
</trans-unit>
      <trans-unit id="tu71" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>liveInitOnBlockInsideEvent(event, blockName, [callback])<ept id="1">&lt;/code&gt;</ept> — инициализация по БЭМ-событию экземпляра другого блока, вложенного в DOM-узел текущего экземпляра блока.</source>
</trans-unit>
      <trans-unit id="tu72" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Например, блок <bpt id="1">&lt;code&gt;</bpt>menu<ept id="1">&lt;/code&gt;</ept> инициализируется по <bpt id="2">&lt;strong&gt;</bpt>БЭМ-событию<ept id="2">&lt;/strong&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> вложенного в него блока <bpt id="4">&lt;code&gt;</bpt>menu-item<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu73" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('menu', ['i-bem__dom', 'menu-item'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name, {
    _onItemClick : function(e, data) { 
        // функция-обработчик БЭМ-события click на вложенных "menu-item"
    }
}, {
    live : function() {
        this.liveInitOnBlockInsideEvent('click', 'menu-item', function(e, data) {
            this._onItemClick(e, data);
        });
    }
}));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu74" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-ajax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu75" resname="----dom--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Инициализация блоков на фрагменте DOM-дерева</source>
</trans-unit>
      <trans-unit id="tu76" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Процедура инициализации JS-объектов может быть вызвана<ph id="1">&lt;br /&gt;</ph>явно для указанного фрагмента DOM-дерева. Часто такая необходимость<ph id="2">&lt;br /&gt;</ph>возникает при разработке AJAX-интерфейсов, когда нужно <bpt id="3">&lt;a href="i-bem-js-dom.ru.md#dynamic"&gt;</bpt>динамически встроить<ept id="3">&lt;/a&gt;</ept> в страницу новые экземпляры блоков либо обновить существующие.</source>
</trans-unit>
      <trans-unit id="tu77" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> следующие функции выполняют динамическую инициализацию блоков:</source>
</trans-unit>
      <trans-unit id="tu78" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>init<ept id="1">&lt;/code&gt;</ept>, <bpt id="2">&lt;code&gt;</bpt>destruct<ept id="2">&lt;/code&gt;</ept> – Инициализация/уничтожение блоков на указанном фрагменте DOM-дерева.</source>
</trans-unit>
      <trans-unit id="tu79" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>update<ept id="1">&lt;/code&gt;</ept>, <bpt id="2">&lt;code&gt;</bpt>replace<ept id="2">&lt;/code&gt;</ept>, <bpt id="3">&lt;code&gt;</bpt>append<ept id="3">&lt;/code&gt;</ept>, <bpt id="4">&lt;code&gt;</bpt>prepend<ept id="4">&lt;/code&gt;</ept>, <bpt id="5">&lt;code&gt;</bpt>before<ept id="5">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>after<ept id="6">&lt;/code&gt;</ept> – добавление/замена фрагмента DOM-дерева с одновременной инициализацией блоков на обновленном фрагменте.</source>
</trans-unit>
      <trans-unit id="tu80" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Пример использования функций, выполняющих динамическую инициализацию см. в разделе «<bpt id="1">&lt;a href="i-bem-js-dom.ru.md#dynamic"&gt;</bpt>Динамическое обновление блоков и элементов в DOM-дереве<ept id="1">&lt;/a&gt;</ept>»</source>
</trans-unit>
      <trans-unit id="tu81" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="destruct-dom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu82" resname="----dom--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Удаление блоков на фрагменте DOM-дерева</source>
</trans-unit>
      <trans-unit id="tu83" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Как и процедура инициализации блоков, процедура удаления может быть вызвана явно для заданного фрагмента DOM-дерева. Например, для динамического удаления экземпляров блоков со страницы при разработке AJAX-интерфейсов.</source>
</trans-unit>
      <trans-unit id="tu84" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Явный вызов процедуры гарантирует корректное удаление:</source>
</trans-unit>
      <trans-unit id="tu85" restype="x-li" xml:space="preserve">
<source xml:lang="ru">вложенных DOM-узлов;</source>
</trans-unit>
      <trans-unit id="tu86" restype="x-li" xml:space="preserve">
<source xml:lang="ru">блоков, примешанных к другим блокам.</source>
</trans-unit>
      <trans-unit id="tu87" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для явного вызова процедуры удаления служит статический метод <bpt id="1">&lt;code&gt;</bpt>BEMDOM.destruct<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu88" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Метод принимает:</source>
</trans-unit>
      <trans-unit id="tu89" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>ctx<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{jQuery}<ept id="2">&lt;/code&gt;</ept> – корневой DOM-элемент. Удаляется со всем вложенными DOM-узлами.</source>
</trans-unit>
      <trans-unit id="tu90" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>excludeSelf<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{Boolean}<ept id="2">&lt;/code&gt;</ept> – не удалять корневой DOM-элемент, если значение <bpt id="3">&lt;code&gt;</bpt>true<ept id="3">&lt;/code&gt;</ept>. По умолчанию <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu91" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="init-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu92" resname="-----dom--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Инициализация и удаление блоков без DOM-представления</source>
</trans-unit>
      <trans-unit id="tu93" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для создания JS-объектов блока без DOM-представления (не привязанного к HTML-элементу) служит метод <bpt id="1">&lt;code&gt;</bpt>BEM.create<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu94" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Метод принимает:</source>
</trans-unit>
      <trans-unit id="tu95" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>name<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String|Object}<ept id="2">&lt;/code&gt;</ept> – имя блока;</source>
</trans-unit>
      <trans-unit id="tu96" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Возвращает экземпляр блока указанного класса.</source>
</trans-unit>
      <trans-unit id="tu97" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Удаление<ept id="1">&lt;/strong&gt;</ept> экземпляров блоков без DOM-представления не может быть<ph id="2">&lt;br /&gt;</ph>выполнено автоматически. Блоки без DOM-представления представляют собой обычные<ph id="3">&lt;br /&gt;</ph>JS-объекты и удаляются в момент удаления всех ссылок на объект блока.</source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-states.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="states"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Состояния блока</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Проектируя динамический блок в стиле БЭМ, нужно представить всю логику<ph id="1">&lt;br /&gt;</ph>изменений, происходящих в нем, как набор <bpt id="2">&lt;strong&gt;</bpt>состояний<ept id="2">&lt;/strong&gt;</ept> блока. Тогда<ph id="3">&lt;br /&gt;</ph>поведение блока определяется <bpt id="4">&lt;strong&gt;</bpt>триггерами<ept id="4">&lt;/strong&gt;</ept> — callback-функциями, которые<ph id="5">&lt;br /&gt;</ph>выполняются при переходе блока из одного состояния в другое.</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Это позволяет писать код блока в декларативном стиле как набор утверждений вида: <bpt id="1">&lt;code&gt;</bpt>описание состояния<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;code&gt;</bpt>действия, выполняемые при переходе в данное состояние<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="modifiers"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu6" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Модификаторы</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Согласно БЭМ-методологии, состояние блока и его элементов описывается<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;strong&gt;</bpt>модификаторами<ept id="2">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Модификатор указывает, в каком из возможных состояний находится блок. Модификатор представляет собой пару: <bpt id="1">&lt;strong&gt;</bpt>имя<ept id="1">&lt;/strong&gt;</ept> и <bpt id="2">&lt;strong&gt;</bpt>значение<ept id="2">&lt;/strong&gt;</ept>. Список допустимых значений модификатора описывает набор состояний блока. Например, для описания размеров блока<ph id="3">&lt;br /&gt;</ph>можно использовать модификатор <bpt id="4">&lt;code&gt;</bpt>size<ept id="4">&lt;/code&gt;</ept> с допустимыми значениями <bpt id="5">&lt;code&gt;</bpt>s<ept id="5">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>m<ept id="6">&lt;/code&gt;</ept> и<ph id="7">&lt;br /&gt;</ph><bpt id="8">&lt;code&gt;</bpt>l<ept id="8">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Простой модификатор<ept id="1">&lt;/strong&gt;</ept> — частный случай, когда важно только наличие<ph id="2">&lt;br /&gt;</ph>или отсутствие модификатора у блока, а его значение несущественно. Например, модификатор, описывающий состояние «отключен»: <bpt id="3">&lt;code&gt;</bpt>disabled<ept id="3">&lt;/code&gt;</ept>. Модификатор с неуказанным значением <bpt id="4">&lt;code&gt;</bpt>i-bem.js<ept id="4">&lt;/code&gt;</ept> интерпретирует как булев и автоматически присваивает ему значение <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Каждому блоку можно установить один или несколько модификаторов. Блок<ph id="1">&lt;br /&gt;</ph>может не иметь модификаторов. Список допустимых модификаторов и их<ph id="2">&lt;br /&gt;</ph>значений определяет разработчик блока.</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Модификаторы устанавливаются при <bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализации экземпляра блока<ept id="1">&lt;/a&gt;</ept> (если модификаторы и их значения указаны в атрибуте <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> соответствующего HTML-элемента).</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Модификаторы могут изменяться как в процессе работы блока (например, как реакция на <bpt id="1">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM-события<ept id="1">&lt;/a&gt;</ept> блока), там и по запросу из других блоков (см. раздел <bpt id="2">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>Взаимодействие блоков<ept id="2">&lt;/a&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При установке, удалении и изменении значений модификаторов, выполняются <bpt id="1">&lt;a href="#mods-api-trigger"&gt;</bpt>триггеры<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Если модификаторы были заданы в HTML-элементе блока до момента его инициализации, триггеры на установку данных модификаторов <bpt id="2">&lt;strong&gt;</bpt>не выполняются<ept id="2">&lt;/strong&gt;</ept>. Экземпляр блока в этом случае получает начальное состояние, а не меняет его.</source>
</trans-unit>
      <trans-unit id="tu15" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="mods-api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu16" resname="--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Управление модификаторами</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Методы экземпляра блока для работы с модификаторами:</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>hasMod([elem], modName, [modVal])<ept id="1">&lt;/code&gt;</ept> – проверяет наличие модификатора. Возвращает <bpt id="2">&lt;code&gt;</bpt>true<ept id="2">&lt;/code&gt;</ept>, если модификатор <bpt id="3">&lt;code&gt;</bpt>modName<ept id="3">&lt;/code&gt;</ept> установлен.</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>getMod([elem], modName)<ept id="1">&lt;/code&gt;</ept> – возвращает значение модификатора <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>getMods([elem], [...modNames])<ept id="1">&lt;/code&gt;</ept> – возвращает хэш со значениями всех модификаторов. Можно получить значения нескольких модификаторов, передав их имена отдельными аргументами (<bpt id="2">&lt;code&gt;</bpt>[...modNames]<ept id="2">&lt;/code&gt;</ept>). Для получения модификаторов элемента можно указать аргумент <bpt id="3">&lt;code&gt;</bpt>[elem]<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>setMod([elem], modName, [modVal=true])<ept id="1">&lt;/code&gt;</ept> – устанавливает модификатор <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>. Если значение <bpt id="3">&lt;code&gt;</bpt>modVal<ept id="3">&lt;/code&gt;</ept> не задано, будет установлен <bpt id="4">&lt;em&gt;</bpt>простой модификатор<ept id="4">&lt;/em&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>toggleMod([elem], modName, modVal1, [modVal2], [condition])<ept id="1">&lt;/code&gt;</ept> – переключает значения модификатора. Если передан аргумент <bpt id="2">&lt;code&gt;</bpt>[modVal2]<ept id="2">&lt;/code&gt;</ept>, переключение происходит между <bpt id="3">&lt;code&gt;</bpt>modVal1<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>modVal2<ept id="4">&lt;/code&gt;</ept>, если нет, <bpt id="5">&lt;code&gt;</bpt>modVal1<ept id="5">&lt;/code&gt;</ept> будет поочередно устанавливаться и удаляться. Аргумент <bpt id="6">&lt;code&gt;</bpt>condition<ept id="6">&lt;/code&gt;</ept> в значении <bpt id="7">&lt;code&gt;</bpt>true<ept id="7">&lt;/code&gt;</ept> позволяет инвертировать порядок переключения значений модификатора.</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>delMod([elem], modName)<ept id="1">&lt;/code&gt;</ept> – удаляет модификатор <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Метод <bpt id="2">&lt;code&gt;</bpt>changeColor<ept id="2">&lt;/code&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>square<ept id="3">&lt;/code&gt;</ept> переключает модификатор <bpt id="4">&lt;code&gt;</bpt>color<ept id="4">&lt;/code&gt;</ept> между значениями <bpt id="5">&lt;code&gt;</bpt>green<ept id="5">&lt;/code&gt;</ept> и <bpt id="6">&lt;code&gt;</bpt>red<ept id="6">&lt;/code&gt;</ept>, если у блока выставлен модификатор <bpt id="7">&lt;code&gt;</bpt>has-color<ept id="7">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu25" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('square', {
    changeColor : function(e) {
        if(this.hasMod('has-color')) {
            this.toggleMod('color', 'green', 'red');
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Эти же методы позволяют управлять модификаторами элементов блока. Для этого первым аргументом передается ссылка на <bpt id="1">&lt;strong&gt;</bpt>DOM-узел элемента<ept id="1">&lt;/strong&gt;</ept> (а не имя элемента).</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Блок <bpt id="2">&lt;code&gt;</bpt>searchbox<ept id="2">&lt;/code&gt;</ept> по клику может выставлять своему элементу <bpt id="3">&lt;code&gt;</bpt>input<ept id="3">&lt;/code&gt;</ept> простой модификатор <bpt id="4">&lt;code&gt;</bpt>clean<ept id="4">&lt;/code&gt;</ept> (подразумеваемое значение — <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>):</source>
</trans-unit>
      <trans-unit id="tu28" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('searchbox', {
    _onClick: function() {
        this.setMod(this.elem('input'), 'clean');
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu29" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Для изменения значений модификаторов используйте API. Не следует устанавливать модификаторы, самостоятельно изменяя CSS-классы соответствующего DOM-узла.</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source>
</trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Полное описание API для управления модификаторами приведено в разделе <bpt id="1">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu31]&gt;</bpt>JSDoc<ept id="1">&lt;/a&gt;</ept> блока <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu32" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="mods-api-trigger"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu33" resname="----id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Триггеры на установку модификаторов</source>
</trans-unit>
      <trans-unit id="tu34" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Выполнение триггеров на установку модификаторов разбито на две фазы:</source>
</trans-unit>
      <trans-unit id="tu35" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>До установки модификатора<ept id="1">&lt;/strong&gt;</ept>. Эта фаза зарезервирована для<ph id="2">&lt;br /&gt;</ph>возможности <bpt id="3">&lt;strong&gt;</bpt>отменить<ept id="3">&lt;/strong&gt;</ept> установку модификатора. Если хотя бы один<ph id="4">&lt;br /&gt;</ph>из триггеров, выполняемых в этой фазе, вернет <bpt id="5">&lt;code&gt;</bpt>false<ept id="5">&lt;/code&gt;</ept>,<ph id="6">&lt;br /&gt;</ph>установки модификатора не произойдет.</source>
</trans-unit>
      <trans-unit id="tu36" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>После установки модификатора<ept id="1">&lt;/strong&gt;</ept>. Триггеры, выполняемые в этой<ph id="2">&lt;br /&gt;</ph>фазе, уже не могут отменить установку модификаторов.</source>
</trans-unit>
      <trans-unit id="tu37" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Триггеры могут быть привязаны к следующим типам изменений значений модификаторов:</source>
</trans-unit>
      <trans-unit id="tu38" restype="x-li" xml:space="preserve">
<source xml:lang="ru">установка <bpt id="1">&lt;em&gt;</bpt>любого<ept id="1">&lt;/em&gt;</ept> модификатора в <bpt id="2">&lt;em&gt;</bpt>любое<ept id="2">&lt;/em&gt;</ept> значение;</source>
</trans-unit>
      <trans-unit id="tu39" restype="x-li" xml:space="preserve">
<source xml:lang="ru">установка <bpt id="1">&lt;em&gt;</bpt>конкретного<ept id="1">&lt;/em&gt;</ept> модификатора <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept> в <bpt id="3">&lt;em&gt;</bpt>любое<ept id="3">&lt;/em&gt;</ept> значение (в том числе<ph id="4">&lt;br /&gt;</ph>установка простого модификатора в значение <bpt id="5">&lt;code&gt;</bpt>true<ept id="5">&lt;/code&gt;</ept>);</source>
</trans-unit>
      <trans-unit id="tu40" restype="x-li" xml:space="preserve">
<source xml:lang="ru">установка <bpt id="1">&lt;em&gt;</bpt>конкретного<ept id="1">&lt;/em&gt;</ept> модификатора <bpt id="2">&lt;code&gt;</bpt>modName<ept id="2">&lt;/code&gt;</ept> в <bpt id="3">&lt;em&gt;</bpt>конкретное<ept id="3">&lt;/em&gt;</ept> значение <bpt id="4">&lt;code&gt;</bpt>modVal<ept id="4">&lt;/code&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu41" restype="x-li" xml:space="preserve">
<source xml:lang="ru">установка модификатора в значение <bpt id="1">&lt;code&gt;</bpt>''<ept id="1">&lt;/code&gt;</ept> (пустая строка), что<ph id="2">&lt;br /&gt;</ph>эквивалентно удалению модификатора или установке простого<ph id="3">&lt;br /&gt;</ph>модификатора в значение <bpt id="4">&lt;code&gt;</bpt>false<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При установке модификатора <bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> в значение <bpt id="2">&lt;code&gt;</bpt>modVal<ept id="2">&lt;/code&gt;</ept> триггеры<ph id="3">&lt;br /&gt;</ph>каждой фазы (если они определены) вызываются в том порядке, в котором они<ph id="4">&lt;br /&gt;</ph>перечислены в приведенном выше списке событий (от общего к частному).</source>
</trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Таким образом, при определении триггера пользователь указывает:</source>
</trans-unit>
      <trans-unit id="tu44" restype="x-li" xml:space="preserve">
<source xml:lang="ru">фазу выполнения (до или после установки модификатора);</source>
</trans-unit>
      <trans-unit id="tu45" restype="x-li" xml:space="preserve">
<source xml:lang="ru">тип события (имя и устанавливаемое значение модификатора).</source>
</trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="mods-api-trigger-phase"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu47" resname="--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Фазы выполнения</source>
</trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Дополнительная фаза, предшествующая установке модификатора, позволяет<ph id="1">&lt;br /&gt;</ph>произвести некоторые проверки без риска повлиять на логику, связанную с установкой модификатора. Например, если существуют взаимоисключающие модификаторы, перед установкой одного из них логично проверить, не установлен ли другой.</source>
</trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример<ept id="1">&lt;/strong&gt;</ept>: модификатор <bpt id="2">&lt;code&gt;</bpt>focused<ept id="2">&lt;/code&gt;</ept> не будет установлен блоку <bpt id="3">&lt;code&gt;</bpt>searchbox<ept id="3">&lt;/code&gt;</ept>, если у него есть модификатор <bpt id="4">&lt;code&gt;</bpt>disabled<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu50" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('searchbox', {
    beforeSetMod : {
        'focused' : {
            'true' : function() {
                return !this.hasMod('disabled');
            }
        }
    },

    onSetMod : {
        'focused' : {
            'true' : function() { /* ... */ }
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Если триггер для фазы, предшествующей установке (<bpt id="1">&lt;code&gt;</bpt>beforeSetMod<ept id="1">&lt;/code&gt;</ept>), возвращает <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>, установка модификатора не производится.</source>
</trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Подробнее об использовании триггеров читайте в разделе «<bpt id="1">&lt;a href="i-bem-js-decl.ru.md#trigger-decl"&gt;</bpt>Декларация триггеров<ept id="1">&lt;/a&gt;</ept>».</source>
</trans-unit>
      <trans-unit id="tu53" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Триггер на установку модификатора <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept> в значение <bpt id="3">&lt;code&gt;</bpt>inited<ept id="3">&lt;/code&gt;</ept> является конструктором экземпляра блока, а в значение <bpt id="4">&lt;code&gt;</bpt>''<ept id="4">&lt;/code&gt;</ept> – деструктором экземпляра блока. Подробности смотрите в разделе «<bpt id="5">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>Инициализация<ept id="5">&lt;/a&gt;</ept>».</source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-extras.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="docs"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Что дальше?</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Информацию о БЭМ-методологии, инструментарии и новостях в мире БЭМ смотрите на сайте <bpt id="1">&lt;a href="https://ru.bem.info/" [#$tu4]&gt;</bpt>bem.info<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Полную информацию обо всех методах API <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> можно найти в разделе <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu6]&gt;</bpt>JSDoc<ept id="2">&lt;/a&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>i-bem<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/forum/</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Обменяться опытом и задать вопрос опытным пользователям и разработчикам <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> можно на <bpt id="2">&lt;a href="https://ru.bem.info/forum/" [#$tu8]&gt;</bpt>форуме<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Примеры использования <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> и дополнительную информацию смотрите в статьях:</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/articles/bem-js-main-terms/</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/articles/bem-js-main-terms/" [#$tu11]&gt;</bpt>JavaScript по БЭМ: основные понятия<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/tutorials/bem-js-tutorial/</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tutorials/bem-js-tutorial/" [#$tu13]&gt;</bpt>Справочное руководство по i-bem.js<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu15" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/tutorials/start-with-project-stub/</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tutorials/start-with-project-stub/" [#$tu15]&gt;</bpt>Создаем свой проект на БЭМ<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/articles/firm-card-story/</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/articles/firm-card-story/" [#$tu17]&gt;</bpt>БЭМ-приложение на Leaflet и API 2GIS<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-interact.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="ibc"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Взаимодействие блоков</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В рамках БЭМ-методологии блоки следует разрабатывать так, чтобы свести к минимуму зависимость состояний одних блоков от других. Однако на практике идеал полной независимости блоков недостижим.</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Взаимодействие блоков может быть реализовано:</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve">
<source xml:lang="ru">с помощью подписки на <bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events"&gt;</bpt>БЭМ-события<ept id="1">&lt;/a&gt;</ept> других экземпляров<ph id="2">&lt;br /&gt;</ph>блоков или подписки на <bpt id="3">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>делегированные БЭМ-события<ept id="3">&lt;/a&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve">
<source xml:lang="ru">с помощью непосредственного вызова методов других экземпляров<ph id="1">&lt;br /&gt;</ph>блоков или статических методов класса другого блока;</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve">
<source xml:lang="ru">через проверку состояний одного блока из другого;</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve">
<source xml:lang="ru">через <bpt id="1">&lt;em&gt;</bpt>каналы событий<ept id="1">&lt;/em&gt;</ept> (например с помощью элемента <bpt id="2">&lt;a href="../../common.blocks/events/__channels/events__channels.ru.md"&gt;</bpt>channels<ept id="2">&lt;/a&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>events<ept id="3">&lt;/code&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Не используйте <bpt id="2">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM-события<ept id="2">&lt;/a&gt;</ept> для<ph id="3">&lt;br /&gt;</ph>организации взаимодействия между блоками. DOM-события предназначены<ph id="4">&lt;br /&gt;</ph>только для реализации внутренних процедур блока.</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для реализации взаимодействия блоков <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> предоставляет API:</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-dom.ru.md#api-find"&gt;</bpt>Поиск экземпляров блоков в DOM-дереве<ept id="1">&lt;/a&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-html-binding.ru.md#api-nodom"&gt;</bpt>Доступ к экземплярам блоков без DOM-представления<ept id="1">&lt;/a&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="#api-calss"&gt;</bpt>Доступ к классам блоков<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api-class"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu15" resname="----id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Доступ к классам блоков</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">JS-компоненты, соответствующие классам блоков, можно получить через <bpt id="1">&lt;a href="https://github.com/ymaps/modules" [#$tu17]&gt;</bpt>модульную систему<ept id="1">&lt;/a&gt;</ept>. Это же верно и для блоков <bpt id="2">&lt;a href="i-bem-js-html-binding.ru.md#i-blocks"&gt;</bpt>без DOM-представления<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Доступ к классам блоков необходим для:</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-events.ru.md#bem-events-delegated"&gt;</bpt>Делегирования БЭМ-событий<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-decl.ru.md#inher-over"&gt;</bpt>Доопределения<ept id="1">&lt;/a&gt;</ept> декларации блока.</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Вызова статических методов класса.</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Вызов статического метода <bpt id="2">&lt;code&gt;</bpt>close<ept id="2">&lt;/code&gt;</ept> блока <bpt id="3">&lt;code&gt;</bpt>popup<ept id="3">&lt;/code&gt;</ept> позволяет закрыть все попапы на странице:</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('switcher', ['i-bem__dom', 'popup'], function(provide, BEMDOM, Popup) {

provide(BEMDOM.decl(this.name,
    {
        onSetMod : {
            'popup' : {
                'disabled' : function() {
                    Popup.close();
                }
            }
        }
    }
));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-html-binding.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="-js---html-id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Привязка JS-блоков к HTML</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">JavaScript-компоненты в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> служат для «оживления» HTML-элементов<ph id="2">&lt;br /&gt;</ph>страницы. Типовая задача JS-блока — установка реакции на события внутри HTML-фрагмента.</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> первичным «каркасом» является HTML-дерево документа. В нем размечаются точки, к которым привязаны интерактивные элементы интерфейса — JS-блоки.<ph id="2">&lt;br /&gt;</ph>Точка привязки JS-блока — HTML-элемент (DOM-узел), в атрибуте <bpt id="3">&lt;code&gt;</bpt>class<ept id="3">&lt;/code&gt;</ept> которого<ph id="4">&lt;br /&gt;</ph>указано имя блока, а в атрибуте <bpt id="5">&lt;code&gt;</bpt>data-bem<ept id="5">&lt;/code&gt;</ept> — <bpt id="6">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>параметры блока<ept id="6">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При загрузке страницы в браузере выполняется <bpt id="1">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализация блоков<ept id="1">&lt;/a&gt;</ept>. В ходе нее создаются экземпляры блоков — JS-объекты всех блоков, упомянутых в классах HTML-элементов страницы. JS-объект, привязанный к HTML-элементу,<ph id="2">&lt;br /&gt;</ph>обрабатывает происходящие на нем <bpt id="3">&lt;a href="i-bem-js-events.ru.md#dom-events"&gt;</bpt>DOM-события<ept id="3">&lt;/a&gt;</ept> и хранит состояния данного экземпляра блока.</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Такой способ привязки JavaScript-компонентов к HTML имеет следующие преимущества:</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve">
<source xml:lang="ru">естественная деградация интерфейса на клиентах с отключенным JavaScript;</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve">
<source xml:lang="ru">прогрессивный рендеринг — возможность начинать отрисовку элементов интерфейса до окончания загрузки всех данных страницы (например, изображений).</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-syntax"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu10" resname="---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Механизм привязки блоков</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы привязать блок к HTML-элементу (например, <bpt id="1">&lt;code&gt;</bpt>&lt;div&gt;...&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept>), необходимо:</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Декларировать блок в <bpt id="2">&lt;code&gt;</bpt>i-bem<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Cоздать модуль <bpt id="5">&lt;a href="https://github.com/ymaps/modules" [#$tu13]&gt;</bpt>ym<ept id="5">&lt;/a&gt;</ept>, содержащий JS-реализацию блока (<bpt id="6">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>декларацию<ept id="6">&lt;/a&gt;</ept>). Для этого строка с именем блока передается первым аргументом методам <bpt id="7">&lt;code&gt;</bpt>modules.define<ept id="7">&lt;/code&gt;</ept> и <bpt id="8">&lt;code&gt;</bpt>BEMDOM.decl<ept id="8">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM){

provide(BEMDOM.decl(this.name,
    {
        /* методы экземпляра */
    },
    {
        /* статические методы */
    }
));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu15" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">На уровне проекта каждый модуль <bpt id="1">&lt;code&gt;</bpt>ym<ept id="1">&lt;/code&gt;</ept> обычно хранится как отдельный файл технологии <bpt id="2">&lt;code&gt;</bpt>js<ept id="2">&lt;/code&gt;</ept>. Например, декларация <bpt id="3">&lt;code&gt;</bpt>my-block<ept id="3">&lt;/code&gt;</ept> в проекте может храниться как <bpt id="4">&lt;code&gt;</bpt>my-block/my-block.js<ept id="4">&lt;/code&gt;</ept> – файл <bpt id="5">&lt;code&gt;</bpt>my-block.js<ept id="5">&lt;/code&gt;</ept>, вложенный в папку <bpt id="6">&lt;code&gt;</bpt>my-block<ept id="6">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Отметить блок в HTML-дереве<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Добавить HTML-элементу атрибут <bpt id="4">&lt;code&gt;</bpt>class<ept id="4">&lt;/code&gt;</ept> с именем блока.</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt> &lt;div class="my-block"&gt;...&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Разрешить инициализацию экземпляра блока<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Включить класс <bpt id="4">&lt;code&gt;</bpt>i-bem<ept id="4">&lt;/code&gt;</ept> в список классов HTML-элемента. Наличие этого класса укажет фреймворку, что HTML-элемент связан с JS-блоком.</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem"&gt;...&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu20" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Передать параметры экземпляру блока<ept id="1">&lt;/strong&gt;</ept>.<ph id="2">&lt;br/&gt;</ph><ph id="3">&lt;br /&gt;</ph>Поместить параметры блока в атрибут <bpt id="4">&lt;code&gt;</bpt>data-bem<ept id="4">&lt;/code&gt;</ept>. Параметры блока записываются в формате JSON и представляют собой хэш вида: <bpt id="5">&lt;code&gt;</bpt>имя блока : хэш параметров<ept id="5">&lt;/code&gt;</ept>. Параметры будут переданы экземпляру блока <bpt id="6">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>в момент инициализации<ept id="6">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem" data-bem='{ "my-block": { "name": "ya" } }'&gt;...&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-conection"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu23" resname="---html--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Связь блоков с HTML-элементами</source>
</trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Одному HTML-элементу не обязательно должен соответствовать один экземпляр блока. Возможны следующие типы связи между блоками и HTML-элементами:</source>
</trans-unit>
      <trans-unit id="tu25" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="#html-simple"&gt;</bpt>Один HTML-элемент — один JS-блок<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu26" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="#html-mixes"&gt;</bpt>Один HTML-элемент — несколько JS-блоков<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="#distrib-block"&gt;</bpt>Один JS-блок на нескольких HTML-элементах<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu28" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-simple"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu29" resname="-html---js--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Один HTML-элемент — один JS-блок</source>
</trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Самый простой и распространенный способ привязки блоков к HTML.</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> HTML-элемент <bpt id="2">&lt;code&gt;</bpt>div<ept id="2">&lt;/code&gt;</ept>, на котором размещен блок <bpt id="3">&lt;code&gt;</bpt>my-block<ept id="3">&lt;/code&gt;</ept>.<ph id="4">&lt;br /&gt;</ph>Параметры блока: пустой список <bpt id="5">&lt;code&gt;</bpt>{}<ept id="5">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu32" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="my-block i-bem" data-bem='{ "my-block": {} }'&gt;
    ...
&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="html-mixes"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu34" resname="-html---js--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Один HTML-элемент — несколько JS-блоков</source>
</trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Техника размещения нескольких блоков на одном HTML-элементе в БЭМ-методологии называется <bpt id="1">&lt;a href="i-bem-js-decl.ru.md#inher-mixins"&gt;</bpt>микс<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu36" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> HTML-элемент <bpt id="2">&lt;code&gt;</bpt>div<ept id="2">&lt;/code&gt;</ept>, на котором размещены:</source>
</trans-unit>
      <trans-unit id="tu37" restype="x-li" xml:space="preserve">
<source xml:lang="ru">блок <bpt id="1">&lt;code&gt;</bpt>user<ept id="1">&lt;/code&gt;</ept> с параметром <bpt id="2">&lt;code&gt;</bpt>name<ept id="2">&lt;/code&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>pushkin<ept id="3">&lt;/code&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu38" restype="x-li" xml:space="preserve">
<source xml:lang="ru">блок <bpt id="1">&lt;code&gt;</bpt>avatar<ept id="1">&lt;/code&gt;</ept> с параметром <bpt id="2">&lt;code&gt;</bpt>img<ept id="2">&lt;/code&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>http://...<ept id="3">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu39" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="user avatar i-bem"
    data-bem='{
        "user": { "name": "pushkin" },
        "avatar": { "img": "http://..." }
     }'&gt;
     ...
&lt;/div&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="distrib-block"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu41" resname="-js----html--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Один JS-блок на нескольких HTML-элементах</source>
</trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Такой дизайн удобен, если нужно согласовать состояния нескольких компонентов блока.</source>
</trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы привязать экземпляр блока к нескольким HTML-элементам, нужно указать им в атрибуте <bpt id="1">&lt;code&gt;</bpt>data-bem<ept id="1">&lt;/code&gt;</ept> одинаковое значение параметра <bpt id="2">&lt;code&gt;</bpt>id<ept id="2">&lt;/code&gt;</ept>. Значением <bpt id="3">&lt;code&gt;</bpt>id<ept id="3">&lt;/code&gt;</ept> может быть произвольная строка.</source>
</trans-unit>
      <trans-unit id="tu44" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Экземпляр блока <bpt id="2">&lt;code&gt;</bpt>notebook<ept id="2">&lt;/code&gt;</ept> привязан к HTML-элементам <bpt id="3">&lt;code&gt;</bpt>div<ept id="3">&lt;/code&gt;</ept> и <bpt id="4">&lt;code&gt;</bpt>span<ept id="4">&lt;/code&gt;</ept>.<ph id="5">&lt;br /&gt;</ph>В параметрах блока указан общий <bpt id="6">&lt;code&gt;</bpt>id<ept id="6">&lt;/code&gt;</ept> — <bpt id="7">&lt;code&gt;</bpt>maintab<ept id="7">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu45" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>&lt;div class="notebook i-bem" data-bem='{ "notebook": { "id": "maintab" }}'&gt;
&lt;/div&gt;
...
&lt;span class="notebook i-bem" data-bem='{ "notebook": { "id": "maintab" }}'&gt;
&lt;/span&gt;<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В результате при инициализации блоков создается один JS-объект, поле <bpt id="1">&lt;a href="./i-bem-js-dom.ru.md"&gt;</bpt><bpt id="2">&lt;code&gt;</bpt>domElem<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept> которого содержит ссылки на jQuery-объекты обоих DOM-узлов.</source>
</trans-unit>
      <trans-unit id="tu47" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Например, виджет «вкладка», где клик по заголовку вкладки (первый HTML-элемент), меняет ее содержимое (второй HTML-элемент).<ph id="1">&lt;br /&gt;</ph>Другой пример: маркер, обозначающий точку на карте (первый элемент), и связанное с ним описание точки в списке рядом (второй элемент).</source>
</trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Идентификатор <bpt id="1">&lt;code&gt;</bpt>id<ept id="1">&lt;/code&gt;</ept> используется <bpt id="2">&lt;em&gt;</bpt>только в момент инициализации<ept id="2">&lt;/em&gt;</ept> экземпляра блока. Значение <bpt id="3">&lt;code&gt;</bpt>id<ept id="3">&lt;/code&gt;</ept> должно быть уникальным для экземпляров одного блока в рамках одной <bpt id="4">&lt;a href="i-bem-js-init.ru.md#init-wave"&gt;</bpt>волны инициализации<ept id="4">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="i-blocks"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu50" resname="--dom--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Блоки без DOM-представления</source>
</trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Инфраструктурный код, решающий общие задачи интерфейса (связь с бэкэндом, вспомогательные методы), можно оформить в виде блока. Это позволит выражать состояния блока с помощью <bpt id="1">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>модификаторов<ept id="1">&lt;/a&gt;</ept>, на изменение которых смогут <bpt id="2">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>подписаться другие блоки<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы не привязывать такие блоки к HTML-дереву искусственно в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> можно создавать блоки без DOM-представления.</source>
</trans-unit>
      <trans-unit id="tu53" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Блоки без DOM-представления:</source>
</trans-unit>
      <trans-unit id="tu54" restype="x-li" xml:space="preserve">
<source xml:lang="ru">не требуют привязки к HTML-коду страницы;</source>
</trans-unit>
      <trans-unit id="tu55" restype="x-li" xml:space="preserve">
<source xml:lang="ru">должны быть явно <bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-bem"&gt;</bpt>инициализированы<ept id="1">&lt;/a&gt;</ept> и уничтожены.</source>
</trans-unit>
      <trans-unit id="tu56" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api-nodom"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu57" resname="-----dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Доступ к экземплярам блоков без DOM-представления</source>
</trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При создании экземпляра блока без DOM-представления необходимо позаботиться о сохранении ссылки на этот экземпляр для блоков, которым нужно с ним взаимодействовать.</source>
</trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Смотрите также:</source>
</trans-unit>
      <trans-unit id="tu60" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="i-bem-js-init.ru.md#init-bem"&gt;</bpt>Инициализация и удаление блоков без DOM-представления<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-events.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">События</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> поддерживается два вида событий:</source>
</trans-unit>
      <trans-unit id="tu4" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>DOM-события<ept id="1">&lt;/strong&gt;</ept> — jQuery-события на DOM-узле, связанном с<ph id="2">&lt;br /&gt;</ph>блоком. Отражают взаимодействие пользователя с интерфейсом (клик,<ph id="3">&lt;br /&gt;</ph>наведение мыши, ввод текста и т.п.). DOM-события обычно обрабатывает<ph id="4">&lt;br /&gt;</ph>тот экземпляр блока, на DOM-узлах которого они возникают.</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>БЭМ-события<ept id="1">&lt;/strong&gt;</ept> — собственные события, генерируемые<ph id="2">&lt;br /&gt;</ph>блоком. Позволяют организовать API для<ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>взаимодействия с блоком<ept id="4">&lt;/a&gt;</ept>. БЭМ-события обычно обрабатывает<ph id="5">&lt;br /&gt;</ph>экземпляр блока, отслеживающий состояние других блоков, на которых<ph id="6">&lt;br /&gt;</ph>генерируются события.</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">DOM-события следует использовать только во <bpt id="1">&lt;em&gt;</bpt>внутренних<ept id="1">&lt;/em&gt;</ept> процедурах блока. Для<ph id="2">&lt;br /&gt;</ph>взаимодействия блока с <bpt id="3">&lt;em&gt;</bpt>внешней<ept id="3">&lt;/em&gt;</ept> средой (другими блоками) предназначены БЭМ-события.</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="delegated-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu8" resname="--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Делегирование событий</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Обработка БЭМ-событий и DOM-событий может быть <bpt id="1">&lt;strong&gt;</bpt>делегирована<ept id="1">&lt;/strong&gt;</ept> контейнеру<ph id="2">&lt;br /&gt;</ph>(всему документу или конкретному DOM-узлу). В этом случае контейнер<ph id="3">&lt;br /&gt;</ph>служит точкой обработки событий, возникающих на любом из его<ph id="4">&lt;br /&gt;</ph>дочерних узлов, даже если в момент подписки на события<ph id="5">&lt;br /&gt;</ph>некоторых из дочерних узлов еще не существовало.</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Например, блок меню может содержать вложенные блоки — пункты меню. Обработку<ph id="1">&lt;br /&gt;</ph>кликов на пунктах меню имеет смысл делегировать самому блоку<ph id="2">&lt;br /&gt;</ph>меню. Это, во-первых, позволяет сэкономить затраты ресурсов на<ph id="3">&lt;br /&gt;</ph>подписку на события (дешевле подписаться на одно событие контейнера,<ph id="4">&lt;br /&gt;</ph>чем на много событий элементов). Во-вторых, дает возможность добавлять и удалять пункты меню, не подписываясь на события добавленных пунктов и не отписываясь от событий удаленных.</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Возможно делегировать как БЭМ-события, так и DOM-события.</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dom-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu13" resname="dom--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">DOM-события</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Работа с DOM-событиями в <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> полностью реализована средствами фреймворка jQuery.</source>
</trans-unit>
      <trans-unit id="tu15" resname="--dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Подписка на DOM-событие</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">У объекта экземпляра блока зарезервирован набор методов для подписки на DOM-события:</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept> — на события основного DOM-узла блока и DOM-узлов его элементов.</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindToDoc(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu19" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>bindToWin(event, [data], handler)<ept id="1">&lt;/code&gt;</ept> – на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> В момент <bpt id="2">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализации экземпляра блока<ept id="2">&lt;/a&gt;</ept><ph id="3">&lt;br /&gt;</ph><bpt id="4">&lt;code&gt;</bpt>my-block<ept id="4">&lt;/code&gt;</ept> выполняется подписка на событие <bpt id="5">&lt;code&gt;</bpt>click<ept id="5">&lt;/code&gt;</ept>, при наступлении<ph id="6">&lt;br /&gt;</ph>которого блок выставляет себе <bpt id="7">&lt;a href="./i-bem-js-states.ru.md"&gt;</bpt>модификатор<ept id="7">&lt;/a&gt;</ept> <bpt id="8">&lt;code&gt;</bpt>size<ept id="8">&lt;/code&gt;</ept> в значение <bpt id="9">&lt;code&gt;</bpt>big<ept id="9">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu21" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('click', function(e) {
                    this.setMod('size', 'big');
                });
            }
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu22" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> При <bpt id="2">&lt;a href="./i-bem-js-init.ru.md"&gt;</bpt>инициализации экземпляра блока<ept id="2">&lt;/a&gt;</ept> <bpt id="3">&lt;code&gt;</bpt>my-form<ept id="3">&lt;/code&gt;</ept> выполняется<ph id="4">&lt;br /&gt;</ph>подписка на событие <bpt id="5">&lt;code&gt;</bpt>click<ept id="5">&lt;/code&gt;</ept> элемента <bpt id="6">&lt;code&gt;</bpt>submit<ept id="6">&lt;/code&gt;</ept>, при наступлении<ph id="7">&lt;br /&gt;</ph>которого будет вызвана функция-обработчик <bpt id="8">&lt;code&gt;</bpt>_onSubmit<ept id="8">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('submit', 'click', this._onSubmit);
            }
        }
    },

    _onSubmit : function() { /* ... */ }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu24" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Функция-обработчик выполняется в контексте того экземпляра<ph id="2">&lt;br /&gt;</ph>блока, в котором возникло событие.</source>
</trans-unit>
      <trans-unit id="tu25" resname="---dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Удаление подписки на DOM-событие</source>
</trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Удаление подписки на DOM-события выполняется автоматически при уничтожении экземпляра блока. Тем не менее у объекта экземпляра блока зарезервирован набор методов для удаления подписки вручную во время работы блока:</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>unbindFrom([elem], event, [handler])<ept id="1">&lt;/code&gt;</ept> — удаление подписки на события основного DOM-узла блока и DOM-узлов его элементов.</source>
</trans-unit>
      <trans-unit id="tu28" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>unbindFromDoc(event, [handler])<ept id="1">&lt;/code&gt;</ept> – удаление подписки на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>document<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu29" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>unbindFromWin(event, [handler])<ept id="1">&lt;/code&gt;</ept> – удаление подписки на события DOM-узла <bpt id="2">&lt;code&gt;</bpt>window<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Если при вызове одного из методов не указана функция-обработчик, будут удалены все обработчики, установленные блоком на DOM-узле для этого события.</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>_stopKeysListening : function() { 
    this.unbindFromDoc('keydown');  // удаляем все обработчики события 'keydown' 
                                    // установленные блоком DOM-узлу document
} <ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu32" resname="-dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Объект DOM-события</source>
</trans-unit>
      <trans-unit id="tu34" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://api.jquery.com/category/events/event-object/</source>
</trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Первым аргументом функция-обработчик получает jQuery-объект DOM-события — <bpt id="1">&lt;a href="https://api.jquery.com/category/events/event-object/" [#$tu34]&gt;</bpt><bpt id="2">&lt;code&gt;</bpt>{jQuery.Event}<ept id="2">&lt;/code&gt;</ept><ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu35" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Это позволяет использовать методы объекта <bpt id="1">&lt;code&gt;</bpt>stopPropаgation<ept id="1">&lt;/code&gt;</ept> и <bpt id="2">&lt;code&gt;</bpt>preventDefault<ept id="2">&lt;/code&gt;</ept> для управления распространением события и реакцией на него браузера.</source>
</trans-unit>
      <trans-unit id="tu36" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-block', {
    onSetMod : {
        'js' : {
            'inited': function() {
                this.bindTo('click', function(e) {
                    e.stopPropаgation(); // останавливаем всплывание события
                    this._onSubmit();
                });
            }
        }
    },

    _onSubmit : function() {
        /* ... */
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu37" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">DOM-событие может быть сгенерировано вручную, например, с помощью jQuery-функции <bpt id="1">&lt;code&gt;</bpt>trigger<ept id="1">&lt;/code&gt;</ept>. После объекта события, функция-обработчик DOM-события получит аргументами те параметры, с которыми <bpt id="2">&lt;code&gt;</bpt>trigger<ept id="2">&lt;/code&gt;</ept> была вызвана при создании события.</source>
</trans-unit>
      <trans-unit id="tu39" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">http://api.jquery.com/on/#event-handler</source>
</trans-unit>
      <trans-unit id="tu38" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>N.B.<ept id="1">&lt;/strong&gt;</ept> Параметры окружения и поведение функции-обработчика события идентичны <bpt id="2">&lt;a href="http://api.jquery.com/on/#event-handler" [#$tu39]&gt;</bpt>функции-обработчику<ept id="2">&lt;/a&gt;</ept> jQuery.</source>
</trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="dom-events-delegated"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu41" resname="-dom--id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Делегирование DOM-событий</source>
</trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Делегировать обработку DOM-событий рекомендуется с помощью метода <bpt id="1">&lt;code&gt;</bpt>liveBindTo([elem], event, handler)<ept id="1">&lt;/code&gt;</ept>. В <bpt id="2">&lt;a href="./i-bem-js-decl.ru.md"&gt;</bpt>статических методах декларации<ept id="2">&lt;/a&gt;</ept> блока зарезервированно свойство <bpt id="3">&lt;code&gt;</bpt>live<ept id="3">&lt;/code&gt;</ept> для подписки на делегированные DOM-события.</source>
</trans-unit>
      <trans-unit id="tu43" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> Все экземпляры блока <bpt id="2">&lt;code&gt;</bpt>menu<ept id="2">&lt;/code&gt;</ept> подписываются на делегированное DOM-событие <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> своих элементов <bpt id="4">&lt;code&gt;</bpt>item<ept id="4">&lt;/code&gt;</ept>. Метод <bpt id="5">&lt;code&gt;</bpt>_onItemClick<ept id="5">&lt;/code&gt;</ept> экземпляра блока <bpt id="6">&lt;code&gt;</bpt>menu<ept id="6">&lt;/code&gt;</ept> будет выполняться при клике на любой элемент <bpt id="7">&lt;code&gt;</bpt>item<ept id="7">&lt;/code&gt;</ept> в меню. Не важно, существовал ли этот элемент в момент инициализации экземпляра.</source>
</trans-unit>
      <trans-unit id="tu44" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('menu', {
    _onItemClick : function(e) { /* ... */ }
}, {
    live : function() {
        this.liveBindTo('item', 'click', function(e) {
            this._onItemClick(e);
        });
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu45" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Если в декларации блока задано свойство <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept>, инициализация экземпляров блока будет <bpt id="2">&lt;em&gt;</bpt>отложена<ept id="2">&lt;/em&gt;</ept> до момента, когда экземпляр блока потребуется в работе (<bpt id="3">&lt;a href="./i-bem-js-init.ru.md#init-live"&gt;</bpt>ленивая инициализация<ept id="3">&lt;/a&gt;</ept>). Таким моментом может стать DOM-событие на экземпляре блока, на которое выполнена делегированная подписка, или обращение к экземпляру блока <bpt id="4">&lt;a href="./i-bem-js-interact.ru.md"&gt;</bpt>из другого блока<ept id="4">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Функция-обработчик выполняется в контексте ближайшего блока данного типа на пути всплывания DOM-события (снизу вверх по DOM-дереву).</source>
</trans-unit>
      <trans-unit id="tu47" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Чтобы воспользоваться делегированными событиями в блоке, не откладывая инициализацию, из функции, заданной в свойстве <bpt id="1">&lt;code&gt;</bpt>live<ept id="1">&lt;/code&gt;</ept>, следует вернуть <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu48" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('my-block', ['i-bem__dom'], function(provide, BEMDOM) {

provide(BEMDOM.decl(this.name,
    {
        _onClick: function() { /* ... */ }  // будет выполняться каждый раз, 
                                            // когда возникает событие 'click'
    },
    {
        live: function() {
            this.liveBindTo('click', function() { this._onClick() });
            return false; // экземпляры блоков будут инициализированы автоматически
        }
    }
));

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu50" resname="--id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">БЭМ-события</source>
</trans-unit>
      <trans-unit id="tu51" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В отличие от DOM-событий, БЭМ-события генерируются не на DOM-элементах, а на <bpt id="1">&lt;strong&gt;</bpt>экземплярах блоков<ept id="1">&lt;/strong&gt;</ept>. Элементы блоков не могут генерировать БЭМ-события.</source>
</trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-subscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu53" resname="---id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Генерация БЭМ-события</source>
</trans-unit>
      <trans-unit id="tu54" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для генерации БЭМ-события используется метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>emit(event, [data])<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu55" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При взаимодействие пользователя с элементом управления блока возникают DOM-события. В ходе их обработки блоком можно создавать БЭМ-события. Это позволяет реализовать уровень абстракции над DOM-событиями. БЭМ-события создаются как реакция на DOM-события, но при соблюдении некоторых условий, например, при наличии или конкретном значении модификатора.</source>
</trans-unit>
      <trans-unit id="tu56" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Например, при клике по кнопке <bpt id="1">&lt;code&gt;</bpt>submit<ept id="1">&lt;/code&gt;</ept> (DOM-событие <bpt id="2">&lt;code&gt;</bpt>click<ept id="2">&lt;/code&gt;</ept>) <bpt id="3">&lt;strong&gt;</bpt>БЭМ-событие<ept id="3">&lt;/strong&gt;</ept> <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept> генерируется только в том случае, если у блока в этот момент не установлен модификатор <bpt id="5">&lt;code&gt;</bpt>disabled<ept id="5">&lt;/code&gt;</ept>:</source>
</trans-unit>
      <trans-unit id="tu57" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('submit', {
    onSetMod: {
        'js': {
            'inited': function() {
                this.bindTo('click', this._onClick); // подписка на DOM-событие "click"
            }
        }
    },

    _onClick: function() {
        if(!this.hasMod('disabled')) {
            this.emit('click'); // создание БЭМ-события "click"
        }
    }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Вторым аргументом <bpt id="1">&lt;code&gt;</bpt>emit<ept id="1">&lt;/code&gt;</ept> можно передать произвольные данные, которые будут доступны как второй аргумент функции-обработчика.</source>
</trans-unit>
      <trans-unit id="tu59" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-subscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu60" resname="----id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Подписка на БЭМ-события</source>
</trans-unit>
      <trans-unit id="tu61" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для подписки на БЭМ-события экземпляров блоков используется метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>on(event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu62" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> В момент инициализации HTML-формы (экземпляра блока <bpt id="2">&lt;code&gt;</bpt>my-form<ept id="2">&lt;/code&gt;</ept>) выполняется поиск вложенной в форму кнопки <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept> и подписка на ее БЭМ-событие <bpt id="4">&lt;code&gt;</bpt>click<ept id="4">&lt;/code&gt;</ept>. В результате при нажатии на кнопку (экземпляр блока <bpt id="5">&lt;code&gt;</bpt>submit<ept id="5">&lt;/code&gt;</ept>) будет выполнен метод <bpt id="6">&lt;code&gt;</bpt>_onSubmit<ept id="6">&lt;/code&gt;</ept> формы (экземпляр блока <bpt id="7">&lt;code&gt;</bpt>my-form<ept id="7">&lt;/code&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu63" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('my-form', {
    onSetMod: {
        'js': {
            'inited': function() {
                this.findBlockInside('submit').on(
                    'click', // имя БЭМ-события
                    this._onSubmit, // метод экземпляра блока my-form
                    this); // контекст для выполнения _onSubmit — блок my-form
            }
        }
    },

    _onSubmit: function() { /* ... */ }
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu64" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> Если не передавать аргумент <bpt id="2">&lt;code&gt;</bpt>[handlerCtx]<ept id="2">&lt;/code&gt;</ept>, контекстом для выполнения функции-обработчика будет тот блок, в котором возникло БЭМ-событие (в примере выше это блок <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept>).</source>
</trans-unit>
      <trans-unit id="tu65" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-unsubscribe"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu66" resname="-----id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Удаление подписки на БЭМ-события</source>
</trans-unit>
      <trans-unit id="tu67" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Удаление подписки на БЭМ-события выполняется автоматически при уничтожении экземпляра блока. Для удаления подписки вручную, используйте метод экземпляра блока<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;code&gt;</bpt>un(event, [handler], [handlerCtx])<ept id="2">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu68" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-modchange"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu69" resname="----id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">События при изменении модификаторов</source>
</trans-unit>
      <trans-unit id="tu70" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для подписки на БЭМ-события при изменении модификатора блока или элемента используется метод экземпляра блока <bpt id="1">&lt;code&gt;</bpt>on(event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept>. Метод принимает аргументы:</source>
</trans-unit>
      <trans-unit id="tu71" restype="x-li" xml:space="preserve">
<source xml:lang="ru">объект свойств модификатора, на который производится подписка;</source>
</trans-unit>
      <trans-unit id="tu72" restype="x-li" xml:space="preserve">
<source xml:lang="ru">функцию-обработчик, выполняющуюся при установке соответствующего модификатора.</source>
</trans-unit>
      <trans-unit id="tu73" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Объект, описывающий модификатор, может содержать следующие зарезервированные свойства:</source>
</trans-unit>
      <trans-unit id="tu74" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modName<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – имя модификатора. Обязательное свойство.</source>
</trans-unit>
      <trans-unit id="tu75" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modVal<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – значение модификатора. Обязательное свойство. Со значением <bpt id="3">&lt;code&gt;</bpt>*<ept id="3">&lt;/code&gt;</ept> производится подписка на установку модификатора в <bpt id="4">&lt;strong&gt;</bpt>любое<ept id="4">&lt;/strong&gt;</ept> значение. Со значением <bpt id="5">&lt;code&gt;</bpt>''<ept id="5">&lt;/code&gt;</ept> – на <bpt id="6">&lt;strong&gt;</bpt>удаление<ept id="6">&lt;/strong&gt;</ept> модификатора. Подробнее смотрите в разделе <bpt id="7">&lt;a href="i-bem-js-states.ru.md#mods-api-trigger"&gt;</bpt>триггеры на установку модификаторов<ept id="7">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu76" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>elem<ept id="1">&lt;/code&gt;</ept> <bpt id="2">&lt;code&gt;</bpt>{String}<ept id="2">&lt;/code&gt;</ept> – имя элемента (для модификаторов элементов).</source>
</trans-unit>
      <trans-unit id="tu77" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> В момент инициализации блок <bpt id="2">&lt;code&gt;</bpt>form<ept id="2">&lt;/code&gt;</ept> подписывается на событие при изменении модификатора у вложенного блока <bpt id="3">&lt;code&gt;</bpt>submit<ept id="3">&lt;/code&gt;</ept>. К примеру, можно подписаться на:</source>
</trans-unit>
      <trans-unit id="tu78" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu79" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">установку модификатора <bpt id="1">&lt;code&gt;</bpt>disabled<ept id="1">&lt;/code&gt;</ept> в любое значение;</source>
</trans-unit>
      <trans-unit id="tu80" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>BEMDOM.decl('form', {
onSetMod: {
    'js': {
        'inited': function() {
            var submit = findBlockInside('submit');
            submit.on({ modName : 'disabled', modVal : '*' }, function() {});
        }
    }
},
});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu81" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu82" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">установку модификатора <bpt id="1">&lt;code&gt;</bpt>'disabled'<ept id="1">&lt;/code&gt;</ept> в значение <bpt id="2">&lt;code&gt;</bpt>'true'<ept id="2">&lt;/code&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu83" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : 'true' }, function() {});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu84" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu85" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">удаление модификатора <bpt id="1">&lt;code&gt;</bpt>'disabled'<ept id="1">&lt;/code&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu86" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ modName : 'disabled', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu87" restype="x-li" xml:space="preserve">
<source xml:lang="ru"/>
</trans-unit>
      <trans-unit id="tu88" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">удаление модификатора <bpt id="1">&lt;code&gt;</bpt>m1<ept id="1">&lt;/code&gt;</ept> у элемента <bpt id="2">&lt;code&gt;</bpt>'control'<ept id="2">&lt;/code&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu89" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>submit.on({ elem : 'control', modName : 'm1', modVal : '' }, function() {});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu90" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-events-delegated"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu91" resname="---id" restype="x-h4" xml:space="preserve">
<source xml:lang="ru">Делегирование БЭМ-событий</source>
</trans-unit>
      <trans-unit id="tu92" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Делегирование БЭМ-событий означает, что блок подписывается на определенное БЭМ-событие <bpt id="1">&lt;strong&gt;</bpt>всех экземпляров<ept id="1">&lt;/strong&gt;</ept> блока с заданным именем <bpt id="2">&lt;strong&gt;</bpt>в пределах заданного контекста<ept id="2">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu93" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Подписка на делегированные БЭМ-события выполняется с помощью статического метода класса блока <bpt id="1">&lt;code&gt;</bpt>MyBlock.on([ctx], event, [data], handler, [handlerCtx])<ept id="1">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu94" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{jQuery} [ctx]<ept id="1">&lt;/code&gt;</ept> — DOM-узел, в пределах которого отслеживаются БЭМ-события (контейнер). Если не указан, в качестве контейнера используется весь документ.</source>
</trans-unit>
      <trans-unit id="tu95" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{String} event<ept id="1">&lt;/code&gt;</ept> — имя БЭМ-события.</source>
</trans-unit>
      <trans-unit id="tu96" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{Object} [data]<ept id="1">&lt;/code&gt;</ept> — произвольные данные, передаваемые функции-обработчику.</source>
</trans-unit>
      <trans-unit id="tu97" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{Function} handler<ept id="1">&lt;/code&gt;</ept> — функция-обработчик события.</source>
</trans-unit>
      <trans-unit id="tu98" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>{Object} [handlerCtx]<ept id="1">&lt;/code&gt;</ept> — контекст функции-обработчика события. Если отсутствует, функция-обработчик будет выполняться в контексте экземпляра блока, в котором произошло событие.</source>
</trans-unit>
      <trans-unit id="tu99" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Пример:<ept id="1">&lt;/strong&gt;</ept> При инициализации экземпляров блока <bpt id="2">&lt;code&gt;</bpt>menu<ept id="2">&lt;/code&gt;</ept> выполняется подписка на БЭМ-событие <bpt id="3">&lt;code&gt;</bpt>click<ept id="3">&lt;/code&gt;</ept> всех ссылок (экземпляров блока <bpt id="4">&lt;code&gt;</bpt>link<ept id="4">&lt;/code&gt;</ept>) в пределах DOM-узла блока (<bpt id="5">&lt;code&gt;</bpt>this.domElem<ept id="5">&lt;/code&gt;</ept>). В качестве контекста функции-обработчика передается текущий экземпляр блока.</source>
</trans-unit>
      <trans-unit id="tu100" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>modules.define('menu', ['i-bem__dom', 'link'], function(provide, BEMDOM, Link) {

provide(BEMDOM.decl(this.name,
    onSetMod : {
        'js' : {
            'inited' : function() {
                Link.on( // подписка на БЭМ-событие
                    this.domElem, // контейнер — DOM-узел экземпляра блока menu
                    'click', // БЭМ-событие
                    this._onLinkClick, // обработчик
                    this); // контекст обработчика — экземпляр блока menu
            },

            '' : function() {
                Link.un( // удаление подписки на БЭМ-событие
                    this.domElem,
                    'click',
                    this._onLinkClick,
                    this);
            }
        }
    },

    _onLinkClick : function(e) {
        var clickedLink = e.target; // экземпляр блока 'link', 
                                    // на котором произошло БЭМ-событие 'click'
    }
});

});<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu101" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Делегировать можно любые БЭМ-события, в том числе и события при изменении модификаторов.</source>
</trans-unit>
      <trans-unit id="tu102" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>NB<ept id="1">&lt;/strong&gt;</ept> <bpt id="2">&lt;strong&gt;</bpt>Удаление подписки<ept id="2">&lt;/strong&gt;</ept> на делегированные БЭМ-события никогда не происходит автоматически. Всегда следует явно удалять подписку при<ph id="3">&lt;br /&gt;</ph>помощи статического метода блока <bpt id="4">&lt;code&gt;</bpt>un([ctx], event, [handler], [handlerCtx])<ept id="4">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu103" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="api"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu104" resname="---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Объект БЭМ-события</source>
</trans-unit>
      <trans-unit id="tu106" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu105" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">При вызове функция-обработчик получает аргументом объект, описывающий БЭМ-событие. Класс объекта БЭМ-события <bpt id="1">&lt;code&gt;</bpt>events.Event<ept id="1">&lt;/code&gt;</ept> определен в <bpt id="2">&lt;a href="https://github.com/ymaps/modules" [#$tu106]&gt;</bpt>ym<ept id="2">&lt;/a&gt;</ept>-модуле <bpt id="3">&lt;a href="../../common.blocks/events/events.vanilla.js"&gt;</bpt><bpt id="4">&lt;code&gt;</bpt>events<ept id="4">&lt;/code&gt;</ept><ept id="3">&lt;/a&gt;</ept> библиотеки bem-core. Объект содержит поля:</source>
</trans-unit>
      <trans-unit id="tu107" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>target<ept id="1">&lt;/code&gt;</ept> — экземпляр блока, в котором произошло БЭМ-событие.</source>
</trans-unit>
      <trans-unit id="tu108" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>data<ept id="1">&lt;/code&gt;</ept> — произвольные дополнительные данные, переданные как аргумент <bpt id="2">&lt;code&gt;</bpt>data<ept id="2">&lt;/code&gt;</ept> при подписке на БЭМ-событие.</source>
</trans-unit>
      <trans-unit id="tu110" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://api.jquery.com/event.result/</source>
</trans-unit>
      <trans-unit id="tu109" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>result<ept id="1">&lt;/code&gt;</ept> — последнее значение, возвращенное обработчиком данного события. Аналогично <bpt id="2">&lt;a href="https://api.jquery.com/event.result/" [#$tu110]&gt;</bpt>jQuery.Event.result<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu112" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://api.jquery.com/event.type/</source>
</trans-unit>
      <trans-unit id="tu111" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>type<ept id="1">&lt;/code&gt;</ept> — тип события. Аналогично <bpt id="2">&lt;a href="https://api.jquery.com/event.type/" [#$tu112]&gt;</bpt>jQuery.Event.type<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu113" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Подробнее о свойствах и методах объекта БЭМ-события читайте в <bpt id="1">&lt;a href="../../common.blocks/events/events.ru.md"&gt;</bpt>документации блока events<ept id="1">&lt;/a&gt;</ept>.</source>
</trans-unit>
    </body>
  </file>
  <file original="common.docs/i-bem-js/i-bem-js-common.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="533">
    <body>
      <trans-unit id="tu1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu2" resname="--id" restype="x-h2" xml:space="preserve">
<source xml:lang="ru">Общие сведения</source>
</trans-unit>
      <trans-unit id="tu3" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-bem"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu4" resname="---javascript-id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">БЭМ-методология и JavaScript</source>
</trans-unit>
      <trans-unit id="tu5" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В БЭМ-методологии веб-интерфейс строится из независимых<ph id="1">&lt;br /&gt;</ph><bpt id="2">&lt;strong&gt;</bpt>блоков<ept id="2">&lt;/strong&gt;</ept> у которых могут быть <bpt id="3">&lt;strong&gt;</bpt>элементы<ept id="3">&lt;/strong&gt;</ept>. И блоки,<ph id="4">&lt;br /&gt;</ph>и элементы могут иметь состояния или особенности, описываемые <bpt id="5">&lt;strong&gt;</bpt>модификаторами<ept id="5">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu6" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Работа веб-интерфейса обеспечивается несколькими <bpt id="1">&lt;strong&gt;</bpt>технологиями<ept id="1">&lt;/strong&gt;</ept><ph id="2">&lt;br /&gt;</ph>(HTML, CSS, JS и т.д.). Его реализация разбита на компоненты по блокам. Блок содержит набор <bpt id="3">&lt;strong&gt;</bpt>файлов технологий<ept id="3">&lt;/strong&gt;</ept>, составляющих аспекты его реализации:</source>
</trans-unit>
      <trans-unit id="tu7" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>my-block.css<ept id="1">&lt;/code&gt;</ept> — внешний вид блока;</source>
</trans-unit>
      <trans-unit id="tu8" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>my-block.bemhtml<ept id="1">&lt;/code&gt;</ept> — шаблоны для генерации HTML-представления блока;</source>
</trans-unit>
      <trans-unit id="tu9" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>my-block.js<ept id="1">&lt;/code&gt;</ept> — <bpt id="2">&lt;strong&gt;</bpt>динамическое поведение<ept id="2">&lt;/strong&gt;</ept> блока в браузере.</source>
</trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Фреймворк <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> позволяет разложить клиентский JavaScript на компоненты в терминах БЭМ:</source>
</trans-unit>
      <trans-unit id="tu11" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Блок<ept id="1">&lt;/strong&gt;</ept> — JS-компонент, описывающий логику работы однотипных элементов интерфейса. Например, все кнопки могут быть реализованы в виде блока <bpt id="2">&lt;code&gt;</bpt>button<ept id="2">&lt;/code&gt;</ept>. В этом случае, <bpt id="3">&lt;code&gt;</bpt>button.css<ept id="3">&lt;/code&gt;</ept> определяет внешний вид всех кнопок, а <bpt id="4">&lt;code&gt;</bpt>button.js<ept id="4">&lt;/code&gt;</ept> — логику их работы.<ph id="5">&lt;br /&gt;</ph>На каждой странице может размещаться более одного <bpt id="6">&lt;strong&gt;</bpt>экземпляра блока<ept id="6">&lt;/strong&gt;</ept> (например, кнопки). Каждому экземпляру блока соответствует JS-объект, в памяти браузера, хранящий его состояние. JS-объект содержит ссылку на DOM-узел, к которому привязан данный экземпляр блока.</source>
</trans-unit>
      <trans-unit id="tu12" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Элементы<ept id="1">&lt;/strong&gt;</ept> — DOM-узлы, вложенные в DOM-узел блока, с атрибутом <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept>, указывающим на их роль в БЭМ-предметной области (имя блока и элемента). Элементы блока доступны через [JS-API][dom] экземпляра блока.</source>
</trans-unit>
      <trans-unit id="tu13" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Модификаторы<ept id="1">&lt;/strong&gt;</ept> — предоставляют информацию о состоянии блока и его элементов. Состояние модификаторов записывается в атрибуте <bpt id="2">&lt;code&gt;</bpt>class<ept id="2">&lt;/code&gt;</ept> на DOM-узлах блока и элементов. Управление модификаторами производится через <bpt id="3">&lt;a href="i-bem-js-states.ru.md#mods-api"&gt;</bpt>JS-API<ept id="3">&lt;/a&gt;</ept> экземпляра блока.</source>
</trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-build"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu15" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Сборка</source>
</trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Разработка в рамках БЭМ-методологии ведется модульно — каждый блок<ph id="1">&lt;br /&gt;</ph>программируется отдельно. Финальный исходный код веб-страниц<ph id="2">&lt;br /&gt;</ph>формируется из кода отдельных блоков с помощью процедур <bpt id="3">&lt;strong&gt;</bpt>сборки<ept id="3">&lt;/strong&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В файловой системе блок удобно представлять в виде каталога, а реализацию блока в каждой из технологий — в виде отдельного файла:</source>
</trans-unit>
      <trans-unit id="tu18" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>    desktop.blocks/
        my-block/
            my-block.css
            my-block.js
            my-block.bemhtml
            ...

    desktop.blocks/
        other-block/
            other-block.css
            other-block.js
            other-block.bemhtml
            ...<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Для каждой веб-страницы код использованных на ней блоков может быть собран в единые файлы:</source>
</trans-unit>
      <trans-unit id="tu20" restype="x-pre" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>    desktop.bundles/
        index/
            index.html
            index.css
            index.js
            ...<ept id="1">&lt;/code&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Существует два инструмента, поддерживающих БЭМ-предметную область, для сборки кода результирующих веб-страниц из отдельных описаний блоков:</source>
</trans-unit>
      <trans-unit id="tu23" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/tools/bem/</source>
</trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tools/bem/" [#$tu23]&gt;</bpt>bem-tools<ept id="1">&lt;/a&gt;</ept>;</source>
</trans-unit>
      <trans-unit id="tu25" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/tools/bem/enb-bem/</source>
</trans-unit>
      <trans-unit id="tu26" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/enb-make/enb-modules</source>
</trans-unit>
      <trans-unit id="tu24" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a href="https://ru.bem.info/tools/bem/enb-bem/" [#$tu25]&gt;</bpt>ENB<ept id="1">&lt;/a&gt;</ept> совместно с <bpt id="2">&lt;a href="https://github.com/enb-make/enb-modules" [#$tu26]&gt;</bpt>enb-modules<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu27" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Оба инструмента позволяют автоматизировать создание HTML-разметки для <bpt id="1">&lt;a href="./i-bem-js-html-binding.ru.md"&gt;</bpt>привязки JS-блоков<ept id="1">&lt;/a&gt;</ept> и <bpt id="2">&lt;a href="./i-bem-js-params.ru.md"&gt;</bpt>передачи параметров экземпляру блока<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu28" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-name"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu29" resname="-i-bem.js---id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Почему i-bem.js так называется</source>
</trans-unit>
      <trans-unit id="tu30" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">В соответствии с БЭМ-методологией, базовая JS-библиотека БЭМ-платформы изначально разрабатывалась<ph id="1">&lt;br /&gt;</ph>как особый служебный блок. Такой подход позволяет работать с базовыми библиотеками так же, как<ph id="2">&lt;br /&gt;</ph>и с обычными блоками. В частности, структурировать код в терминах элементов и модификаторов и<ph id="3">&lt;br /&gt;</ph>гибко настраивать поведение библиотеки на разных уровнях переопределения.</source>
</trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Служебным блокам в БЭМ было принято давать имена с префиксом <bpt id="1">&lt;code&gt;</bpt>i-<ept id="1">&lt;/code&gt;</ept>. Таким образом, имя <bpt id="2">&lt;code&gt;</bpt>i-bem.js<ept id="2">&lt;/code&gt;</ept><ph id="3">&lt;br /&gt;</ph>читается как <bpt id="4">&lt;em&gt;</bpt>реализация блока <bpt id="5">&lt;code&gt;</bpt>i-bem<ept id="5">&lt;/code&gt;</ept> в технологии <bpt id="6">&lt;code&gt;</bpt>JS<ept id="6">&lt;/code&gt;</ept><ept id="4">&lt;/em&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu32" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="intro-use"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
</trans-unit>
      <trans-unit id="tu33" resname="--i-bem.js-id" restype="x-h3" xml:space="preserve">
<source xml:lang="ru">Как использовать i-bem.js</source>
</trans-unit>
      <trans-unit id="tu35" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/libs/bem-core/</source>
</trans-unit>
      <trans-unit id="tu34" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Фреймворк <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> входит в состав библиотеки <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/" [#$tu35]&gt;</bpt>bem-core<ept id="2">&lt;/a&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu36" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Реализация <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> состоит из двух модулей:</source>
</trans-unit>
      <trans-unit id="tu38" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source>
</trans-unit>
      <trans-unit id="tu37" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Модуль <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu38]&gt;</bpt>i-bem<ept id="2">&lt;/a&gt;</ept><ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Базовая реализация JS-блока <bpt id="5">&lt;code&gt;</bpt>i-bem<ept id="5">&lt;/code&gt;</ept>, от которой наследуются все блоки в<ph id="6">&lt;br /&gt;</ph><bpt id="7">&lt;code&gt;</bpt>i-bem.js<ept id="7">&lt;/code&gt;</ept>. Блок <bpt id="8">&lt;code&gt;</bpt>i-bem<ept id="8">&lt;/code&gt;</ept> написан с расчетом на использование в любом<ph id="9">&lt;br /&gt;</ph>JS-окружении: как на клиенте, так и на сервере например, в<ph id="10">&lt;br /&gt;</ph>Node.js).</source>
</trans-unit>
      <trans-unit id="tu40" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/</source>
</trans-unit>
      <trans-unit id="tu39" restype="x-li" xml:space="preserve">
<source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Модуль <bpt id="2">&lt;a href="https://ru.bem.info/libs/bem-core/current/desktop/i-bem/jsdoc/" [#$tu40]&gt;</bpt>i-bem__dom<ept id="2">&lt;/a&gt;</ept><ept id="1">&lt;/strong&gt;</ept>.<ph id="3">&lt;br/&gt;</ph><ph id="4">&lt;br /&gt;</ph>Базовая реализация блока, привязанного к DOM-узлу.<ph id="5">&lt;br /&gt;</ph>Рассчитан на использование на клиенте, опирается на работу браузеров с DOM. Зависит от <bpt id="6">&lt;code&gt;</bpt>jQuery<ept id="6">&lt;/code&gt;</ept>.</source>
</trans-unit>
      <trans-unit id="tu41" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Зависимости:</source>
</trans-unit>
      <trans-unit id="tu42" restype="x-li" xml:space="preserve">
<source xml:lang="ru">jQuery (только для модуля <bpt id="1">&lt;code&gt;</bpt>i-bem__dom<ept id="1">&lt;/code&gt;</ept>). При использовании <bpt id="2">&lt;code&gt;</bpt>bem-core<ept id="2">&lt;/code&gt;</ept> отдельная установка<ph id="3">&lt;br /&gt;</ph> jQuery не требуется.</source>
</trans-unit>
      <trans-unit id="tu44" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://github.com/ymaps/modules</source>
</trans-unit>
      <trans-unit id="tu45" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/tools/bem/</source>
</trans-unit>
      <trans-unit id="tu43" restype="x-li" xml:space="preserve">
<source xml:lang="ru">Модульная система <bpt id="1">&lt;a href="https://github.com/ymaps/modules" [#$tu44]&gt;</bpt>ym/modules<ept id="1">&lt;/a&gt;</ept>. При использовании<ph id="2">&lt;br /&gt;</ph> <bpt id="3">&lt;a href="https://ru.bem.info/tools/bem/" [#$tu45]&gt;</bpt>bem-tools<ept id="3">&lt;/a&gt;</ept> с технологией <bpt id="4">&lt;code&gt;</bpt>.browser.js<ept id="4">&lt;/code&gt;</ept> (и производных от нее)<ph id="5">&lt;br /&gt;</ph> эта зависимость удовлетворяется автоматически.</source>
</trans-unit>
      <trans-unit id="tu47" restype="x-data-url" xml:space="preserve">
<source xml:lang="ru">https://ru.bem.info/tutorials/project-stub/</source>
</trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Можно использовать <bpt id="1">&lt;code&gt;</bpt>i-bem.js<ept id="1">&lt;/code&gt;</ept> как часть полного стека<ph id="2">&lt;br /&gt;</ph>БЭМ-инструментов. В этом случае свой проект удобно создавать на основе<ph id="3">&lt;br /&gt;</ph>шаблонного репозитория <bpt id="4">&lt;a href="https://ru.bem.info/tutorials/project-stub/" [#$tu47]&gt;</bpt>project-stub<ept id="4">&lt;/a&gt;</ept>, в котором настроена автоматическая установка зависимых библиотек и сборка.</source>
</trans-unit>
      <trans-unit id="tu48" restype="x-paragraph" xml:space="preserve">
<source xml:lang="ru">Если не планируется использование других технологий БЭМ-платформы, достаточно поместить код библиотеки <bpt id="1">&lt;code&gt;</bpt>bem-core<ept id="1">&lt;/code&gt;</ept> в существующий проект.</source>
</trans-unit>
    </body>
  </file>
</xliff>
